
Project_data_collection_BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000995c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009b00  08009b00  00019b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fd4  08009fd4  00019fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fd8  08009fd8  00019fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000448  20000000  08009fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000500  20000448  0800a424  00020448  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000948  0800a424  00020948  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004404b  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004a7b  00000000  00000000  000644c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00022e30  00000000  00000000  00068f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002858  00000000  00000000  0008bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002740  00000000  00000000  0008e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a098  00000000  00000000  00090d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00027c64  00000000  00000000  000aada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a1f48  00000000  00000000  000d2a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0017494c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000991c  00000000  00000000  001749a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000448 	.word	0x20000448
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ae4 	.word	0x08009ae4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000044c 	.word	0x2000044c
 80001dc:	08009ae4 	.word	0x08009ae4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8000eb8:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8000eba:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <HTS221_GetCapabilities+0x18>)
 8000ebe:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8000ec0:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 8000ec6:	4770      	bx	lr
 8000ec8:	41480000 	.word	0x41480000

08000ecc <Linear_Interpolation>:
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8000ecc:	edd0 6a03 	vldr	s13, [r0, #12]
 8000ed0:	edd0 7a01 	vldr	s15, [r0, #4]
 8000ed4:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8000ed8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000edc:	ed90 0a02 	vldr	s0, [r0, #8]
 8000ee0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000ee4:	ed90 6a00 	vldr	s12, [r0]
 8000ee8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000eec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef4:	ee30 0a46 	vsub.f32	s0, s0, s12
}
 8000ef8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000efc:	4770      	bx	lr

08000efe <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000efe:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8000f00:	6884      	ldr	r4, [r0, #8]
 8000f02:	b92c      	cbnz	r4, 8000f10 <ReadRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8000f04:	6944      	ldr	r4, [r0, #20]
 8000f06:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000f0a:	7b00      	ldrb	r0, [r0, #12]
 8000f0c:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8000f0e:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8000f10:	6944      	ldr	r4, [r0, #20]
 8000f12:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000f16:	7b00      	ldrb	r0, [r0, #12]
 8000f18:	47a0      	blx	r4
 8000f1a:	e7f8      	b.n	8000f0e <ReadRegWrap+0x10>

08000f1c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f1c:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8000f1e:	6884      	ldr	r4, [r0, #8]
 8000f20:	b92c      	cbnz	r4, 8000f2e <WriteRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8000f22:	6904      	ldr	r4, [r0, #16]
 8000f24:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000f28:	7b00      	ldrb	r0, [r0, #12]
 8000f2a:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8000f2c:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8000f2e:	6904      	ldr	r4, [r0, #16]
 8000f30:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000f34:	7b00      	ldrb	r0, [r0, #12]
 8000f36:	47a0      	blx	r4
 8000f38:	e7f8      	b.n	8000f2c <WriteRegWrap+0x10>

08000f3a <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 8000f3a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d012      	beq.n	8000f68 <HTS221_HUM_Enable+0x2e>
{
 8000f42:	b510      	push	{r4, lr}
 8000f44:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8000f46:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000f4a:	b123      	cbz	r3, 8000f56 <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 8000f52:	2000      	movs	r0, #0
}
 8000f54:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000f56:	2101      	movs	r1, #1
 8000f58:	301c      	adds	r0, #28
 8000f5a:	f000 fa64 	bl	8001426 <hts221_power_on_set>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d0f4      	beq.n	8000f4c <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	e7f5      	b.n	8000f54 <HTS221_HUM_Enable+0x1a>
    return HTS221_OK;
 8000f68:	2000      	movs	r0, #0
}
 8000f6a:	4770      	bx	lr

08000f6c <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 8000f6c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000f70:	b18b      	cbz	r3, 8000f96 <HTS221_HUM_Disable+0x2a>
{
 8000f72:	b510      	push	{r4, lr}
 8000f74:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8000f76:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000f7a:	b11b      	cbz	r3, 8000f84 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8000f82:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	301c      	adds	r0, #28
 8000f88:	f000 fa4d 	bl	8001426 <hts221_power_on_set>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d0f5      	beq.n	8000f7c <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	e7f5      	b.n	8000f82 <HTS221_HUM_Disable+0x16>
    return HTS221_OK;
 8000f96:	2000      	movs	r0, #0
}
 8000f98:	4770      	bx	lr

08000f9a <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8000f9a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d012      	beq.n	8000fc8 <HTS221_TEMP_Enable+0x2e>
{
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8000fa6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000faa:	b123      	cbz	r3, 8000fb6 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 8000fb2:	2000      	movs	r0, #0
}
 8000fb4:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	301c      	adds	r0, #28
 8000fba:	f000 fa34 	bl	8001426 <hts221_power_on_set>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d0f4      	beq.n	8000fac <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8000fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc6:	e7f5      	b.n	8000fb4 <HTS221_TEMP_Enable+0x1a>
    return HTS221_OK;
 8000fc8:	2000      	movs	r0, #0
}
 8000fca:	4770      	bx	lr

08000fcc <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8000fcc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000fd0:	b18b      	cbz	r3, 8000ff6 <HTS221_TEMP_Disable+0x2a>
{
 8000fd2:	b510      	push	{r4, lr}
 8000fd4:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8000fd6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000fda:	b11b      	cbz	r3, 8000fe4 <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8000fe2:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	301c      	adds	r0, #28
 8000fe8:	f000 fa1d 	bl	8001426 <hts221_power_on_set>
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d0f5      	beq.n	8000fdc <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	e7f5      	b.n	8000fe2 <HTS221_TEMP_Disable+0x16>
    return HTS221_OK;
 8000ff6:	2000      	movs	r0, #0
}
 8000ff8:	4770      	bx	lr

08000ffa <HTS221_DeInit>:
{
 8000ffa:	b510      	push	{r4, lr}
 8000ffc:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8000ffe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001002:	2b01      	cmp	r3, #1
 8001004:	d003      	beq.n	800100e <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8001006:	2000      	movs	r0, #0
 8001008:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 800100c:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 800100e:	f7ff ffad 	bl	8000f6c <HTS221_HUM_Disable>
 8001012:	b938      	cbnz	r0, 8001024 <HTS221_DeInit+0x2a>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff ffd9 	bl	8000fcc <HTS221_TEMP_Disable>
 800101a:	2800      	cmp	r0, #0
 800101c:	d0f3      	beq.n	8001006 <HTS221_DeInit+0xc>
      return HTS221_ERROR;
 800101e:	f04f 30ff 	mov.w	r0, #4294967295
 8001022:	e7f3      	b.n	800100c <HTS221_DeInit+0x12>
      return HTS221_ERROR;
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	e7f0      	b.n	800100c <HTS221_DeInit+0x12>

0800102a <HTS221_SetOutputDataRate>:
{
 800102a:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800102c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001030:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	d908      	bls.n	800104c <HTS221_SetOutputDataRate+0x22>
 800103a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800103e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d807      	bhi.n	8001058 <HTS221_SetOutputDataRate+0x2e>
 8001048:	2102      	movs	r1, #2
 800104a:	e000      	b.n	800104e <HTS221_SetOutputDataRate+0x24>
 800104c:	2101      	movs	r1, #1
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800104e:	301c      	adds	r0, #28
 8001050:	f000 f980 	bl	8001354 <hts221_data_rate_set>
 8001054:	b910      	cbnz	r0, 800105c <HTS221_SetOutputDataRate+0x32>
}
 8001056:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001058:	2103      	movs	r1, #3
 800105a:	e7f8      	b.n	800104e <HTS221_SetOutputDataRate+0x24>
    return HTS221_ERROR;
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	e7f9      	b.n	8001056 <HTS221_SetOutputDataRate+0x2c>

08001062 <HTS221_Initialize>:
{
 8001062:	b538      	push	{r3, r4, r5, lr}
 8001064:	4604      	mov	r4, r0
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001066:	f100 051c 	add.w	r5, r0, #28
 800106a:	2100      	movs	r1, #0
 800106c:	4628      	mov	r0, r5
 800106e:	f000 f9da 	bl	8001426 <hts221_power_on_set>
 8001072:	b958      	cbnz	r0, 800108c <HTS221_Initialize+0x2a>
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001074:	2101      	movs	r1, #1
 8001076:	4628      	mov	r0, r5
 8001078:	f000 f9a7 	bl	80013ca <hts221_block_data_update_set>
 800107c:	b948      	cbnz	r0, 8001092 <HTS221_Initialize+0x30>
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800107e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff ffd1 	bl	800102a <HTS221_SetOutputDataRate>
 8001088:	b930      	cbnz	r0, 8001098 <HTS221_Initialize+0x36>
}
 800108a:	bd38      	pop	{r3, r4, r5, pc}
    return HTS221_ERROR;
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	e7fb      	b.n	800108a <HTS221_Initialize+0x28>
    return HTS221_ERROR;
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	e7f8      	b.n	800108a <HTS221_Initialize+0x28>
    return HTS221_ERROR;
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	e7f5      	b.n	800108a <HTS221_Initialize+0x28>

0800109e <HTS221_Init>:
{
 800109e:	b510      	push	{r4, lr}
 80010a0:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80010a2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80010a6:	b123      	cbz	r3, 80010b2 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 80010ae:	2000      	movs	r0, #0
}
 80010b0:	bd10      	pop	{r4, pc}
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80010b2:	f7ff ffd6 	bl	8001062 <HTS221_Initialize>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d0f6      	beq.n	80010a8 <HTS221_Init+0xa>
      return HTS221_ERROR;
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	e7f7      	b.n	80010b0 <HTS221_Init+0x12>

080010c0 <HTS221_HUM_SetOutputDataRate>:
{
 80010c0:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 80010c2:	f7ff ffb2 	bl	800102a <HTS221_SetOutputDataRate>
}
 80010c6:	bd08      	pop	{r3, pc}

080010c8 <HTS221_TEMP_SetOutputDataRate>:
{
 80010c8:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 80010ca:	f7ff ffae 	bl	800102a <HTS221_SetOutputDataRate>
}
 80010ce:	bd08      	pop	{r3, pc}

080010d0 <HTS221_ReadID>:
{
 80010d0:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80010d2:	301c      	adds	r0, #28
 80010d4:	f000 f9a0 	bl	8001418 <hts221_device_id_get>
 80010d8:	b900      	cbnz	r0, 80010dc <HTS221_ReadID+0xc>
}
 80010da:	bd08      	pop	{r3, pc}
    return HTS221_ERROR;
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	e7fb      	b.n	80010da <HTS221_ReadID+0xa>
	...

080010e4 <HTS221_GetOutputDataRate>:
{
 80010e4:	b510      	push	{r4, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80010ea:	f10d 0107 	add.w	r1, sp, #7
 80010ee:	301c      	adds	r0, #28
 80010f0:	f000 f949 	bl	8001386 <hts221_data_rate_get>
 80010f4:	b9a8      	cbnz	r0, 8001122 <HTS221_GetOutputDataRate+0x3e>
  switch (odr_low_level)
 80010f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d814      	bhi.n	8001128 <HTS221_GetOutputDataRate+0x44>
 80010fe:	e8df f003 	tbb	[pc, r3]
 8001102:	0602      	.short	0x0602
 8001104:	0d0a      	.short	0x0d0a
      *Odr = 0.0f;
 8001106:	2300      	movs	r3, #0
 8001108:	6023      	str	r3, [r4, #0]
}
 800110a:	b002      	add	sp, #8
 800110c:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 800110e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001112:	6023      	str	r3, [r4, #0]
      break;
 8001114:	e7f9      	b.n	800110a <HTS221_GetOutputDataRate+0x26>
      *Odr = 7.0f;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HTS221_GetOutputDataRate+0x4c>)
 8001118:	6023      	str	r3, [r4, #0]
      break;
 800111a:	e7f6      	b.n	800110a <HTS221_GetOutputDataRate+0x26>
      *Odr = 12.5f;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HTS221_GetOutputDataRate+0x50>)
 800111e:	6023      	str	r3, [r4, #0]
      break;
 8001120:	e7f3      	b.n	800110a <HTS221_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 8001122:	f04f 30ff 	mov.w	r0, #4294967295
 8001126:	e7f0      	b.n	800110a <HTS221_GetOutputDataRate+0x26>
  switch (odr_low_level)
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	e7ed      	b.n	800110a <HTS221_GetOutputDataRate+0x26>
 800112e:	bf00      	nop
 8001130:	40e00000 	.word	0x40e00000
 8001134:	41480000 	.word	0x41480000

08001138 <HTS221_HUM_GetOutputDataRate>:
{
 8001138:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 800113a:	f7ff ffd3 	bl	80010e4 <HTS221_GetOutputDataRate>
}
 800113e:	bd08      	pop	{r3, pc}

08001140 <HTS221_TEMP_GetOutputDataRate>:
{
 8001140:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001142:	f7ff ffcf 	bl	80010e4 <HTS221_GetOutputDataRate>
}
 8001146:	bd08      	pop	{r3, pc}

08001148 <HTS221_HUM_GetHumidity>:
{
 8001148:	b530      	push	{r4, r5, lr}
 800114a:	b087      	sub	sp, #28
 800114c:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800114e:	f100 041c 	add.w	r4, r0, #28
 8001152:	a904      	add	r1, sp, #16
 8001154:	4620      	mov	r0, r4
 8001156:	f000 f9d2 	bl	80014fe <hts221_hum_adc_point_0_get>
 800115a:	2800      	cmp	r0, #0
 800115c:	d15a      	bne.n	8001214 <HTS221_HUM_GetHumidity+0xcc>
  lin_hum.x0 = (float)coeff.i16bit;
 800115e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116a:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800116e:	a904      	add	r1, sp, #16
 8001170:	4620      	mov	r0, r4
 8001172:	f000 f971 	bl	8001458 <hts221_hum_rh_point_0_get>
 8001176:	2800      	cmp	r0, #0
 8001178:	d14f      	bne.n	800121a <HTS221_HUM_GetHumidity+0xd2>
  lin_hum.y0 = (float)coeff.u8bit[0];
 800117a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001186:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800118a:	a904      	add	r1, sp, #16
 800118c:	4620      	mov	r0, r4
 800118e:	f000 f9bd 	bl	800150c <hts221_hum_adc_point_1_get>
 8001192:	2800      	cmp	r0, #0
 8001194:	d144      	bne.n	8001220 <HTS221_HUM_GetHumidity+0xd8>
  lin_hum.x1 = (float)coeff.i16bit;
 8001196:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80011a6:	a904      	add	r1, sp, #16
 80011a8:	4620      	mov	r0, r4
 80011aa:	f000 f960 	bl	800146e <hts221_hum_rh_point_1_get>
 80011ae:	bbd0      	cbnz	r0, 8001226 <HTS221_HUM_GetHumidity+0xde>
  lin_hum.y1 = (float)coeff.u8bit[0];
 80011b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80011c6:	a905      	add	r1, sp, #20
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 f917 	bl	80013fc <hts221_humidity_raw_get>
 80011ce:	4604      	mov	r4, r0
 80011d0:	bb60      	cbnz	r0, 800122c <HTS221_HUM_GetHumidity+0xe4>
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80011d2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80011d6:	ee00 3a10 	vmov	s0, r3
 80011da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80011de:	4668      	mov	r0, sp
 80011e0:	f7ff fe74 	bl	8000ecc <Linear_Interpolation>
 80011e4:	ed85 0a00 	vstr	s0, [r5]
  if (*Value < 0.0f)
 80011e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d40d      	bmi.n	800120e <HTS221_HUM_GetHumidity+0xc6>
  if (*Value > 100.0f)
 80011f2:	ed95 7a00 	vldr	s14, [r5]
 80011f6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001234 <HTS221_HUM_GetHumidity+0xec>
 80011fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	dd01      	ble.n	8001208 <HTS221_HUM_GetHumidity+0xc0>
    *Value = 100.0f;
 8001204:	edc5 7a00 	vstr	s15, [r5]
}
 8001208:	4620      	mov	r0, r4
 800120a:	b007      	add	sp, #28
 800120c:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 800120e:	2300      	movs	r3, #0
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	e7ee      	b.n	80011f2 <HTS221_HUM_GetHumidity+0xaa>
    return HTS221_ERROR;
 8001214:	f04f 34ff 	mov.w	r4, #4294967295
 8001218:	e7f6      	b.n	8001208 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 800121a:	f04f 34ff 	mov.w	r4, #4294967295
 800121e:	e7f3      	b.n	8001208 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 8001220:	f04f 34ff 	mov.w	r4, #4294967295
 8001224:	e7f0      	b.n	8001208 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 8001226:	f04f 34ff 	mov.w	r4, #4294967295
 800122a:	e7ed      	b.n	8001208 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 800122c:	f04f 34ff 	mov.w	r4, #4294967295
 8001230:	e7ea      	b.n	8001208 <HTS221_HUM_GetHumidity+0xc0>
 8001232:	bf00      	nop
 8001234:	42c80000 	.word	0x42c80000

08001238 <HTS221_TEMP_GetTemperature>:
{
 8001238:	b530      	push	{r4, r5, lr}
 800123a:	b087      	sub	sp, #28
 800123c:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800123e:	f100 041c 	add.w	r4, r0, #28
 8001242:	a904      	add	r1, sp, #16
 8001244:	4620      	mov	r0, r4
 8001246:	f000 f968 	bl	800151a <hts221_temp_adc_point_0_get>
 800124a:	2800      	cmp	r0, #0
 800124c:	d145      	bne.n	80012da <HTS221_TEMP_GetTemperature+0xa2>
  lin_temp.x0 = (float)coeff.i16bit;
 800124e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800125e:	a904      	add	r1, sp, #16
 8001260:	4620      	mov	r0, r4
 8001262:	f000 f90f 	bl	8001484 <hts221_temp_deg_point_0_get>
 8001266:	bbd8      	cbnz	r0, 80012e0 <HTS221_TEMP_GetTemperature+0xa8>
  lin_temp.y0 = (float)coeff.u8bit[0];
 8001268:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001274:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001278:	a904      	add	r1, sp, #16
 800127a:	4620      	mov	r0, r4
 800127c:	f000 f954 	bl	8001528 <hts221_temp_adc_point_1_get>
 8001280:	bb88      	cbnz	r0, 80012e6 <HTS221_TEMP_GetTemperature+0xae>
  lin_temp.x1 = (float)coeff.i16bit;
 8001282:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128e:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001292:	a904      	add	r1, sp, #16
 8001294:	4620      	mov	r0, r4
 8001296:	f000 f913 	bl	80014c0 <hts221_temp_deg_point_1_get>
 800129a:	bb38      	cbnz	r0, 80012ec <HTS221_TEMP_GetTemperature+0xb4>
  lin_temp.y1 = (float)coeff.u8bit[0];
 800129c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80012b2:	a905      	add	r1, sp, #20
 80012b4:	4620      	mov	r0, r4
 80012b6:	f000 f8a8 	bl	800140a <hts221_temperature_raw_get>
 80012ba:	4604      	mov	r4, r0
 80012bc:	b9c8      	cbnz	r0, 80012f2 <HTS221_TEMP_GetTemperature+0xba>
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80012be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80012c2:	ee00 3a10 	vmov	s0, r3
 80012c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80012ca:	4668      	mov	r0, sp
 80012cc:	f7ff fdfe 	bl	8000ecc <Linear_Interpolation>
 80012d0:	ed85 0a00 	vstr	s0, [r5]
}
 80012d4:	4620      	mov	r0, r4
 80012d6:	b007      	add	sp, #28
 80012d8:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 80012da:	f04f 34ff 	mov.w	r4, #4294967295
 80012de:	e7f9      	b.n	80012d4 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80012e0:	f04f 34ff 	mov.w	r4, #4294967295
 80012e4:	e7f6      	b.n	80012d4 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80012e6:	f04f 34ff 	mov.w	r4, #4294967295
 80012ea:	e7f3      	b.n	80012d4 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80012ec:	f04f 34ff 	mov.w	r4, #4294967295
 80012f0:	e7f0      	b.n	80012d4 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80012f2:	f04f 34ff 	mov.w	r4, #4294967295
 80012f6:	e7ed      	b.n	80012d4 <HTS221_TEMP_GetTemperature+0x9c>

080012f8 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 80012f8:	b1b8      	cbz	r0, 800132a <HTS221_RegisterBusIO+0x32>
{
 80012fa:	b508      	push	{r3, lr}
 80012fc:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80012fe:	680a      	ldr	r2, [r1, #0]
 8001300:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001302:	6848      	ldr	r0, [r1, #4]
 8001304:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001306:	6888      	ldr	r0, [r1, #8]
 8001308:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800130a:	7b08      	ldrb	r0, [r1, #12]
 800130c:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800130e:	6908      	ldr	r0, [r1, #16]
 8001310:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001312:	6948      	ldr	r0, [r1, #20]
 8001314:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001316:	6989      	ldr	r1, [r1, #24]
 8001318:	6199      	str	r1, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800131a:	4907      	ldr	r1, [pc, #28]	; (8001338 <HTS221_RegisterBusIO+0x40>)
 800131c:	6219      	str	r1, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800131e:	4907      	ldr	r1, [pc, #28]	; (800133c <HTS221_RegisterBusIO+0x44>)
 8001320:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001322:	625b      	str	r3, [r3, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8001324:	b122      	cbz	r2, 8001330 <HTS221_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 8001326:	4790      	blx	r2
}
 8001328:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800132e:	4770      	bx	lr
      ret = HTS221_ERROR;
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001334:	e7f8      	b.n	8001328 <HTS221_RegisterBusIO+0x30>
 8001336:	bf00      	nop
 8001338:	08000eff 	.word	0x08000eff
 800133c:	08000f1d 	.word	0x08000f1d

08001340 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8001340:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001342:	6844      	ldr	r4, [r0, #4]
 8001344:	6880      	ldr	r0, [r0, #8]
 8001346:	47a0      	blx	r4
  return ret;
}
 8001348:	bd10      	pop	{r4, pc}

0800134a <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800134a:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800134c:	6804      	ldr	r4, [r0, #0]
 800134e:	6880      	ldr	r0, [r0, #8]
 8001350:	47a0      	blx	r4
  return ret;
}
 8001352:	bd10      	pop	{r4, pc}

08001354 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001354:	b530      	push	{r4, r5, lr}
 8001356:	b083      	sub	sp, #12
 8001358:	4604      	mov	r4, r0
 800135a:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800135c:	2301      	movs	r3, #1
 800135e:	aa01      	add	r2, sp, #4
 8001360:	2120      	movs	r1, #32
 8001362:	f7ff ffed 	bl	8001340 <hts221_read_reg>

  if(ret == 0){
 8001366:	b108      	cbz	r0, 800136c <hts221_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 8001368:	b003      	add	sp, #12
 800136a:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 800136c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001370:	f365 0301 	bfi	r3, r5, #0, #2
 8001374:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001378:	2301      	movs	r3, #1
 800137a:	aa01      	add	r2, sp, #4
 800137c:	2120      	movs	r1, #32
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff ffe3 	bl	800134a <hts221_write_reg>
  return ret;
 8001384:	e7f0      	b.n	8001368 <hts221_data_rate_set+0x14>

08001386 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001386:	b510      	push	{r4, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	460c      	mov	r4, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800138c:	2301      	movs	r3, #1
 800138e:	aa01      	add	r2, sp, #4
 8001390:	2120      	movs	r1, #32
 8001392:	f7ff ffd5 	bl	8001340 <hts221_read_reg>

  switch (reg.odr) {
 8001396:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d810      	bhi.n	80013c4 <hts221_data_rate_get+0x3e>
 80013a2:	e8df f003 	tbb	[pc, r3]
 80013a6:	0602      	.short	0x0602
 80013a8:	0c09      	.short	0x0c09
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 80013ae:	b002      	add	sp, #8
 80013b0:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 80013b2:	2301      	movs	r3, #1
 80013b4:	7023      	strb	r3, [r4, #0]
      break;
 80013b6:	e7fa      	b.n	80013ae <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_7Hz;
 80013b8:	2302      	movs	r3, #2
 80013ba:	7023      	strb	r3, [r4, #0]
      break;
 80013bc:	e7f7      	b.n	80013ae <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_12Hz5;
 80013be:	2303      	movs	r3, #3
 80013c0:	7023      	strb	r3, [r4, #0]
      break;
 80013c2:	e7f4      	b.n	80013ae <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_ND;
 80013c4:	2304      	movs	r3, #4
 80013c6:	7023      	strb	r3, [r4, #0]
  return ret;
 80013c8:	e7f1      	b.n	80013ae <hts221_data_rate_get+0x28>

080013ca <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80013ca:	b530      	push	{r4, r5, lr}
 80013cc:	b083      	sub	sp, #12
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80013d2:	2301      	movs	r3, #1
 80013d4:	aa01      	add	r2, sp, #4
 80013d6:	2120      	movs	r1, #32
 80013d8:	f7ff ffb2 	bl	8001340 <hts221_read_reg>

  if(ret == 0){
 80013dc:	b108      	cbz	r0, 80013e2 <hts221_block_data_update_set+0x18>
    reg.bdu = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 80013de:	b003      	add	sp, #12
 80013e0:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80013e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013e6:	f365 0382 	bfi	r3, r5, #2, #1
 80013ea:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80013ee:	2301      	movs	r3, #1
 80013f0:	aa01      	add	r2, sp, #4
 80013f2:	2120      	movs	r1, #32
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff ffa8 	bl	800134a <hts221_write_reg>
  return ret;
 80013fa:	e7f0      	b.n	80013de <hts221_block_data_update_set+0x14>

080013fc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013fc:	b508      	push	{r3, lr}
 80013fe:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001400:	2302      	movs	r3, #2
 8001402:	2128      	movs	r1, #40	; 0x28
 8001404:	f7ff ff9c 	bl	8001340 <hts221_read_reg>
  return ret;
}
 8001408:	bd08      	pop	{r3, pc}

0800140a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800140a:	b508      	push	{r3, lr}
 800140c:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800140e:	2302      	movs	r3, #2
 8001410:	212a      	movs	r1, #42	; 0x2a
 8001412:	f7ff ff95 	bl	8001340 <hts221_read_reg>
  return ret;
}
 8001416:	bd08      	pop	{r3, pc}

08001418 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001418:	b508      	push	{r3, lr}
 800141a:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800141c:	2301      	movs	r3, #1
 800141e:	210f      	movs	r1, #15
 8001420:	f7ff ff8e 	bl	8001340 <hts221_read_reg>
  return ret;
}
 8001424:	bd08      	pop	{r3, pc}

08001426 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001426:	b530      	push	{r4, r5, lr}
 8001428:	b083      	sub	sp, #12
 800142a:	4604      	mov	r4, r0
 800142c:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800142e:	2301      	movs	r3, #1
 8001430:	aa01      	add	r2, sp, #4
 8001432:	2120      	movs	r1, #32
 8001434:	f7ff ff84 	bl	8001340 <hts221_read_reg>

  if(ret == 0){
 8001438:	b108      	cbz	r0, 800143e <hts221_power_on_set+0x18>
    reg.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }
  return ret;
}
 800143a:	b003      	add	sp, #12
 800143c:	bd30      	pop	{r4, r5, pc}
    reg.pd = val;
 800143e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001442:	f365 13c7 	bfi	r3, r5, #7, #1
 8001446:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800144a:	2301      	movs	r3, #1
 800144c:	aa01      	add	r2, sp, #4
 800144e:	2120      	movs	r1, #32
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ff7a 	bl	800134a <hts221_write_reg>
  return ret;
 8001456:	e7f0      	b.n	800143a <hts221_power_on_set+0x14>

08001458 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001458:	b510      	push	{r4, lr}
 800145a:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 800145c:	2301      	movs	r3, #1
 800145e:	460a      	mov	r2, r1
 8001460:	2130      	movs	r1, #48	; 0x30
 8001462:	f7ff ff6d 	bl	8001340 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001466:	7823      	ldrb	r3, [r4, #0]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	7023      	strb	r3, [r4, #0]

  return ret;
}
 800146c:	bd10      	pop	{r4, pc}

0800146e <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800146e:	b510      	push	{r4, lr}
 8001470:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001472:	2301      	movs	r3, #1
 8001474:	460a      	mov	r2, r1
 8001476:	2131      	movs	r1, #49	; 0x31
 8001478:	f7ff ff62 	bl	8001340 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800147c:	7823      	ldrb	r3, [r4, #0]
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001482:	bd10      	pop	{r4, pc}

08001484 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001484:	b530      	push	{r4, r5, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800148c:	2301      	movs	r3, #1
 800148e:	f10d 0203 	add.w	r2, sp, #3
 8001492:	2132      	movs	r1, #50	; 0x32
 8001494:	f7ff ff54 	bl	8001340 <hts221_read_reg>

  if(ret == 0){
 8001498:	b108      	cbz	r0, 800149e <hts221_temp_deg_point_0_get+0x1a>
    coeff_h = reg.t0_msb;
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
  }

  return ret;
}
 800149a:	b003      	add	sp, #12
 800149c:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800149e:	2301      	movs	r3, #1
 80014a0:	aa01      	add	r2, sp, #4
 80014a2:	2135      	movs	r1, #53	; 0x35
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ff4b 	bl	8001340 <hts221_read_reg>
    coeff_h = reg.t0_msb;
 80014aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80014b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80014b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	702b      	strb	r3, [r5, #0]
  return ret;
 80014be:	e7ec      	b.n	800149a <hts221_temp_deg_point_0_get+0x16>

080014c0 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80014c0:	b530      	push	{r4, r5, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	4604      	mov	r4, r0
 80014c6:	460d      	mov	r5, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80014c8:	2301      	movs	r3, #1
 80014ca:	f10d 0203 	add.w	r2, sp, #3
 80014ce:	2133      	movs	r1, #51	; 0x33
 80014d0:	f7ff ff36 	bl	8001340 <hts221_read_reg>

  if(ret == 0){
 80014d4:	b108      	cbz	r0, 80014da <hts221_temp_deg_point_1_get+0x1a>
    coeff_h = reg.t1_msb;
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
  }

  return ret;
}
 80014d6:	b003      	add	sp, #12
 80014d8:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80014da:	2301      	movs	r3, #1
 80014dc:	aa01      	add	r2, sp, #4
 80014de:	2135      	movs	r1, #53	; 0x35
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff ff2d 	bl	8001340 <hts221_read_reg>
    coeff_h = reg.t1_msb;
 80014e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014ea:	f3c3 0281 	ubfx	r2, r3, #2, #2
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80014ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80014f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80014f6:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80014fa:	702b      	strb	r3, [r5, #0]
  return ret;
 80014fc:	e7eb      	b.n	80014d6 <hts221_temp_deg_point_1_get+0x16>

080014fe <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80014fe:	b508      	push	{r3, lr}
 8001500:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8001502:	2302      	movs	r3, #2
 8001504:	2136      	movs	r1, #54	; 0x36
 8001506:	f7ff ff1b 	bl	8001340 <hts221_read_reg>
  return ret;
}
 800150a:	bd08      	pop	{r3, pc}

0800150c <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800150c:	b508      	push	{r3, lr}
 800150e:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8001510:	2302      	movs	r3, #2
 8001512:	213a      	movs	r1, #58	; 0x3a
 8001514:	f7ff ff14 	bl	8001340 <hts221_read_reg>
  return ret;
}
 8001518:	bd08      	pop	{r3, pc}

0800151a <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800151a:	b508      	push	{r3, lr}
 800151c:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 800151e:	2302      	movs	r3, #2
 8001520:	213c      	movs	r1, #60	; 0x3c
 8001522:	f7ff ff0d 	bl	8001340 <hts221_read_reg>
  return ret;
}
 8001526:	bd08      	pop	{r3, pc}

08001528 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001528:	b508      	push	{r3, lr}
 800152a:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800152c:	2302      	movs	r3, #2
 800152e:	213e      	movs	r1, #62	; 0x3e
 8001530:	f7ff ff06 	bl	8001340 <hts221_read_reg>
  return ret;
}
 8001534:	bd08      	pop	{r3, pc}
	...

08001538 <LPS22HB_GetCapabilities>:
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001538:	2000      	movs	r0, #0
 800153a:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 8001540:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8001542:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001544:	2300      	movs	r3, #0
 8001546:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001548:	4b01      	ldr	r3, [pc, #4]	; (8001550 <LPS22HB_GetCapabilities+0x18>)
 800154a:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
 800154c:	60cb      	str	r3, [r1, #12]
  return LPS22HB_OK;
}
 800154e:	4770      	bx	lr
 8001550:	42960000 	.word	0x42960000

08001554 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001554:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001558:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d916      	bls.n	8001590 <LPS22HB_SetOutputDataRate_When_Disabled+0x3c>
 8001562:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001566:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	d914      	bls.n	800159a <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8001570:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001574:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	d90f      	bls.n	800159e <LPS22HB_SetOutputDataRate_When_Disabled+0x4a>
 800157e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80015a8 <LPS22HB_SetOutputDataRate_When_Disabled+0x54>
 8001582:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	d80a      	bhi.n	80015a2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800158c:	2304      	movs	r3, #4
 800158e:	e000      	b.n	8001592 <LPS22HB_SetOutputDataRate_When_Disabled+0x3e>
 8001590:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001592:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
}
 8001596:	2000      	movs	r0, #0
 8001598:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800159a:	2302      	movs	r3, #2
 800159c:	e7f9      	b.n	8001592 <LPS22HB_SetOutputDataRate_When_Disabled+0x3e>
 800159e:	2303      	movs	r3, #3
 80015a0:	e7f7      	b.n	8001592 <LPS22HB_SetOutputDataRate_When_Disabled+0x3e>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e7f5      	b.n	8001592 <LPS22HB_SetOutputDataRate_When_Disabled+0x3e>
 80015a6:	bf00      	nop
 80015a8:	42480000 	.word	0x42480000

080015ac <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80015ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015b0:	4606      	mov	r6, r0
 80015b2:	4688      	mov	r8, r1
 80015b4:	4691      	mov	r9, r2
 80015b6:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80015b8:	6883      	ldr	r3, [r0, #8]
 80015ba:	b98b      	cbnz	r3, 80015e0 <ReadRegWrap+0x34>
  int32_t ret = LPS22HB_OK;
 80015bc:	2300      	movs	r3, #0
  {
    for (i = 0; i < Length; i++)
 80015be:	461c      	mov	r4, r3
 80015c0:	42bc      	cmp	r4, r7
 80015c2:	d212      	bcs.n	80015ea <ReadRegWrap+0x3e>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80015c4:	6975      	ldr	r5, [r6, #20]
 80015c6:	eb04 0108 	add.w	r1, r4, r8
 80015ca:	2301      	movs	r3, #1
 80015cc:	eb09 0204 	add.w	r2, r9, r4
 80015d0:	b289      	uxth	r1, r1
 80015d2:	7b30      	ldrb	r0, [r6, #12]
 80015d4:	47a8      	blx	r5
      if (ret != LPS22HB_OK)
 80015d6:	4603      	mov	r3, r0
 80015d8:	b950      	cbnz	r0, 80015f0 <ReadRegWrap+0x44>
    for (i = 0; i < Length; i++)
 80015da:	3401      	adds	r4, #1
 80015dc:	b2a4      	uxth	r4, r4
 80015de:	e7ef      	b.n	80015c0 <ReadRegWrap+0x14>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80015e0:	6944      	ldr	r4, [r0, #20]
 80015e2:	463b      	mov	r3, r7
 80015e4:	7b00      	ldrb	r0, [r0, #12]
 80015e6:	47a0      	blx	r4
 80015e8:	4603      	mov	r3, r0
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LPS22HB_ERROR;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	e7f9      	b.n	80015ea <ReadRegWrap+0x3e>

080015f6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80015f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015fa:	4606      	mov	r6, r0
 80015fc:	4688      	mov	r8, r1
 80015fe:	4691      	mov	r9, r2
 8001600:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001602:	6883      	ldr	r3, [r0, #8]
 8001604:	b98b      	cbnz	r3, 800162a <WriteRegWrap+0x34>
  int32_t ret = LPS22HB_OK;
 8001606:	2300      	movs	r3, #0
  {
    for (i = 0; i < Length; i++)
 8001608:	461c      	mov	r4, r3
 800160a:	42bc      	cmp	r4, r7
 800160c:	d212      	bcs.n	8001634 <WriteRegWrap+0x3e>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800160e:	6935      	ldr	r5, [r6, #16]
 8001610:	eb04 0108 	add.w	r1, r4, r8
 8001614:	2301      	movs	r3, #1
 8001616:	eb09 0204 	add.w	r2, r9, r4
 800161a:	b289      	uxth	r1, r1
 800161c:	7b30      	ldrb	r0, [r6, #12]
 800161e:	47a8      	blx	r5
      if (ret != LPS22HB_OK)
 8001620:	4603      	mov	r3, r0
 8001622:	b950      	cbnz	r0, 800163a <WriteRegWrap+0x44>
    for (i = 0; i < Length; i++)
 8001624:	3401      	adds	r4, #1
 8001626:	b2a4      	uxth	r4, r4
 8001628:	e7ef      	b.n	800160a <WriteRegWrap+0x14>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800162a:	6904      	ldr	r4, [r0, #16]
 800162c:	463b      	mov	r3, r7
 800162e:	7b00      	ldrb	r0, [r0, #12]
 8001630:	47a0      	blx	r4
 8001632:	4603      	mov	r3, r0
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LPS22HB_ERROR;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e7f9      	b.n	8001634 <WriteRegWrap+0x3e>

08001640 <LPS22HB_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 8001640:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001644:	2b01      	cmp	r3, #1
 8001646:	d00b      	beq.n	8001660 <LPS22HB_PRESS_Enable+0x20>
{
 8001648:	b510      	push	{r4, lr}
 800164a:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800164c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8001650:	301c      	adds	r0, #28
 8001652:	f000 fa2f 	bl	8001ab4 <lps22hb_data_rate_set>
 8001656:	b928      	cbnz	r0, 8001664 <LPS22HB_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 800165e:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8001660:	2000      	movs	r0, #0
}
 8001662:	4770      	bx	lr
    return LPS22HB_ERROR;
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	e7f9      	b.n	800165e <LPS22HB_PRESS_Enable+0x1e>

0800166a <LPS22HB_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 800166a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800166e:	2b01      	cmp	r3, #1
 8001670:	d00b      	beq.n	800168a <LPS22HB_TEMP_Enable+0x20>
{
 8001672:	b510      	push	{r4, lr}
 8001674:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001676:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 800167a:	301c      	adds	r0, #28
 800167c:	f000 fa1a 	bl	8001ab4 <lps22hb_data_rate_set>
 8001680:	b928      	cbnz	r0, 800168e <LPS22HB_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8001688:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 800168a:	2000      	movs	r0, #0
}
 800168c:	4770      	bx	lr
    return LPS22HB_ERROR;
 800168e:	f04f 30ff 	mov.w	r0, #4294967295
 8001692:	e7f9      	b.n	8001688 <LPS22HB_TEMP_Enable+0x1e>

08001694 <LPS22HB_Initialize>:
{
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	4604      	mov	r4, r0
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001698:	f100 051c 	add.w	r5, r0, #28
 800169c:	2101      	movs	r1, #1
 800169e:	4628      	mov	r0, r5
 80016a0:	f000 fa5f 	bl	8001b62 <lps22hb_low_power_set>
 80016a4:	bb20      	cbnz	r0, 80016f0 <LPS22HB_Initialize+0x5c>
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4628      	mov	r0, r5
 80016aa:	f000 fa03 	bl	8001ab4 <lps22hb_data_rate_set>
 80016ae:	bb10      	cbnz	r0, 80016f6 <LPS22HB_Initialize+0x62>
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80016b0:	2102      	movs	r1, #2
 80016b2:	4628      	mov	r0, r5
 80016b4:	f000 f9e5 	bl	8001a82 <lps22hb_low_pass_filter_mode_set>
 80016b8:	bb00      	cbnz	r0, 80016fc <LPS22HB_Initialize+0x68>
  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80016ba:	2101      	movs	r1, #1
 80016bc:	4628      	mov	r0, r5
 80016be:	f000 f9c7 	bl	8001a50 <lps22hb_block_data_update_set>
 80016c2:	4606      	mov	r6, r0
 80016c4:	b9e8      	cbnz	r0, 8001702 <LPS22HB_Initialize+0x6e>
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80016c6:	68a3      	ldr	r3, [r4, #8]
 80016c8:	b94b      	cbnz	r3, 80016de <LPS22HB_Initialize+0x4a>
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4628      	mov	r0, r5
 80016ce:	f000 fa61 	bl	8001b94 <lps22hb_auto_add_inc_set>
 80016d2:	b9c8      	cbnz	r0, 8001708 <LPS22HB_Initialize+0x74>
  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 80016da:	4630      	mov	r0, r6
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80016de:	2101      	movs	r1, #1
 80016e0:	4628      	mov	r0, r5
 80016e2:	f000 fa57 	bl	8001b94 <lps22hb_auto_add_inc_set>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d0f4      	beq.n	80016d4 <LPS22HB_Initialize+0x40>
      return LPS22HB_ERROR;
 80016ea:	f04f 36ff 	mov.w	r6, #4294967295
 80016ee:	e7f4      	b.n	80016da <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80016f0:	f04f 36ff 	mov.w	r6, #4294967295
 80016f4:	e7f1      	b.n	80016da <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80016f6:	f04f 36ff 	mov.w	r6, #4294967295
 80016fa:	e7ee      	b.n	80016da <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80016fc:	f04f 36ff 	mov.w	r6, #4294967295
 8001700:	e7eb      	b.n	80016da <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 8001702:	f04f 36ff 	mov.w	r6, #4294967295
 8001706:	e7e8      	b.n	80016da <LPS22HB_Initialize+0x46>
      return LPS22HB_ERROR;
 8001708:	f04f 36ff 	mov.w	r6, #4294967295
 800170c:	e7e5      	b.n	80016da <LPS22HB_Initialize+0x46>

0800170e <LPS22HB_Init>:
{
 800170e:	b510      	push	{r4, lr}
 8001710:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001712:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001716:	b123      	cbz	r3, 8001722 <LPS22HB_Init+0x14>
  pObj->is_initialized = 1U;
 8001718:	2301      	movs	r3, #1
 800171a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HB_OK;
 800171e:	2000      	movs	r0, #0
}
 8001720:	bd10      	pop	{r4, pc}
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001722:	f7ff ffb7 	bl	8001694 <LPS22HB_Initialize>
 8001726:	2800      	cmp	r0, #0
 8001728:	d0f6      	beq.n	8001718 <LPS22HB_Init+0xa>
      return LPS22HB_ERROR;
 800172a:	f04f 30ff 	mov.w	r0, #4294967295
 800172e:	e7f7      	b.n	8001720 <LPS22HB_Init+0x12>

08001730 <LPS22HB_ReadID>:
{
 8001730:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001732:	301c      	adds	r0, #28
 8001734:	f000 fa0e 	bl	8001b54 <lps22hb_device_id_get>
 8001738:	b900      	cbnz	r0, 800173c <LPS22HB_ReadID+0xc>
}
 800173a:	bd08      	pop	{r3, pc}
    return LPS22HB_ERROR;
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	e7fb      	b.n	800173a <LPS22HB_ReadID+0xa>

08001742 <LPS22HB_PRESS_Disable>:
{
 8001742:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8001744:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001748:	b1c3      	cbz	r3, 800177c <LPS22HB_PRESS_Disable+0x3a>
 800174a:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800174c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001750:	b11b      	cbz	r3, 800175a <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 8001752:	2000      	movs	r0, #0
 8001754:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8001758:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800175a:	f100 051c 	add.w	r5, r0, #28
 800175e:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8001762:	4628      	mov	r0, r5
 8001764:	f000 f9bf 	bl	8001ae6 <lps22hb_data_rate_get>
 8001768:	b950      	cbnz	r0, 8001780 <LPS22HB_PRESS_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4628      	mov	r0, r5
 800176e:	f000 f9a1 	bl	8001ab4 <lps22hb_data_rate_set>
 8001772:	2800      	cmp	r0, #0
 8001774:	d0ed      	beq.n	8001752 <LPS22HB_PRESS_Disable+0x10>
      return LPS22HB_ERROR;
 8001776:	f04f 30ff 	mov.w	r0, #4294967295
 800177a:	e7ed      	b.n	8001758 <LPS22HB_PRESS_Disable+0x16>
    return LPS22HB_OK;
 800177c:	2000      	movs	r0, #0
 800177e:	e7eb      	b.n	8001758 <LPS22HB_PRESS_Disable+0x16>
      return LPS22HB_ERROR;
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	e7e8      	b.n	8001758 <LPS22HB_PRESS_Disable+0x16>
	...

08001788 <LPS22HB_GetOutputDataRate>:
{
 8001788:	b510      	push	{r4, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800178e:	f10d 0107 	add.w	r1, sp, #7
 8001792:	301c      	adds	r0, #28
 8001794:	f000 f9a7 	bl	8001ae6 <lps22hb_data_rate_get>
 8001798:	b9e0      	cbnz	r0, 80017d4 <LPS22HB_GetOutputDataRate+0x4c>
  switch (odr_low_level)
 800179a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d81b      	bhi.n	80017da <LPS22HB_GetOutputDataRate+0x52>
 80017a2:	e8df f003 	tbb	[pc, r3]
 80017a6:	0703      	.short	0x0703
 80017a8:	14110e0b 	.word	0x14110e0b
      *Odr = 0.0f;
 80017ac:	2300      	movs	r3, #0
 80017ae:	6023      	str	r3, [r4, #0]
}
 80017b0:	b002      	add	sp, #8
 80017b2:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 80017b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017b8:	6023      	str	r3, [r4, #0]
      break;
 80017ba:	e7f9      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
      *Odr = 10.0f;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <LPS22HB_GetOutputDataRate+0x58>)
 80017be:	6023      	str	r3, [r4, #0]
      break;
 80017c0:	e7f6      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
      *Odr = 25.0f;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LPS22HB_GetOutputDataRate+0x5c>)
 80017c4:	6023      	str	r3, [r4, #0]
      break;
 80017c6:	e7f3      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
      *Odr = 50.0f;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <LPS22HB_GetOutputDataRate+0x60>)
 80017ca:	6023      	str	r3, [r4, #0]
      break;
 80017cc:	e7f0      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
      *Odr = 75.0f;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <LPS22HB_GetOutputDataRate+0x64>)
 80017d0:	6023      	str	r3, [r4, #0]
      break;
 80017d2:	e7ed      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
    return LPS22HB_ERROR;
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	e7ea      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
  switch (odr_low_level)
 80017da:	f04f 30ff 	mov.w	r0, #4294967295
 80017de:	e7e7      	b.n	80017b0 <LPS22HB_GetOutputDataRate+0x28>
 80017e0:	41200000 	.word	0x41200000
 80017e4:	41c80000 	.word	0x41c80000
 80017e8:	42480000 	.word	0x42480000
 80017ec:	42960000 	.word	0x42960000

080017f0 <LPS22HB_PRESS_GetOutputDataRate>:
{
 80017f0:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80017f2:	f7ff ffc9 	bl	8001788 <LPS22HB_GetOutputDataRate>
}
 80017f6:	bd08      	pop	{r3, pc}

080017f8 <LPS22HB_TEMP_GetOutputDataRate>:
{
 80017f8:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80017fa:	f7ff ffc5 	bl	8001788 <LPS22HB_GetOutputDataRate>
}
 80017fe:	bd08      	pop	{r3, pc}

08001800 <LPS22HB_SetOutputDataRate_When_Enabled>:
{
 8001800:	b538      	push	{r3, r4, r5, lr}
 8001802:	4604      	mov	r4, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001804:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001808:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	d916      	bls.n	8001840 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8001812:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001816:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	d91d      	bls.n	800185c <LPS22HB_SetOutputDataRate_When_Enabled+0x5c>
 8001820:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001824:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	d918      	bls.n	8001860 <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 800182e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001874 <LPS22HB_SetOutputDataRate_When_Enabled+0x74>
 8001832:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	d813      	bhi.n	8001864 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 800183c:	2104      	movs	r1, #4
 800183e:	e000      	b.n	8001842 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8001840:	2101      	movs	r1, #1
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001842:	f104 051c 	add.w	r5, r4, #28
 8001846:	4628      	mov	r0, r5
 8001848:	f000 f934 	bl	8001ab4 <lps22hb_data_rate_set>
 800184c:	b960      	cbnz	r0, 8001868 <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800184e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8001852:	4628      	mov	r0, r5
 8001854:	f000 f947 	bl	8001ae6 <lps22hb_data_rate_get>
 8001858:	b948      	cbnz	r0, 800186e <LPS22HB_SetOutputDataRate_When_Enabled+0x6e>
}
 800185a:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800185c:	2102      	movs	r1, #2
 800185e:	e7f0      	b.n	8001842 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8001860:	2103      	movs	r1, #3
 8001862:	e7ee      	b.n	8001842 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8001864:	2105      	movs	r1, #5
 8001866:	e7ec      	b.n	8001842 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
    return LPS22HB_ERROR;
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	e7f5      	b.n	800185a <LPS22HB_SetOutputDataRate_When_Enabled+0x5a>
    return LPS22HB_ERROR;
 800186e:	f04f 30ff 	mov.w	r0, #4294967295
 8001872:	e7f2      	b.n	800185a <LPS22HB_SetOutputDataRate_When_Enabled+0x5a>
 8001874:	42480000 	.word	0x42480000

08001878 <LPS22HB_PRESS_SetOutputDataRate>:
{
 8001878:	b508      	push	{r3, lr}
  if (pObj->press_is_enabled == 1U)
 800187a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <LPS22HB_PRESS_SetOutputDataRate+0x10>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001882:	f7ff fe67 	bl	8001554 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8001886:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001888:	f7ff ffba 	bl	8001800 <LPS22HB_SetOutputDataRate_When_Enabled>
 800188c:	e7fb      	b.n	8001886 <LPS22HB_PRESS_SetOutputDataRate+0xe>

0800188e <LPS22HB_TEMP_SetOutputDataRate>:
{
 800188e:	b508      	push	{r3, lr}
  if (pObj->temp_is_enabled == 1U)
 8001890:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001894:	2b01      	cmp	r3, #1
 8001896:	d002      	beq.n	800189e <LPS22HB_TEMP_SetOutputDataRate+0x10>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001898:	f7ff fe5c 	bl	8001554 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 800189c:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800189e:	f7ff ffaf 	bl	8001800 <LPS22HB_SetOutputDataRate_When_Enabled>
 80018a2:	e7fb      	b.n	800189c <LPS22HB_TEMP_SetOutputDataRate+0xe>

080018a4 <LPS22HB_TEMP_Disable>:
{
 80018a4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 80018a6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80018aa:	b1c3      	cbz	r3, 80018de <LPS22HB_TEMP_Disable+0x3a>
 80018ac:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 80018ae:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80018b2:	b11b      	cbz	r3, 80018bc <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 80018b4:	2000      	movs	r0, #0
 80018b6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80018bc:	f100 051c 	add.w	r5, r0, #28
 80018c0:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 80018c4:	4628      	mov	r0, r5
 80018c6:	f000 f90e 	bl	8001ae6 <lps22hb_data_rate_get>
 80018ca:	b950      	cbnz	r0, 80018e2 <LPS22HB_TEMP_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 f8f0 	bl	8001ab4 <lps22hb_data_rate_set>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d0ed      	beq.n	80018b4 <LPS22HB_TEMP_Disable+0x10>
      return LPS22HB_ERROR;
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	e7ed      	b.n	80018ba <LPS22HB_TEMP_Disable+0x16>
    return LPS22HB_OK;
 80018de:	2000      	movs	r0, #0
 80018e0:	e7eb      	b.n	80018ba <LPS22HB_TEMP_Disable+0x16>
      return LPS22HB_ERROR;
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295
 80018e6:	e7e8      	b.n	80018ba <LPS22HB_TEMP_Disable+0x16>

080018e8 <LPS22HB_DeInit>:
{
 80018e8:	b510      	push	{r4, lr}
 80018ea:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80018ec:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d003      	beq.n	80018fc <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 80018f4:	2000      	movs	r0, #0
 80018f6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80018fa:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80018fc:	f7ff ff21 	bl	8001742 <LPS22HB_PRESS_Disable>
 8001900:	b938      	cbnz	r0, 8001912 <LPS22HB_DeInit+0x2a>
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff ffce 	bl	80018a4 <LPS22HB_TEMP_Disable>
 8001908:	2800      	cmp	r0, #0
 800190a:	d0f3      	beq.n	80018f4 <LPS22HB_DeInit+0xc>
      return LPS22HB_ERROR;
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	e7f3      	b.n	80018fa <LPS22HB_DeInit+0x12>
      return LPS22HB_ERROR;
 8001912:	f04f 30ff 	mov.w	r0, #4294967295
 8001916:	e7f0      	b.n	80018fa <LPS22HB_DeInit+0x12>

08001918 <LPS22HB_PRESS_GetPressure>:
{
 8001918:	b530      	push	{r4, r5, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	460c      	mov	r4, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800191e:	2300      	movs	r3, #0
 8001920:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8001922:	a901      	add	r1, sp, #4
 8001924:	301c      	adds	r0, #28
 8001926:	f000 f907 	bl	8001b38 <lps22hb_pressure_raw_get>
 800192a:	b940      	cbnz	r0, 800193e <LPS22HB_PRESS_GetPressure+0x26>
 800192c:	4605      	mov	r5, r0
  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 800192e:	9801      	ldr	r0, [sp, #4]
 8001930:	f000 f876 	bl	8001a20 <lps22hb_from_lsb_to_hpa>
 8001934:	ed84 0a00 	vstr	s0, [r4]
}
 8001938:	4628      	mov	r0, r5
 800193a:	b003      	add	sp, #12
 800193c:	bd30      	pop	{r4, r5, pc}
    return LPS22HB_ERROR;
 800193e:	f04f 35ff 	mov.w	r5, #4294967295
 8001942:	e7f9      	b.n	8001938 <LPS22HB_PRESS_GetPressure+0x20>

08001944 <LPS22HB_TEMP_GetTemperature>:
{
 8001944:	b530      	push	{r4, r5, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	460c      	mov	r4, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800194a:	2300      	movs	r3, #0
 800194c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8001950:	a901      	add	r1, sp, #4
 8001952:	301c      	adds	r0, #28
 8001954:	f000 f8f7 	bl	8001b46 <lps22hb_temperature_raw_get>
 8001958:	b948      	cbnz	r0, 800196e <LPS22HB_TEMP_GetTemperature+0x2a>
 800195a:	4605      	mov	r5, r0
  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 800195c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8001960:	f000 f86a 	bl	8001a38 <lps22hb_from_lsb_to_degc>
 8001964:	ed84 0a00 	vstr	s0, [r4]
}
 8001968:	4628      	mov	r0, r5
 800196a:	b003      	add	sp, #12
 800196c:	bd30      	pop	{r4, r5, pc}
    return LPS22HB_ERROR;
 800196e:	f04f 35ff 	mov.w	r5, #4294967295
 8001972:	e7f9      	b.n	8001968 <LPS22HB_TEMP_GetTemperature+0x24>

08001974 <LPS22HB_Write_Reg>:
{
 8001974:	b500      	push	{lr}
 8001976:	b083      	sub	sp, #12
 8001978:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800197c:	2301      	movs	r3, #1
 800197e:	f10d 0207 	add.w	r2, sp, #7
 8001982:	301c      	adds	r0, #28
 8001984:	f000 f847 	bl	8001a16 <lps22hb_write_reg>
 8001988:	b910      	cbnz	r0, 8001990 <LPS22HB_Write_Reg+0x1c>
}
 800198a:	b003      	add	sp, #12
 800198c:	f85d fb04 	ldr.w	pc, [sp], #4
    return LPS22HB_ERROR;
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	e7f9      	b.n	800198a <LPS22HB_Write_Reg+0x16>
	...

08001998 <LPS22HB_RegisterBusIO>:
  if (pObj == NULL)
 8001998:	2800      	cmp	r0, #0
 800199a:	d029      	beq.n	80019f0 <LPS22HB_RegisterBusIO+0x58>
{
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80019a0:	680b      	ldr	r3, [r1, #0]
 80019a2:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80019a4:	684a      	ldr	r2, [r1, #4]
 80019a6:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80019a8:	688a      	ldr	r2, [r1, #8]
 80019aa:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80019ac:	7b0a      	ldrb	r2, [r1, #12]
 80019ae:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80019b0:	690a      	ldr	r2, [r1, #16]
 80019b2:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80019b4:	694a      	ldr	r2, [r1, #20]
 80019b6:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80019b8:	698a      	ldr	r2, [r1, #24]
 80019ba:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80019bc:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <LPS22HB_RegisterBusIO+0x6c>)
 80019be:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <LPS22HB_RegisterBusIO+0x70>)
 80019c2:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80019c4:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80019c6:	b1b3      	cbz	r3, 80019f6 <LPS22HB_RegisterBusIO+0x5e>
    else if (pObj->IO.Init() != LPS22HB_OK)
 80019c8:	4798      	blx	r3
 80019ca:	b9b8      	cbnz	r0, 80019fc <LPS22HB_RegisterBusIO+0x64>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80019cc:	68a3      	ldr	r3, [r4, #8]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d000      	beq.n	80019d4 <LPS22HB_RegisterBusIO+0x3c>
}
 80019d2:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80019d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1fa      	bne.n	80019d2 <LPS22HB_RegisterBusIO+0x3a>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80019dc:	2201      	movs	r2, #1
 80019de:	2110      	movs	r1, #16
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff ffc7 	bl	8001974 <LPS22HB_Write_Reg>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d0f3      	beq.n	80019d2 <LPS22HB_RegisterBusIO+0x3a>
            ret = LPS22HB_ERROR;
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80019ee:	e7f0      	b.n	80019d2 <LPS22HB_RegisterBusIO+0x3a>
    ret = LPS22HB_ERROR;
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019f4:	4770      	bx	lr
      ret = LPS22HB_ERROR;
 80019f6:	f04f 30ff 	mov.w	r0, #4294967295
 80019fa:	e7ea      	b.n	80019d2 <LPS22HB_RegisterBusIO+0x3a>
      ret = LPS22HB_ERROR;
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	e7e7      	b.n	80019d2 <LPS22HB_RegisterBusIO+0x3a>
 8001a02:	bf00      	nop
 8001a04:	080015ad 	.word	0x080015ad
 8001a08:	080015f7 	.word	0x080015f7

08001a0c <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001a0c:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001a0e:	6844      	ldr	r4, [r0, #4]
 8001a10:	6880      	ldr	r0, [r0, #8]
 8001a12:	47a0      	blx	r4
  return ret;
}
 8001a14:	bd10      	pop	{r4, pc}

08001a16 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001a16:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a18:	6804      	ldr	r4, [r0, #0]
 8001a1a:	6880      	ldr	r0, [r0, #8]
 8001a1c:	47a0      	blx	r4
  return ret;
}
 8001a1e:	bd10      	pop	{r4, pc}

08001a20 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8001a20:	ee07 0a90 	vmov	s15, r0
  return ( (float_t)lsb / 4096.0f );
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001a28:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001a34 <lps22hb_from_lsb_to_hpa+0x14>
 8001a2c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	39800000 	.word	0x39800000

08001a38 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8001a38:	ee07 0a90 	vmov	s15, r0
  return ( (float_t)lsb / 100.0f );
 8001a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001a40:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001a4c <lps22hb_from_lsb_to_degc+0x14>
 8001a44:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	42c80000 	.word	0x42c80000

08001a50 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	4604      	mov	r4, r0
 8001a56:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001a58:	2301      	movs	r3, #1
 8001a5a:	aa01      	add	r2, sp, #4
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	f7ff ffd5 	bl	8001a0c <lps22hb_read_reg>
  if(ret == 0){
 8001a62:	b108      	cbz	r0, 8001a68 <lps22hb_block_data_update_set+0x18>
    ctrl_reg1.bdu = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8001a64:	b003      	add	sp, #12
 8001a66:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.bdu = val;
 8001a68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a6c:	f365 0341 	bfi	r3, r5, #1, #1
 8001a70:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001a74:	2301      	movs	r3, #1
 8001a76:	aa01      	add	r2, sp, #4
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff ffcb 	bl	8001a16 <lps22hb_write_reg>
  return ret;
 8001a80:	e7f0      	b.n	8001a64 <lps22hb_block_data_update_set+0x14>

08001a82 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8001a82:	b530      	push	{r4, r5, lr}
 8001a84:	b083      	sub	sp, #12
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	aa01      	add	r2, sp, #4
 8001a8e:	2110      	movs	r1, #16
 8001a90:	f7ff ffbc 	bl	8001a0c <lps22hb_read_reg>
  if(ret == 0){
 8001a94:	b108      	cbz	r0, 8001a9a <lps22hb_low_pass_filter_mode_set+0x18>
    ctrl_reg1.lpfp = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8001a96:	b003      	add	sp, #12
 8001a98:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.lpfp = (uint8_t)val;
 8001a9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a9e:	f365 0383 	bfi	r3, r5, #2, #2
 8001aa2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	aa01      	add	r2, sp, #4
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff ffb2 	bl	8001a16 <lps22hb_write_reg>
  return ret;
 8001ab2:	e7f0      	b.n	8001a96 <lps22hb_low_pass_filter_mode_set+0x14>

08001ab4 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8001ab4:	b530      	push	{r4, r5, lr}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001abc:	2301      	movs	r3, #1
 8001abe:	aa01      	add	r2, sp, #4
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	f7ff ffa3 	bl	8001a0c <lps22hb_read_reg>
  if(ret == 0){
 8001ac6:	b108      	cbz	r0, 8001acc <lps22hb_data_rate_set+0x18>
    ctrl_reg1.odr = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8001ac8:	b003      	add	sp, #12
 8001aca:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.odr = (uint8_t)val;
 8001acc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ad0:	f365 1306 	bfi	r3, r5, #4, #3
 8001ad4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001ad8:	2301      	movs	r3, #1
 8001ada:	aa01      	add	r2, sp, #4
 8001adc:	2110      	movs	r1, #16
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ff99 	bl	8001a16 <lps22hb_write_reg>
  return ret;
 8001ae4:	e7f0      	b.n	8001ac8 <lps22hb_data_rate_set+0x14>

08001ae6 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8001ae6:	b510      	push	{r4, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	460c      	mov	r4, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001aec:	2301      	movs	r3, #1
 8001aee:	aa01      	add	r2, sp, #4
 8001af0:	2110      	movs	r1, #16
 8001af2:	f7ff ff8b 	bl	8001a0c <lps22hb_read_reg>
  switch (ctrl_reg1.odr){
 8001af6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001afa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d817      	bhi.n	8001b32 <lps22hb_data_rate_get+0x4c>
 8001b02:	e8df f003 	tbb	[pc, r3]
 8001b06:	0703      	.short	0x0703
 8001b08:	13100d0a 	.word	0x13100d0a
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	7023      	strb	r3, [r4, #0]
      *val = LPS22HB_ODR_1_Hz;
      break;
  }

  return ret;
}
 8001b10:	b002      	add	sp, #8
 8001b12:	bd10      	pop	{r4, pc}
      *val = LPS22HB_ODR_1_Hz;
 8001b14:	2301      	movs	r3, #1
 8001b16:	7023      	strb	r3, [r4, #0]
      break;
 8001b18:	e7fa      	b.n	8001b10 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_10_Hz;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	7023      	strb	r3, [r4, #0]
      break;
 8001b1e:	e7f7      	b.n	8001b10 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_25_Hz;
 8001b20:	2303      	movs	r3, #3
 8001b22:	7023      	strb	r3, [r4, #0]
      break;
 8001b24:	e7f4      	b.n	8001b10 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_50_Hz;
 8001b26:	2304      	movs	r3, #4
 8001b28:	7023      	strb	r3, [r4, #0]
      break;
 8001b2a:	e7f1      	b.n	8001b10 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_75_Hz;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	7023      	strb	r3, [r4, #0]
      break;
 8001b30:	e7ee      	b.n	8001b10 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_1_Hz;
 8001b32:	2301      	movs	r3, #1
 8001b34:	7023      	strb	r3, [r4, #0]
  return ret;
 8001b36:	e7eb      	b.n	8001b10 <lps22hb_data_rate_get+0x2a>

08001b38 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b38:	b508      	push	{r3, lr}
 8001b3a:	460a      	mov	r2, r1
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	2128      	movs	r1, #40	; 0x28
 8001b40:	f7ff ff64 	bl	8001a0c <lps22hb_read_reg>
  return ret;
}
 8001b44:	bd08      	pop	{r3, pc}

08001b46 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b46:	b508      	push	{r3, lr}
 8001b48:	460a      	mov	r2, r1
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	212b      	movs	r1, #43	; 0x2b
 8001b4e:	f7ff ff5d 	bl	8001a0c <lps22hb_read_reg>
  return ret;
}
 8001b52:	bd08      	pop	{r3, pc}

08001b54 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b54:	b508      	push	{r3, lr}
 8001b56:	460a      	mov	r2, r1
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8001b58:	2301      	movs	r3, #1
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f7ff ff56 	bl	8001a0c <lps22hb_read_reg>
  return ret;
}
 8001b60:	bd08      	pop	{r3, pc}

08001b62 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b62:	b530      	push	{r4, r5, lr}
 8001b64:	b083      	sub	sp, #12
 8001b66:	4604      	mov	r4, r0
 8001b68:	460d      	mov	r5, r1
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	aa01      	add	r2, sp, #4
 8001b6e:	211a      	movs	r1, #26
 8001b70:	f7ff ff4c 	bl	8001a0c <lps22hb_read_reg>
  if(ret == 0){
 8001b74:	b108      	cbz	r0, 8001b7a <lps22hb_low_power_set+0x18>
    res_conf.lc_en = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
  }
  return ret;
}
 8001b76:	b003      	add	sp, #12
 8001b78:	bd30      	pop	{r4, r5, pc}
    res_conf.lc_en = val;
 8001b7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b7e:	f365 0300 	bfi	r3, r5, #0, #1
 8001b82:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8001b86:	2301      	movs	r3, #1
 8001b88:	aa01      	add	r2, sp, #4
 8001b8a:	211a      	movs	r1, #26
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff ff42 	bl	8001a16 <lps22hb_write_reg>
  return ret;
 8001b92:	e7f0      	b.n	8001b76 <lps22hb_low_power_set+0x14>

08001b94 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b94:	b530      	push	{r4, r5, lr}
 8001b96:	b083      	sub	sp, #12
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	aa01      	add	r2, sp, #4
 8001ba0:	2111      	movs	r1, #17
 8001ba2:	f7ff ff33 	bl	8001a0c <lps22hb_read_reg>
  if(ret == 0){
 8001ba6:	b108      	cbz	r0, 8001bac <lps22hb_auto_add_inc_set+0x18>
    ctrl_reg2.if_add_inc = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
}
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
    ctrl_reg2.if_add_inc = val;
 8001bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001bb0:	f365 1304 	bfi	r3, r5, #4, #1
 8001bb4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001bb8:	2301      	movs	r3, #1
 8001bba:	aa01      	add	r2, sp, #4
 8001bbc:	2111      	movs	r1, #17
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff ff29 	bl	8001a16 <lps22hb_write_reg>
  return ret;
 8001bc4:	e7f0      	b.n	8001ba8 <lps22hb_auto_add_inc_set+0x14>
	...

08001bc8 <LSM303AGR_ACC_GetCapabilities>:
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 8001bcc:	2000      	movs	r0, #0
 8001bce:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8001bd0:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8001bd2:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8001bd4:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8001bda:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8001be0:	4a01      	ldr	r2, [pc, #4]	; (8001be8 <LSM303AGR_ACC_GetCapabilities+0x20>)
 8001be2:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001be4:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 8001be6:	4770      	bx	lr
 8001be8:	43c80000 	.word	0x43c80000

08001bec <LSM303AGR_MAG_GetCapabilities>:
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8001bec:	2000      	movs	r0, #0
 8001bee:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 8001bf0:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 8001bf6:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8001bf8:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 8001bfa:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 8001bfc:	2332      	movs	r3, #50	; 0x32
 8001bfe:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001c00:	2300      	movs	r3, #0
 8001c02:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8001c04:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8001c06:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <LSM303AGR_MAG_GetCapabilities+0x20>)
 8001c08:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 8001c0a:	4770      	bx	lr
 8001c0c:	42c80000 	.word	0x42c80000

08001c10 <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8001c10:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001c14:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8001c16:	2000      	movs	r0, #0
 8001c18:	4770      	bx	lr

08001c1a <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 8001c1a:	2332      	movs	r3, #50	; 0x32
 8001c1c:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8001c1e:	2000      	movs	r0, #0
 8001c20:	4770      	bx	lr

08001c22 <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
  return LSM303AGR_OK;
}
 8001c22:	2000      	movs	r0, #0
 8001c24:	4770      	bx	lr
	...

08001c28 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8001c28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	d924      	bls.n	8001c80 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x58>
 8001c36:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001c3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	d922      	bls.n	8001c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8001c44:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001c48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d91d      	bls.n	8001c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001c52:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001ca0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 8001c56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	d918      	bls.n	8001c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8001c60:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001ca4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001c64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d913      	bls.n	8001c96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8001c6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8001ca8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x80>
 8001c72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	d80e      	bhi.n	8001c9a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x72>
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	e000      	b.n	8001c82 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8001c80:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8001c82:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e7f9      	b.n	8001c82 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e7f7      	b.n	8001c82 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e7f5      	b.n	8001c82 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e7f3      	b.n	8001c82 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e7f1      	b.n	8001c82 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8001c9e:	bf00      	nop
 8001ca0:	42480000 	.word	0x42480000
 8001ca4:	42c80000 	.word	0x42c80000
 8001ca8:	43480000 	.word	0x43480000

08001cac <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cac:	b510      	push	{r4, lr}
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001cae:	6884      	ldr	r4, [r0, #8]
 8001cb0:	b92c      	cbnz	r4, 8001cbe <ReadAccRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001cb2:	6944      	ldr	r4, [r0, #20]
 8001cb4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001cb8:	7b00      	ldrb	r0, [r0, #12]
 8001cba:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001cbc:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001cbe:	6944      	ldr	r4, [r0, #20]
 8001cc0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001cc4:	7b00      	ldrb	r0, [r0, #12]
 8001cc6:	47a0      	blx	r4
 8001cc8:	e7f8      	b.n	8001cbc <ReadAccRegWrap+0x10>

08001cca <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cca:	b510      	push	{r4, lr}
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001ccc:	6884      	ldr	r4, [r0, #8]
 8001cce:	b92c      	cbnz	r4, 8001cdc <WriteAccRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001cd0:	6904      	ldr	r4, [r0, #16]
 8001cd2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001cd6:	7b00      	ldrb	r0, [r0, #12]
 8001cd8:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001cda:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001cdc:	6904      	ldr	r4, [r0, #16]
 8001cde:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001ce2:	7b00      	ldrb	r0, [r0, #12]
 8001ce4:	47a0      	blx	r4
 8001ce6:	e7f8      	b.n	8001cda <WriteAccRegWrap+0x10>

08001ce8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ce8:	b510      	push	{r4, lr}
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001cea:	6884      	ldr	r4, [r0, #8]
 8001cec:	b92c      	cbnz	r4, 8001cfa <ReadMagRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001cee:	6944      	ldr	r4, [r0, #20]
 8001cf0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001cf4:	7b00      	ldrb	r0, [r0, #12]
 8001cf6:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001cf8:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001cfa:	6944      	ldr	r4, [r0, #20]
 8001cfc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d00:	7b00      	ldrb	r0, [r0, #12]
 8001d02:	47a0      	blx	r4
 8001d04:	e7f8      	b.n	8001cf8 <ReadMagRegWrap+0x10>

08001d06 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d06:	b510      	push	{r4, lr}
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001d08:	6884      	ldr	r4, [r0, #8]
 8001d0a:	b92c      	cbnz	r4, 8001d18 <WriteMagRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001d0c:	6904      	ldr	r4, [r0, #16]
 8001d0e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001d12:	7b00      	ldrb	r0, [r0, #12]
 8001d14:	47a0      	blx	r4
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001d16:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d18:	6904      	ldr	r4, [r0, #16]
 8001d1a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d1e:	7b00      	ldrb	r0, [r0, #12]
 8001d20:	47a0      	blx	r4
 8001d22:	e7f8      	b.n	8001d16 <WriteMagRegWrap+0x10>

08001d24 <LSM303AGR_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8001d24:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d00b      	beq.n	8001d44 <LSM303AGR_ACC_Enable+0x20>
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8001d30:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8001d34:	301c      	adds	r0, #28
 8001d36:	f000 fc60 	bl	80025fa <lsm303agr_xl_data_rate_set>
 8001d3a:	b928      	cbnz	r0, 8001d48 <LSM303AGR_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8001d42:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 8001d44:	2000      	movs	r0, #0
}
 8001d46:	4770      	bx	lr
    return LSM303AGR_ERROR;
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	e7f9      	b.n	8001d42 <LSM303AGR_ACC_Enable+0x1e>
	...

08001d50 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
{
 8001d50:	b508      	push	{r3, lr}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8001d52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	d924      	bls.n	8001daa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8001d60:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001d64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	d923      	bls.n	8001db6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x66>
 8001d6e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001d72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d91e      	bls.n	8001dba <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6a>
 8001d7c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001dd0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x80>
 8001d80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d919      	bls.n	8001dbe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6e>
 8001d8a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001dd4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x84>
 8001d8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d914      	bls.n	8001dc2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x72>
 8001d98:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001dd8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x88>
 8001d9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d80f      	bhi.n	8001dc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x76>
 8001da6:	2106      	movs	r1, #6
 8001da8:	e000      	b.n	8001dac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 8001daa:	2101      	movs	r1, #1
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8001dac:	301c      	adds	r0, #28
 8001dae:	f000 fc24 	bl	80025fa <lsm303agr_xl_data_rate_set>
 8001db2:	b950      	cbnz	r0, 8001dca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
}
 8001db4:	bd08      	pop	{r3, pc}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8001db6:	2102      	movs	r1, #2
 8001db8:	e7f8      	b.n	8001dac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 8001dba:	2103      	movs	r1, #3
 8001dbc:	e7f6      	b.n	8001dac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	e7f4      	b.n	8001dac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 8001dc2:	2105      	movs	r1, #5
 8001dc4:	e7f2      	b.n	8001dac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
 8001dc6:	2107      	movs	r1, #7
 8001dc8:	e7f0      	b.n	8001dac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5c>
    return LSM303AGR_ERROR;
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295
 8001dce:	e7f1      	b.n	8001db4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001dd0:	42480000 	.word	0x42480000
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	43480000 	.word	0x43480000

08001ddc <LSM303AGR_ACC_SetOutputDataRate>:
{
 8001ddc:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8001dde:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d002      	beq.n	8001dec <LSM303AGR_ACC_SetOutputDataRate+0x10>
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001de6:	f7ff ff1f 	bl	8001c28 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
}
 8001dea:	bd08      	pop	{r3, pc}
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001dec:	f7ff ffb0 	bl	8001d50 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8001df0:	e7fb      	b.n	8001dea <LSM303AGR_ACC_SetOutputDataRate+0xe>

08001df2 <LSM303AGR_ACC_Init>:
{
 8001df2:	b538      	push	{r3, r4, r5, lr}
 8001df4:	4604      	mov	r4, r0
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8001df6:	f100 051c 	add.w	r5, r0, #28
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f000 fc86 	bl	800270e <lsm303agr_xl_block_data_update_set>
 8001e02:	b9a8      	cbnz	r0, 8001e30 <LSM303AGR_ACC_Init+0x3e>
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	4628      	mov	r0, r5
 8001e08:	f000 fd3c 	bl	8002884 <lsm303agr_xl_fifo_mode_set>
 8001e0c:	b998      	cbnz	r0, 8001e36 <LSM303AGR_ACC_Init+0x44>
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001e14:	2100      	movs	r1, #0
 8001e16:	4628      	mov	r0, r5
 8001e18:	f000 fbef 	bl	80025fa <lsm303agr_xl_data_rate_set>
 8001e1c:	b970      	cbnz	r0, 8001e3c <LSM303AGR_ACC_Init+0x4a>
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4628      	mov	r0, r5
 8001e22:	f000 fc39 	bl	8002698 <lsm303agr_xl_full_scale_set>
 8001e26:	b960      	cbnz	r0, 8001e42 <LSM303AGR_ACC_Init+0x50>
  pObj->is_initialized = 1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
    return LSM303AGR_ERROR;
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	e7fb      	b.n	8001e2e <LSM303AGR_ACC_Init+0x3c>
    return LSM303AGR_ERROR;
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	e7f8      	b.n	8001e2e <LSM303AGR_ACC_Init+0x3c>
    return LSM303AGR_ERROR;
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	e7f5      	b.n	8001e2e <LSM303AGR_ACC_Init+0x3c>
    return LSM303AGR_ERROR;
 8001e42:	f04f 30ff 	mov.w	r0, #4294967295
 8001e46:	e7f2      	b.n	8001e2e <LSM303AGR_ACC_Init+0x3c>

08001e48 <LSM303AGR_ACC_SetFullScale>:
{
 8001e48:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM303AGR_4g
 8001e4a:	2902      	cmp	r1, #2
 8001e4c:	dd05      	ble.n	8001e5a <LSM303AGR_ACC_SetFullScale+0x12>
 8001e4e:	2904      	cmp	r1, #4
 8001e50:	dd09      	ble.n	8001e66 <LSM303AGR_ACC_SetFullScale+0x1e>
 8001e52:	2908      	cmp	r1, #8
 8001e54:	dc09      	bgt.n	8001e6a <LSM303AGR_ACC_SetFullScale+0x22>
 8001e56:	2102      	movs	r1, #2
 8001e58:	e000      	b.n	8001e5c <LSM303AGR_ACC_SetFullScale+0x14>
 8001e5a:	2100      	movs	r1, #0
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8001e5c:	301c      	adds	r0, #28
 8001e5e:	f000 fc1b 	bl	8002698 <lsm303agr_xl_full_scale_set>
 8001e62:	b920      	cbnz	r0, 8001e6e <LSM303AGR_ACC_SetFullScale+0x26>
}
 8001e64:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM303AGR_4g
 8001e66:	2101      	movs	r1, #1
 8001e68:	e7f8      	b.n	8001e5c <LSM303AGR_ACC_SetFullScale+0x14>
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	e7f6      	b.n	8001e5c <LSM303AGR_ACC_SetFullScale+0x14>
    return LSM303AGR_ERROR;
 8001e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e72:	e7f7      	b.n	8001e64 <LSM303AGR_ACC_SetFullScale+0x1c>

08001e74 <LSM303AGR_ACC_ReadID>:
{
 8001e74:	b508      	push	{r3, lr}
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001e76:	301c      	adds	r0, #28
 8001e78:	f000 fcdd 	bl	8002836 <lsm303agr_xl_device_id_get>
 8001e7c:	b900      	cbnz	r0, 8001e80 <LSM303AGR_ACC_ReadID+0xc>
}
 8001e7e:	bd08      	pop	{r3, pc}
    return LSM303AGR_ERROR;
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	e7fb      	b.n	8001e7e <LSM303AGR_ACC_ReadID+0xa>

08001e86 <LSM303AGR_ACC_Disable>:
{
 8001e86:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8001e88:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001e8c:	b90b      	cbnz	r3, 8001e92 <LSM303AGR_ACC_Disable+0xc>
    return LSM303AGR_OK;
 8001e8e:	2000      	movs	r0, #0
}
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
 8001e92:	4604      	mov	r4, r0
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8001e94:	f100 051c 	add.w	r5, r0, #28
 8001e98:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f000 fbc5 	bl	800262c <lsm303agr_xl_data_rate_get>
 8001ea2:	b938      	cbnz	r0, 8001eb4 <LSM303AGR_ACC_Disable+0x2e>
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f000 fba7 	bl	80025fa <lsm303agr_xl_data_rate_set>
 8001eac:	b928      	cbnz	r0, 8001eba <LSM303AGR_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8001eae:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return LSM303AGR_OK;
 8001eb2:	e7ed      	b.n	8001e90 <LSM303AGR_ACC_Disable+0xa>
    return LSM303AGR_ERROR;
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	e7ea      	b.n	8001e90 <LSM303AGR_ACC_Disable+0xa>
    return LSM303AGR_ERROR;
 8001eba:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebe:	e7e7      	b.n	8001e90 <LSM303AGR_ACC_Disable+0xa>

08001ec0 <LSM303AGR_ACC_DeInit>:
{
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4604      	mov	r4, r0
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8001ec4:	f7ff ffdf 	bl	8001e86 <LSM303AGR_ACC_Disable>
 8001ec8:	b920      	cbnz	r0, 8001ed4 <LSM303AGR_ACC_DeInit+0x14>
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8001eca:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pObj->is_initialized = 0;
 8001ece:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8001ed2:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	e7fb      	b.n	8001ed2 <LSM303AGR_ACC_DeInit+0x12>
	...

08001edc <LSM303AGR_ACC_GetOutputDataRate>:
{
 8001edc:	b530      	push	{r4, r5, lr}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001ee2:	f100 041c 	add.w	r4, r0, #28
 8001ee6:	f10d 0107 	add.w	r1, sp, #7
 8001eea:	4620      	mov	r0, r4
 8001eec:	f000 fb60 	bl	80025b0 <lsm303agr_xl_operating_mode_get>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d15c      	bne.n	8001fae <LSM303AGR_ACC_GetOutputDataRate+0xd2>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8001ef4:	f10d 0106 	add.w	r1, sp, #6
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f000 fb97 	bl	800262c <lsm303agr_xl_data_rate_get>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d158      	bne.n	8001fb4 <LSM303AGR_ACC_GetOutputDataRate+0xd8>
  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8001f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d00a      	beq.n	8001f20 <LSM303AGR_ACC_GetOutputDataRate+0x44>
    switch (odr_low_level)
 8001f0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d856      	bhi.n	8001fc0 <LSM303AGR_ACC_GetOutputDataRate+0xe4>
 8001f12:	e8df f003 	tbb	[pc, r3]
 8001f16:	332f      	.short	0x332f
 8001f18:	403d3a37 	.word	0x403d3a37
 8001f1c:	49554643 	.word	0x49554643
    switch (odr_low_level)
 8001f20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d848      	bhi.n	8001fba <LSM303AGR_ACC_GetOutputDataRate+0xde>
 8001f28:	e8df f003 	tbb	[pc, r3]
 8001f2c:	0f0c0805 	.word	0x0f0c0805
 8001f30:	1b181512 	.word	0x1b181512
 8001f34:	211e      	.short	0x211e
        *Odr = 0.0f;
 8001f36:	2300      	movs	r3, #0
 8001f38:	602b      	str	r3, [r5, #0]
        break;
 8001f3a:	e01d      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 1.0f;
 8001f3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f40:	602b      	str	r3, [r5, #0]
        break;
 8001f42:	e019      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 10.0f;
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8001f46:	602b      	str	r3, [r5, #0]
        break;
 8001f48:	e016      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 25.0f;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 8001f4c:	602b      	str	r3, [r5, #0]
        break;
 8001f4e:	e013      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 50.0f;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 8001f52:	602b      	str	r3, [r5, #0]
        break;
 8001f54:	e010      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 100.0f;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 8001f58:	602b      	str	r3, [r5, #0]
        break;
 8001f5a:	e00d      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 200.0f;
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 8001f5e:	602b      	str	r3, [r5, #0]
        break;
 8001f60:	e00a      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 400.0f;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 8001f64:	602b      	str	r3, [r5, #0]
        break;
 8001f66:	e007      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 1620.0f;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 8001f6a:	602b      	str	r3, [r5, #0]
        break;
 8001f6c:	e004      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 5376.0f;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <LSM303AGR_ACC_GetOutputDataRate+0x108>)
 8001f70:	602b      	str	r3, [r5, #0]
        break;
 8001f72:	e001      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 0.0f;
 8001f74:	2300      	movs	r3, #0
 8001f76:	602b      	str	r3, [r5, #0]
}
 8001f78:	b003      	add	sp, #12
 8001f7a:	bd30      	pop	{r4, r5, pc}
        *Odr = 1.0f;
 8001f7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f80:	602b      	str	r3, [r5, #0]
        break;
 8001f82:	e7f9      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 10.0f;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8001f86:	602b      	str	r3, [r5, #0]
        break;
 8001f88:	e7f6      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 25.0f;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 8001f8c:	602b      	str	r3, [r5, #0]
        break;
 8001f8e:	e7f3      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 50.0f;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 8001f92:	602b      	str	r3, [r5, #0]
        break;
 8001f94:	e7f0      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 100.0f;
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 8001f98:	602b      	str	r3, [r5, #0]
        break;
 8001f9a:	e7ed      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 200.0f;
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 8001f9e:	602b      	str	r3, [r5, #0]
        break;
 8001fa0:	e7ea      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 400.0f;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 8001fa4:	602b      	str	r3, [r5, #0]
        break;
 8001fa6:	e7e7      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
        *Odr = 1344.0f;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <LSM303AGR_ACC_GetOutputDataRate+0x10c>)
 8001faa:	602b      	str	r3, [r5, #0]
        break;
 8001fac:	e7e4      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
    return LSM303AGR_ERROR;
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	e7e1      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
    return LSM303AGR_ERROR;
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	e7de      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
    switch (odr_low_level)
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	e7db      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
    switch (odr_low_level)
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	e7d8      	b.n	8001f78 <LSM303AGR_ACC_GetOutputDataRate+0x9c>
 8001fc6:	bf00      	nop
 8001fc8:	41200000 	.word	0x41200000
 8001fcc:	41c80000 	.word	0x41c80000
 8001fd0:	42480000 	.word	0x42480000
 8001fd4:	42c80000 	.word	0x42c80000
 8001fd8:	43480000 	.word	0x43480000
 8001fdc:	43c80000 	.word	0x43c80000
 8001fe0:	44ca8000 	.word	0x44ca8000
 8001fe4:	45a80000 	.word	0x45a80000
 8001fe8:	44a80000 	.word	0x44a80000

08001fec <LSM303AGR_ACC_GetSensitivityHR>:
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8001ff2:	f10d 0107 	add.w	r1, sp, #7
 8001ff6:	301c      	adds	r0, #28
 8001ff8:	f000 fb67 	bl	80026ca <lsm303agr_xl_full_scale_get>
 8001ffc:	b9a0      	cbnz	r0, 8002028 <LSM303AGR_ACC_GetSensitivityHR+0x3c>
  switch (fullscale)
 8001ffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d813      	bhi.n	800202e <LSM303AGR_ACC_GetSensitivityHR+0x42>
 8002006:	e8df f003 	tbb	[pc, r3]
 800200a:	0602      	.short	0x0602
 800200c:	0c09      	.short	0x0c09
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <LSM303AGR_ACC_GetSensitivityHR+0x48>)
 8002010:	6023      	str	r3, [r4, #0]
}
 8002012:	b002      	add	sp, #8
 8002014:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <LSM303AGR_ACC_GetSensitivityHR+0x4c>)
 8002018:	6023      	str	r3, [r4, #0]
      break;
 800201a:	e7fa      	b.n	8002012 <LSM303AGR_ACC_GetSensitivityHR+0x26>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <LSM303AGR_ACC_GetSensitivityHR+0x50>)
 800201e:	6023      	str	r3, [r4, #0]
      break;
 8002020:	e7f7      	b.n	8002012 <LSM303AGR_ACC_GetSensitivityHR+0x26>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <LSM303AGR_ACC_GetSensitivityHR+0x54>)
 8002024:	6023      	str	r3, [r4, #0]
      break;
 8002026:	e7f4      	b.n	8002012 <LSM303AGR_ACC_GetSensitivityHR+0x26>
    return LSM303AGR_ERROR;
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	e7f1      	b.n	8002012 <LSM303AGR_ACC_GetSensitivityHR+0x26>
  switch (fullscale)
 800202e:	f04f 30ff 	mov.w	r0, #4294967295
 8002032:	e7ee      	b.n	8002012 <LSM303AGR_ACC_GetSensitivityHR+0x26>
 8002034:	3f7ae148 	.word	0x3f7ae148
 8002038:	3ff9999a 	.word	0x3ff9999a
 800203c:	4079999a 	.word	0x4079999a
 8002040:	413b851f 	.word	0x413b851f

08002044 <LSM303AGR_ACC_GetSensitivityNM>:
{
 8002044:	b510      	push	{r4, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800204a:	f10d 0107 	add.w	r1, sp, #7
 800204e:	301c      	adds	r0, #28
 8002050:	f000 fb3b 	bl	80026ca <lsm303agr_xl_full_scale_get>
 8002054:	b9a0      	cbnz	r0, 8002080 <LSM303AGR_ACC_GetSensitivityNM+0x3c>
  switch (fullscale)
 8002056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d813      	bhi.n	8002086 <LSM303AGR_ACC_GetSensitivityNM+0x42>
 800205e:	e8df f003 	tbb	[pc, r3]
 8002062:	0602      	.short	0x0602
 8002064:	0c09      	.short	0x0c09
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <LSM303AGR_ACC_GetSensitivityNM+0x48>)
 8002068:	6023      	str	r3, [r4, #0]
}
 800206a:	b002      	add	sp, #8
 800206c:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <LSM303AGR_ACC_GetSensitivityNM+0x4c>)
 8002070:	6023      	str	r3, [r4, #0]
      break;
 8002072:	e7fa      	b.n	800206a <LSM303AGR_ACC_GetSensitivityNM+0x26>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <LSM303AGR_ACC_GetSensitivityNM+0x50>)
 8002076:	6023      	str	r3, [r4, #0]
      break;
 8002078:	e7f7      	b.n	800206a <LSM303AGR_ACC_GetSensitivityNM+0x26>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <LSM303AGR_ACC_GetSensitivityNM+0x54>)
 800207c:	6023      	str	r3, [r4, #0]
      break;
 800207e:	e7f4      	b.n	800206a <LSM303AGR_ACC_GetSensitivityNM+0x26>
    return LSM303AGR_ERROR;
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	e7f1      	b.n	800206a <LSM303AGR_ACC_GetSensitivityNM+0x26>
  switch (fullscale)
 8002086:	f04f 30ff 	mov.w	r0, #4294967295
 800208a:	e7ee      	b.n	800206a <LSM303AGR_ACC_GetSensitivityNM+0x26>
 800208c:	4079999a 	.word	0x4079999a
 8002090:	40fa3d71 	.word	0x40fa3d71
 8002094:	417a147b 	.word	0x417a147b
 8002098:	423b999a 	.word	0x423b999a

0800209c <LSM303AGR_ACC_GetSensitivityLP>:
{
 800209c:	b510      	push	{r4, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80020a2:	f10d 0107 	add.w	r1, sp, #7
 80020a6:	301c      	adds	r0, #28
 80020a8:	f000 fb0f 	bl	80026ca <lsm303agr_xl_full_scale_get>
 80020ac:	b9a0      	cbnz	r0, 80020d8 <LSM303AGR_ACC_GetSensitivityLP+0x3c>
  switch (fullscale)
 80020ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d813      	bhi.n	80020de <LSM303AGR_ACC_GetSensitivityLP+0x42>
 80020b6:	e8df f003 	tbb	[pc, r3]
 80020ba:	0602      	.short	0x0602
 80020bc:	0c09      	.short	0x0c09
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <LSM303AGR_ACC_GetSensitivityLP+0x48>)
 80020c0:	6023      	str	r3, [r4, #0]
}
 80020c2:	b002      	add	sp, #8
 80020c4:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <LSM303AGR_ACC_GetSensitivityLP+0x4c>)
 80020c8:	6023      	str	r3, [r4, #0]
      break;
 80020ca:	e7fa      	b.n	80020c2 <LSM303AGR_ACC_GetSensitivityLP+0x26>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <LSM303AGR_ACC_GetSensitivityLP+0x50>)
 80020ce:	6023      	str	r3, [r4, #0]
      break;
 80020d0:	e7f7      	b.n	80020c2 <LSM303AGR_ACC_GetSensitivityLP+0x26>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <LSM303AGR_ACC_GetSensitivityLP+0x54>)
 80020d4:	6023      	str	r3, [r4, #0]
      break;
 80020d6:	e7f4      	b.n	80020c2 <LSM303AGR_ACC_GetSensitivityLP+0x26>
    return LSM303AGR_ERROR;
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	e7f1      	b.n	80020c2 <LSM303AGR_ACC_GetSensitivityLP+0x26>
  switch (fullscale)
 80020de:	f04f 30ff 	mov.w	r0, #4294967295
 80020e2:	e7ee      	b.n	80020c2 <LSM303AGR_ACC_GetSensitivityLP+0x26>
 80020e4:	417a147b 	.word	0x417a147b
 80020e8:	41fa147b 	.word	0x41fa147b
 80020ec:	427a147b 	.word	0x427a147b
 80020f0:	433b947b 	.word	0x433b947b

080020f4 <LSM303AGR_ACC_GetSensitivity>:
{
 80020f4:	b530      	push	{r4, r5, lr}
 80020f6:	b083      	sub	sp, #12
 80020f8:	4604      	mov	r4, r0
 80020fa:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80020fc:	f10d 0107 	add.w	r1, sp, #7
 8002100:	301c      	adds	r0, #28
 8002102:	f000 fa55 	bl	80025b0 <lsm303agr_xl_operating_mode_get>
 8002106:	bb28      	cbnz	r0, 8002154 <LSM303AGR_ACC_GetSensitivity+0x60>
  switch (op_mode)
 8002108:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00f      	beq.n	8002130 <LSM303AGR_ACC_GetSensitivity+0x3c>
 8002110:	2b02      	cmp	r3, #2
 8002112:	d016      	beq.n	8002142 <LSM303AGR_ACC_GetSensitivity+0x4e>
 8002114:	b11b      	cbz	r3, 800211e <LSM303AGR_ACC_GetSensitivity+0x2a>
 8002116:	f04f 30ff 	mov.w	r0, #4294967295
}
 800211a:	b003      	add	sp, #12
 800211c:	bd30      	pop	{r4, r5, pc}
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800211e:	4629      	mov	r1, r5
 8002120:	4620      	mov	r0, r4
 8002122:	f7ff ff63 	bl	8001fec <LSM303AGR_ACC_GetSensitivityHR>
 8002126:	2800      	cmp	r0, #0
 8002128:	d0f7      	beq.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 800212a:	f04f 30ff 	mov.w	r0, #4294967295
 800212e:	e7f4      	b.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002130:	4629      	mov	r1, r5
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff ff86 	bl	8002044 <LSM303AGR_ACC_GetSensitivityNM>
 8002138:	2800      	cmp	r0, #0
 800213a:	d0ee      	beq.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	e7eb      	b.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002142:	4629      	mov	r1, r5
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ffa9 	bl	800209c <LSM303AGR_ACC_GetSensitivityLP>
 800214a:	2800      	cmp	r0, #0
 800214c:	d0e5      	beq.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 800214e:	f04f 30ff 	mov.w	r0, #4294967295
 8002152:	e7e2      	b.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>
    return LSM303AGR_ERROR;
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	e7df      	b.n	800211a <LSM303AGR_ACC_GetSensitivity+0x26>

0800215a <LSM303AGR_ACC_GetFullScale>:
{
 800215a:	b510      	push	{r4, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002160:	f10d 0107 	add.w	r1, sp, #7
 8002164:	301c      	adds	r0, #28
 8002166:	f000 fab0 	bl	80026ca <lsm303agr_xl_full_scale_get>
 800216a:	b9a0      	cbnz	r0, 8002196 <LSM303AGR_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 800216c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d813      	bhi.n	800219c <LSM303AGR_ACC_GetFullScale+0x42>
 8002174:	e8df f003 	tbb	[pc, r3]
 8002178:	0c090602 	.word	0x0c090602
      *FullScale =  2;
 800217c:	2302      	movs	r3, #2
 800217e:	6023      	str	r3, [r4, #0]
}
 8002180:	b002      	add	sp, #8
 8002182:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8002184:	2304      	movs	r3, #4
 8002186:	6023      	str	r3, [r4, #0]
      break;
 8002188:	e7fa      	b.n	8002180 <LSM303AGR_ACC_GetFullScale+0x26>
      *FullScale =  8;
 800218a:	2308      	movs	r3, #8
 800218c:	6023      	str	r3, [r4, #0]
      break;
 800218e:	e7f7      	b.n	8002180 <LSM303AGR_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8002190:	2310      	movs	r3, #16
 8002192:	6023      	str	r3, [r4, #0]
      break;
 8002194:	e7f4      	b.n	8002180 <LSM303AGR_ACC_GetFullScale+0x26>
    return LSM303AGR_ERROR;
 8002196:	f04f 30ff 	mov.w	r0, #4294967295
 800219a:	e7f1      	b.n	8002180 <LSM303AGR_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	e7ee      	b.n	8002180 <LSM303AGR_ACC_GetFullScale+0x26>

080021a2 <LSM303AGR_ACC_GetAxesRaw>:
{
 80021a2:	b570      	push	{r4, r5, r6, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80021a8:	f100 051c 	add.w	r5, r0, #28
 80021ac:	f10d 0107 	add.w	r1, sp, #7
 80021b0:	4628      	mov	r0, r5
 80021b2:	f000 f9fd 	bl	80025b0 <lsm303agr_xl_operating_mode_get>
 80021b6:	bb28      	cbnz	r0, 8002204 <LSM303AGR_ACC_GetAxesRaw+0x62>
  switch (op_mode)
 80021b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d01c      	beq.n	80021fa <LSM303AGR_ACC_GetAxesRaw+0x58>
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d01c      	beq.n	80021fe <LSM303AGR_ACC_GetAxesRaw+0x5c>
 80021c4:	b113      	cbz	r3, 80021cc <LSM303AGR_ACC_GetAxesRaw+0x2a>
 80021c6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ca:	e014      	b.n	80021f6 <LSM303AGR_ACC_GetAxesRaw+0x54>
 80021cc:	2610      	movs	r6, #16
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80021ce:	a902      	add	r1, sp, #8
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 fab5 	bl	8002740 <lsm303agr_acceleration_raw_get>
 80021d6:	b9c0      	cbnz	r0, 800220a <LSM303AGR_ACC_GetAxesRaw+0x68>
  Value->x = (data_raw.i16bit[0] / divisor);
 80021d8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80021dc:	fb93 f3f6 	sdiv	r3, r3, r6
 80021e0:	8023      	strh	r3, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80021e2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80021e6:	fb93 f3f6 	sdiv	r3, r3, r6
 80021ea:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80021ec:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80021f0:	fb93 f6f6 	sdiv	r6, r3, r6
 80021f4:	80a6      	strh	r6, [r4, #4]
}
 80021f6:	b004      	add	sp, #16
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
      divisor = 64;
 80021fa:	2640      	movs	r6, #64	; 0x40
 80021fc:	e7e7      	b.n	80021ce <LSM303AGR_ACC_GetAxesRaw+0x2c>
      divisor = 256;
 80021fe:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002202:	e7e4      	b.n	80021ce <LSM303AGR_ACC_GetAxesRaw+0x2c>
    return LSM303AGR_ERROR;
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	e7f5      	b.n	80021f6 <LSM303AGR_ACC_GetAxesRaw+0x54>
    return LSM303AGR_ERROR;
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
 800220e:	e7f2      	b.n	80021f6 <LSM303AGR_ACC_GetAxesRaw+0x54>

08002210 <LSM303AGR_ACC_GetAxes>:
{
 8002210:	b530      	push	{r4, r5, lr}
 8002212:	b085      	sub	sp, #20
 8002214:	4605      	mov	r5, r0
 8002216:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800221c:	a902      	add	r1, sp, #8
 800221e:	f7ff ffc0 	bl	80021a2 <LSM303AGR_ACC_GetAxesRaw>
 8002222:	bb60      	cbnz	r0, 800227e <LSM303AGR_ACC_GetAxes+0x6e>
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002224:	a901      	add	r1, sp, #4
 8002226:	4628      	mov	r0, r5
 8002228:	f7ff ff64 	bl	80020f4 <LSM303AGR_ACC_GetSensitivity>
 800222c:	bb50      	cbnz	r0, 8002284 <LSM303AGR_ACC_GetAxes+0x74>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800222e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002232:	ee07 3a10 	vmov	s14, r3
 8002236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800223a:	eddd 7a01 	vldr	s15, [sp, #4]
 800223e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002242:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002246:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800224a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800224e:	ee07 3a10 	vmov	s14, r3
 8002252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800225e:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002262:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002266:	ee07 3a10 	vmov	s14, r3
 800226a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800226e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002276:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800227a:	b005      	add	sp, #20
 800227c:	bd30      	pop	{r4, r5, pc}
    return LSM303AGR_ERROR;
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	e7fa      	b.n	800227a <LSM303AGR_ACC_GetAxes+0x6a>
    return LSM303AGR_ERROR;
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	e7f7      	b.n	800227a <LSM303AGR_ACC_GetAxes+0x6a>

0800228a <LSM303AGR_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 800228a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00a      	beq.n	80022a8 <LSM303AGR_MAG_Enable+0x1e>
{
 8002292:	b510      	push	{r4, lr}
 8002294:	4604      	mov	r4, r0
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002296:	2100      	movs	r1, #0
 8002298:	301c      	adds	r0, #28
 800229a:	f000 fa58 	bl	800274e <lsm303agr_mag_operating_mode_set>
 800229e:	b928      	cbnz	r0, 80022ac <LSM303AGR_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80022a6:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 80022a8:	2000      	movs	r0, #0
}
 80022aa:	4770      	bx	lr
    return LSM303AGR_ERROR;
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	e7f9      	b.n	80022a6 <LSM303AGR_MAG_Enable+0x1c>

080022b2 <LSM303AGR_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 80022b2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80022b6:	b90b      	cbnz	r3, 80022bc <LSM303AGR_MAG_Disable+0xa>
    return LSM303AGR_OK;
 80022b8:	2000      	movs	r0, #0
}
 80022ba:	4770      	bx	lr
{
 80022bc:	b510      	push	{r4, lr}
 80022be:	4604      	mov	r4, r0
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80022c0:	2102      	movs	r1, #2
 80022c2:	301c      	adds	r0, #28
 80022c4:	f000 fa43 	bl	800274e <lsm303agr_mag_operating_mode_set>
 80022c8:	b910      	cbnz	r0, 80022d0 <LSM303AGR_MAG_Disable+0x1e>
  pObj->mag_is_enabled = 0;
 80022ca:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80022ce:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e7fb      	b.n	80022ce <LSM303AGR_MAG_Disable+0x1c>

080022d6 <LSM303AGR_MAG_DeInit>:
{
 80022d6:	b510      	push	{r4, lr}
 80022d8:	4604      	mov	r4, r0
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80022da:	f7ff ffea 	bl	80022b2 <LSM303AGR_MAG_Disable>
 80022de:	b910      	cbnz	r0, 80022e6 <LSM303AGR_MAG_DeInit+0x10>
  pObj->is_initialized = 0;
 80022e0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80022e4:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80022e6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ea:	e7fb      	b.n	80022e4 <LSM303AGR_MAG_DeInit+0xe>

080022ec <LSM303AGR_MAG_SetOutputDataRate>:
{
 80022ec:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80022ee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80022f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d90f      	bls.n	800231c <LSM303AGR_MAG_SetOutputDataRate+0x30>
 80022fc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002300:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d90e      	bls.n	8002328 <LSM303AGR_MAG_SetOutputDataRate+0x3c>
 800230a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002338 <LSM303AGR_MAG_SetOutputDataRate+0x4c>
 800230e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d809      	bhi.n	800232c <LSM303AGR_MAG_SetOutputDataRate+0x40>
 8002318:	2102      	movs	r1, #2
 800231a:	e000      	b.n	800231e <LSM303AGR_MAG_SetOutputDataRate+0x32>
 800231c:	2100      	movs	r1, #0
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800231e:	301c      	adds	r0, #28
 8002320:	f000 fa2e 	bl	8002780 <lsm303agr_mag_data_rate_set>
 8002324:	b920      	cbnz	r0, 8002330 <LSM303AGR_MAG_SetOutputDataRate+0x44>
}
 8002326:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002328:	2101      	movs	r1, #1
 800232a:	e7f8      	b.n	800231e <LSM303AGR_MAG_SetOutputDataRate+0x32>
 800232c:	2103      	movs	r1, #3
 800232e:	e7f6      	b.n	800231e <LSM303AGR_MAG_SetOutputDataRate+0x32>
    return LSM303AGR_ERROR;
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	e7f7      	b.n	8002326 <LSM303AGR_MAG_SetOutputDataRate+0x3a>
 8002336:	bf00      	nop
 8002338:	42480000 	.word	0x42480000

0800233c <LSM303AGR_MAG_Init>:
{
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4604      	mov	r4, r0
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002340:	f100 051c 	add.w	r5, r0, #28
 8002344:	2101      	movs	r1, #1
 8002346:	4628      	mov	r0, r5
 8002348:	f000 fa55 	bl	80027f6 <lsm303agr_mag_block_data_update_set>
 800234c:	b990      	cbnz	r0, 8002374 <LSM303AGR_MAG_Init+0x38>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800234e:	2102      	movs	r1, #2
 8002350:	4628      	mov	r0, r5
 8002352:	f000 f9fc 	bl	800274e <lsm303agr_mag_operating_mode_set>
 8002356:	b980      	cbnz	r0, 800237a <LSM303AGR_MAG_Init+0x3e>
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002358:	2103      	movs	r1, #3
 800235a:	4628      	mov	r0, r5
 800235c:	f000 fa10 	bl	8002780 <lsm303agr_mag_data_rate_set>
 8002360:	b970      	cbnz	r0, 8002380 <LSM303AGR_MAG_Init+0x44>
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002362:	2100      	movs	r1, #0
 8002364:	4628      	mov	r0, r5
 8002366:	f000 fa74 	bl	8002852 <lsm303agr_mag_self_test_set>
 800236a:	b960      	cbnz	r0, 8002386 <LSM303AGR_MAG_Init+0x4a>
  pObj->is_initialized = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8002372:	bd38      	pop	{r3, r4, r5, pc}
    return LSM303AGR_ERROR;
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	e7fb      	b.n	8002372 <LSM303AGR_MAG_Init+0x36>
    return LSM303AGR_ERROR;
 800237a:	f04f 30ff 	mov.w	r0, #4294967295
 800237e:	e7f8      	b.n	8002372 <LSM303AGR_MAG_Init+0x36>
    return LSM303AGR_ERROR;
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	e7f5      	b.n	8002372 <LSM303AGR_MAG_Init+0x36>
    return LSM303AGR_ERROR;
 8002386:	f04f 30ff 	mov.w	r0, #4294967295
 800238a:	e7f2      	b.n	8002372 <LSM303AGR_MAG_Init+0x36>

0800238c <LSM303AGR_MAG_ReadID>:
{
 800238c:	b508      	push	{r3, lr}
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800238e:	301c      	adds	r0, #28
 8002390:	f000 fa58 	bl	8002844 <lsm303agr_mag_device_id_get>
 8002394:	b900      	cbnz	r0, 8002398 <LSM303AGR_MAG_ReadID+0xc>
}
 8002396:	bd08      	pop	{r3, pc}
    return LSM303AGR_ERROR;
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	e7fb      	b.n	8002396 <LSM303AGR_MAG_ReadID+0xa>
	...

080023a0 <LSM303AGR_MAG_GetOutputDataRate>:
{
 80023a0:	b510      	push	{r4, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	460c      	mov	r4, r1
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80023a6:	f10d 0107 	add.w	r1, sp, #7
 80023aa:	301c      	adds	r0, #28
 80023ac:	f000 fa01 	bl	80027b2 <lsm303agr_mag_data_rate_get>
 80023b0:	b9a0      	cbnz	r0, 80023dc <LSM303AGR_MAG_GetOutputDataRate+0x3c>
  switch (odr_low_level)
 80023b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d813      	bhi.n	80023e2 <LSM303AGR_MAG_GetOutputDataRate+0x42>
 80023ba:	e8df f003 	tbb	[pc, r3]
 80023be:	0602      	.short	0x0602
 80023c0:	0c09      	.short	0x0c09
      *Odr = 10.0f;
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <LSM303AGR_MAG_GetOutputDataRate+0x48>)
 80023c4:	6023      	str	r3, [r4, #0]
}
 80023c6:	b002      	add	sp, #8
 80023c8:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <LSM303AGR_MAG_GetOutputDataRate+0x4c>)
 80023cc:	6023      	str	r3, [r4, #0]
      break;
 80023ce:	e7fa      	b.n	80023c6 <LSM303AGR_MAG_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <LSM303AGR_MAG_GetOutputDataRate+0x50>)
 80023d2:	6023      	str	r3, [r4, #0]
      break;
 80023d4:	e7f7      	b.n	80023c6 <LSM303AGR_MAG_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <LSM303AGR_MAG_GetOutputDataRate+0x54>)
 80023d8:	6023      	str	r3, [r4, #0]
      break;
 80023da:	e7f4      	b.n	80023c6 <LSM303AGR_MAG_GetOutputDataRate+0x26>
    return LSM303AGR_ERROR;
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	e7f1      	b.n	80023c6 <LSM303AGR_MAG_GetOutputDataRate+0x26>
  switch (odr_low_level)
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
 80023e6:	e7ee      	b.n	80023c6 <LSM303AGR_MAG_GetOutputDataRate+0x26>
 80023e8:	41200000 	.word	0x41200000
 80023ec:	41a00000 	.word	0x41a00000
 80023f0:	42480000 	.word	0x42480000
 80023f4:	42c80000 	.word	0x42c80000

080023f8 <LSM303AGR_MAG_GetAxesRaw>:
{
 80023f8:	b510      	push	{r4, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	460c      	mov	r4, r1
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80023fe:	4669      	mov	r1, sp
 8002400:	301c      	adds	r0, #28
 8002402:	f000 fa11 	bl	8002828 <lsm303agr_magnetic_raw_get>
 8002406:	b950      	cbnz	r0, 800241e <LSM303AGR_MAG_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8002408:	f9bd 3000 	ldrsh.w	r3, [sp]
 800240c:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 800240e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002412:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002414:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002418:	80a3      	strh	r3, [r4, #4]
}
 800241a:	b002      	add	sp, #8
 800241c:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800241e:	f04f 30ff 	mov.w	r0, #4294967295
 8002422:	e7fa      	b.n	800241a <LSM303AGR_MAG_GetAxesRaw+0x22>

08002424 <LSM303AGR_MAG_GetAxes>:
{
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	4605      	mov	r5, r0
 800242a:	460c      	mov	r4, r1
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800242c:	a902      	add	r1, sp, #8
 800242e:	301c      	adds	r0, #28
 8002430:	f000 f9fa 	bl	8002828 <lsm303agr_magnetic_raw_get>
 8002434:	bb68      	cbnz	r0, 8002492 <LSM303AGR_MAG_GetAxes+0x6e>
 8002436:	4606      	mov	r6, r0
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002438:	a901      	add	r1, sp, #4
 800243a:	4628      	mov	r0, r5
 800243c:	f7ff fbe8 	bl	8001c10 <LSM303AGR_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002440:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002444:	ee07 3a10 	vmov	s14, r3
 8002448:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800244c:	eddd 7a01 	vldr	s15, [sp, #4]
 8002450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002454:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002458:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800245c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002460:	ee07 3a10 	vmov	s14, r3
 8002464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002470:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002474:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002478:	ee07 3a10 	vmov	s14, r3
 800247c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002488:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800248c:	4630      	mov	r0, r6
 800248e:	b004      	add	sp, #16
 8002490:	bd70      	pop	{r4, r5, r6, pc}
    return LSM303AGR_ERROR;
 8002492:	f04f 36ff 	mov.w	r6, #4294967295
 8002496:	e7f9      	b.n	800248c <LSM303AGR_MAG_GetAxes+0x68>

08002498 <LSM303AGR_ACC_Write_Reg>:
{
 8002498:	b500      	push	{lr}
 800249a:	b083      	sub	sp, #12
 800249c:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80024a0:	2301      	movs	r3, #1
 80024a2:	f10d 0207 	add.w	r2, sp, #7
 80024a6:	301c      	adds	r0, #28
 80024a8:	f000 f87d 	bl	80025a6 <lsm303agr_write_reg>
 80024ac:	b910      	cbnz	r0, 80024b4 <LSM303AGR_ACC_Write_Reg+0x1c>
}
 80024ae:	b003      	add	sp, #12
 80024b0:	f85d fb04 	ldr.w	pc, [sp], #4
    return LSM303AGR_ERROR;
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	e7f9      	b.n	80024ae <LSM303AGR_ACC_Write_Reg+0x16>
	...

080024bc <LSM303AGR_ACC_RegisterBusIO>:
  if (pObj == NULL)
 80024bc:	2800      	cmp	r0, #0
 80024be:	d029      	beq.n	8002514 <LSM303AGR_ACC_RegisterBusIO+0x58>
{
 80024c0:	b510      	push	{r4, lr}
 80024c2:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80024c4:	680b      	ldr	r3, [r1, #0]
 80024c6:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80024c8:	684a      	ldr	r2, [r1, #4]
 80024ca:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80024cc:	688a      	ldr	r2, [r1, #8]
 80024ce:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80024d0:	7b0a      	ldrb	r2, [r1, #12]
 80024d2:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80024d4:	690a      	ldr	r2, [r1, #16]
 80024d6:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024d8:	694a      	ldr	r2, [r1, #20]
 80024da:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80024dc:	698a      	ldr	r2, [r1, #24]
 80024de:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <LSM303AGR_ACC_RegisterBusIO+0x6c>)
 80024e2:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <LSM303AGR_ACC_RegisterBusIO+0x70>)
 80024e6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 80024e8:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80024ea:	b1b3      	cbz	r3, 800251a <LSM303AGR_ACC_RegisterBusIO+0x5e>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80024ec:	4798      	blx	r3
 80024ee:	b9b8      	cbnz	r0, 8002520 <LSM303AGR_ACC_RegisterBusIO+0x64>
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80024f0:	68a3      	ldr	r3, [r4, #8]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d000      	beq.n	80024f8 <LSM303AGR_ACC_RegisterBusIO+0x3c>
}
 80024f6:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80024f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1fa      	bne.n	80024f6 <LSM303AGR_ACC_RegisterBusIO+0x3a>
          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002500:	2201      	movs	r2, #1
 8002502:	2123      	movs	r1, #35	; 0x23
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff ffc7 	bl	8002498 <LSM303AGR_ACC_Write_Reg>
 800250a:	2800      	cmp	r0, #0
 800250c:	d0f3      	beq.n	80024f6 <LSM303AGR_ACC_RegisterBusIO+0x3a>
            return LSM303AGR_ERROR;
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	e7f0      	b.n	80024f6 <LSM303AGR_ACC_RegisterBusIO+0x3a>
    ret = LSM303AGR_ERROR;
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002518:	4770      	bx	lr
      ret = LSM303AGR_ERROR;
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	e7ea      	b.n	80024f6 <LSM303AGR_ACC_RegisterBusIO+0x3a>
      ret = LSM303AGR_ERROR;
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	e7e7      	b.n	80024f6 <LSM303AGR_ACC_RegisterBusIO+0x3a>
 8002526:	bf00      	nop
 8002528:	08001cad 	.word	0x08001cad
 800252c:	08001ccb 	.word	0x08001ccb

08002530 <LSM303AGR_MAG_RegisterBusIO>:
  if (pObj == NULL)
 8002530:	b338      	cbz	r0, 8002582 <LSM303AGR_MAG_RegisterBusIO+0x52>
{
 8002532:	b510      	push	{r4, lr}
 8002534:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002536:	680b      	ldr	r3, [r1, #0]
 8002538:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800253a:	684a      	ldr	r2, [r1, #4]
 800253c:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 800253e:	688a      	ldr	r2, [r1, #8]
 8002540:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8002542:	7b0a      	ldrb	r2, [r1, #12]
 8002544:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002546:	690a      	ldr	r2, [r1, #16]
 8002548:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800254a:	694a      	ldr	r2, [r1, #20]
 800254c:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800254e:	698a      	ldr	r2, [r1, #24]
 8002550:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <LSM303AGR_MAG_RegisterBusIO+0x64>)
 8002554:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <LSM303AGR_MAG_RegisterBusIO+0x68>)
 8002558:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 800255a:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 800255c:	b1a3      	cbz	r3, 8002588 <LSM303AGR_MAG_RegisterBusIO+0x58>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800255e:	4798      	blx	r3
 8002560:	b9a8      	cbnz	r0, 800258e <LSM303AGR_MAG_RegisterBusIO+0x5e>
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002562:	68a3      	ldr	r3, [r4, #8]
 8002564:	b113      	cbz	r3, 800256c <LSM303AGR_MAG_RegisterBusIO+0x3c>
        if (pObj->is_initialized == 0U)
 8002566:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800256a:	b103      	cbz	r3, 800256e <LSM303AGR_MAG_RegisterBusIO+0x3e>
}
 800256c:	bd10      	pop	{r4, pc}
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 800256e:	2101      	movs	r1, #1
 8002570:	f104 001c 	add.w	r0, r4, #28
 8002574:	f000 f99f 	bl	80028b6 <lsm303agr_mag_i2c_interface_set>
 8002578:	2800      	cmp	r0, #0
 800257a:	d0f7      	beq.n	800256c <LSM303AGR_MAG_RegisterBusIO+0x3c>
            return LSM303AGR_ERROR;
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	e7f4      	b.n	800256c <LSM303AGR_MAG_RegisterBusIO+0x3c>
    ret = LSM303AGR_ERROR;
 8002582:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002586:	4770      	bx	lr
      ret = LSM303AGR_ERROR;
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	e7ee      	b.n	800256c <LSM303AGR_MAG_RegisterBusIO+0x3c>
      ret = LSM303AGR_ERROR;
 800258e:	f04f 30ff 	mov.w	r0, #4294967295
 8002592:	e7eb      	b.n	800256c <LSM303AGR_MAG_RegisterBusIO+0x3c>
 8002594:	08001ce9 	.word	0x08001ce9
 8002598:	08001d07 	.word	0x08001d07

0800259c <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800259c:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800259e:	6844      	ldr	r4, [r0, #4]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	47a0      	blx	r4
  return ret;
}
 80025a4:	bd10      	pop	{r4, pc}

080025a6 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80025a6:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80025a8:	6804      	ldr	r4, [r0, #0]
 80025aa:	6880      	ldr	r0, [r0, #8]
 80025ac:	47a0      	blx	r4
  return ret;
}
 80025ae:	bd10      	pop	{r4, pc}

080025b0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80025b0:	b530      	push	{r4, r5, lr}
 80025b2:	b083      	sub	sp, #12
 80025b4:	4605      	mov	r5, r0
 80025b6:	460c      	mov	r4, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80025b8:	2301      	movs	r3, #1
 80025ba:	466a      	mov	r2, sp
 80025bc:	2120      	movs	r1, #32
 80025be:	f7ff ffed 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80025c2:	b140      	cbz	r0, 80025d6 <lsm303agr_xl_operating_mode_get+0x26>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 80025c4:	f89d 3000 	ldrb.w	r3, [sp]
 80025c8:	f013 0f08 	tst.w	r3, #8
 80025cc:	d00a      	beq.n	80025e4 <lsm303agr_xl_operating_mode_get+0x34>
    *val = LSM303AGR_LP_8bit;
 80025ce:	2302      	movs	r3, #2
 80025d0:	7023      	strb	r3, [r4, #0]
  } else{
    *val = LSM303AGR_NM_10bit;
  }

  return ret;
}
 80025d2:	b003      	add	sp, #12
 80025d4:	bd30      	pop	{r4, r5, pc}
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80025d6:	2301      	movs	r3, #1
 80025d8:	aa01      	add	r2, sp, #4
 80025da:	2123      	movs	r1, #35	; 0x23
 80025dc:	4628      	mov	r0, r5
 80025de:	f7ff ffdd 	bl	800259c <lsm303agr_read_reg>
 80025e2:	e7ef      	b.n	80025c4 <lsm303agr_xl_operating_mode_get+0x14>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 80025e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025e8:	f013 0f08 	tst.w	r3, #8
 80025ec:	d002      	beq.n	80025f4 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_HR_12bit;
 80025ee:	2300      	movs	r3, #0
 80025f0:	7023      	strb	r3, [r4, #0]
 80025f2:	e7ee      	b.n	80025d2 <lsm303agr_xl_operating_mode_get+0x22>
    *val = LSM303AGR_NM_10bit;
 80025f4:	2301      	movs	r3, #1
 80025f6:	7023      	strb	r3, [r4, #0]
  return ret;
 80025f8:	e7eb      	b.n	80025d2 <lsm303agr_xl_operating_mode_get+0x22>

080025fa <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80025fa:	b530      	push	{r4, r5, lr}
 80025fc:	b083      	sub	sp, #12
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002602:	2301      	movs	r3, #1
 8002604:	aa01      	add	r2, sp, #4
 8002606:	2120      	movs	r1, #32
 8002608:	f7ff ffc8 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 800260c:	b108      	cbz	r0, 8002612 <lsm303agr_xl_data_rate_set+0x18>
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
}
 800260e:	b003      	add	sp, #12
 8002610:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1_a.odr = (uint8_t)val;
 8002612:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002616:	f365 1307 	bfi	r3, r5, #4, #4
 800261a:	f88d 3004 	strb.w	r3, [sp, #4]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800261e:	2301      	movs	r3, #1
 8002620:	aa01      	add	r2, sp, #4
 8002622:	2120      	movs	r1, #32
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ffbe 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 800262a:	e7f0      	b.n	800260e <lsm303agr_xl_data_rate_set+0x14>

0800262c <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 800262c:	b510      	push	{r4, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	460c      	mov	r4, r1
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002632:	2301      	movs	r3, #1
 8002634:	aa01      	add	r2, sp, #4
 8002636:	2120      	movs	r1, #32
 8002638:	f7ff ffb0 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 800263c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	2b09      	cmp	r3, #9
 8002644:	d825      	bhi.n	8002692 <lsm303agr_xl_data_rate_get+0x66>
 8002646:	e8df f003 	tbb	[pc, r3]
 800264a:	0905      	.short	0x0905
 800264c:	15120f0c 	.word	0x15120f0c
 8002650:	211e1b18 	.word	0x211e1b18
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8002654:	2300      	movs	r3, #0
 8002656:	7023      	strb	r3, [r4, #0]
      *val = LSM303AGR_XL_POWER_DOWN;
      break;
  }

  return ret;
}
 8002658:	b002      	add	sp, #8
 800265a:	bd10      	pop	{r4, pc}
      *val = LSM303AGR_XL_ODR_1Hz;
 800265c:	2301      	movs	r3, #1
 800265e:	7023      	strb	r3, [r4, #0]
      break;
 8002660:	e7fa      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_10Hz;
 8002662:	2302      	movs	r3, #2
 8002664:	7023      	strb	r3, [r4, #0]
      break;
 8002666:	e7f7      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_25Hz;
 8002668:	2303      	movs	r3, #3
 800266a:	7023      	strb	r3, [r4, #0]
      break;
 800266c:	e7f4      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_50Hz;
 800266e:	2304      	movs	r3, #4
 8002670:	7023      	strb	r3, [r4, #0]
      break;
 8002672:	e7f1      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_100Hz;
 8002674:	2305      	movs	r3, #5
 8002676:	7023      	strb	r3, [r4, #0]
      break;
 8002678:	e7ee      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_200Hz;
 800267a:	2306      	movs	r3, #6
 800267c:	7023      	strb	r3, [r4, #0]
      break;
 800267e:	e7eb      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_400Hz;
 8002680:	2307      	movs	r3, #7
 8002682:	7023      	strb	r3, [r4, #0]
      break;
 8002684:	e7e8      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8002686:	2308      	movs	r3, #8
 8002688:	7023      	strb	r3, [r4, #0]
      break;
 800268a:	e7e5      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 800268c:	2309      	movs	r3, #9
 800268e:	7023      	strb	r3, [r4, #0]
      break;
 8002690:	e7e2      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>
      *val = LSM303AGR_XL_POWER_DOWN;
 8002692:	2300      	movs	r3, #0
 8002694:	7023      	strb	r3, [r4, #0]
  return ret;
 8002696:	e7df      	b.n	8002658 <lsm303agr_xl_data_rate_get+0x2c>

08002698 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8002698:	b530      	push	{r4, r5, lr}
 800269a:	b083      	sub	sp, #12
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80026a0:	2301      	movs	r3, #1
 80026a2:	aa01      	add	r2, sp, #4
 80026a4:	2123      	movs	r1, #35	; 0x23
 80026a6:	f7ff ff79 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80026aa:	b108      	cbz	r0, 80026b0 <lsm303agr_xl_full_scale_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
}
 80026ac:	b003      	add	sp, #12
 80026ae:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4_a.fs = (uint8_t)val;
 80026b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026b4:	f365 1305 	bfi	r3, r5, #4, #2
 80026b8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80026bc:	2301      	movs	r3, #1
 80026be:	aa01      	add	r2, sp, #4
 80026c0:	2123      	movs	r1, #35	; 0x23
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff ff6f 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 80026c8:	e7f0      	b.n	80026ac <lsm303agr_xl_full_scale_set+0x14>

080026ca <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80026ca:	b510      	push	{r4, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	460c      	mov	r4, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80026d0:	2301      	movs	r3, #1
 80026d2:	aa01      	add	r2, sp, #4
 80026d4:	2123      	movs	r1, #35	; 0x23
 80026d6:	f7ff ff61 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 80026da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026de:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d810      	bhi.n	8002708 <lsm303agr_xl_full_scale_get+0x3e>
 80026e6:	e8df f003 	tbb	[pc, r3]
 80026ea:	0602      	.short	0x0602
 80026ec:	0c09      	.short	0x0c09
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80026ee:	2300      	movs	r3, #0
 80026f0:	7023      	strb	r3, [r4, #0]
    default:
      *val = LSM303AGR_2g;
      break;
  }
  return ret;
}
 80026f2:	b002      	add	sp, #8
 80026f4:	bd10      	pop	{r4, pc}
      *val = LSM303AGR_4g;
 80026f6:	2301      	movs	r3, #1
 80026f8:	7023      	strb	r3, [r4, #0]
      break;
 80026fa:	e7fa      	b.n	80026f2 <lsm303agr_xl_full_scale_get+0x28>
      *val = LSM303AGR_8g;
 80026fc:	2302      	movs	r3, #2
 80026fe:	7023      	strb	r3, [r4, #0]
      break;
 8002700:	e7f7      	b.n	80026f2 <lsm303agr_xl_full_scale_get+0x28>
      *val = LSM303AGR_16g;
 8002702:	2303      	movs	r3, #3
 8002704:	7023      	strb	r3, [r4, #0]
      break;
 8002706:	e7f4      	b.n	80026f2 <lsm303agr_xl_full_scale_get+0x28>
      *val = LSM303AGR_2g;
 8002708:	2300      	movs	r3, #0
 800270a:	7023      	strb	r3, [r4, #0]
  return ret;
 800270c:	e7f1      	b.n	80026f2 <lsm303agr_xl_full_scale_get+0x28>

0800270e <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 800270e:	b530      	push	{r4, r5, lr}
 8002710:	b083      	sub	sp, #12
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002716:	2301      	movs	r3, #1
 8002718:	aa01      	add	r2, sp, #4
 800271a:	2123      	movs	r1, #35	; 0x23
 800271c:	f7ff ff3e 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8002720:	b108      	cbz	r0, 8002726 <lsm303agr_xl_block_data_update_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
}
 8002722:	b003      	add	sp, #12
 8002724:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4_a.bdu = (uint8_t)val;
 8002726:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800272a:	f365 13c7 	bfi	r3, r5, #7, #1
 800272e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8002732:	2301      	movs	r3, #1
 8002734:	aa01      	add	r2, sp, #4
 8002736:	2123      	movs	r1, #35	; 0x23
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff ff34 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 800273e:	e7f0      	b.n	8002722 <lsm303agr_xl_block_data_update_set+0x14>

08002740 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002740:	b508      	push	{r3, lr}
 8002742:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8002744:	2306      	movs	r3, #6
 8002746:	2128      	movs	r1, #40	; 0x28
 8002748:	f7ff ff28 	bl	800259c <lsm303agr_read_reg>
  return ret;
}
 800274c:	bd08      	pop	{r3, pc}

0800274e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800274e:	b530      	push	{r4, r5, lr}
 8002750:	b083      	sub	sp, #12
 8002752:	4604      	mov	r4, r0
 8002754:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002756:	2301      	movs	r3, #1
 8002758:	aa01      	add	r2, sp, #4
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	f7ff ff1e 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8002760:	b108      	cbz	r0, 8002766 <lsm303agr_mag_operating_mode_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8002762:	b003      	add	sp, #12
 8002764:	bd30      	pop	{r4, r5, pc}
    cfg_reg_a_m.md = (uint8_t)val;
 8002766:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800276a:	f365 0301 	bfi	r3, r5, #0, #2
 800276e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002772:	2301      	movs	r3, #1
 8002774:	aa01      	add	r2, sp, #4
 8002776:	2160      	movs	r1, #96	; 0x60
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff ff14 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 800277e:	e7f0      	b.n	8002762 <lsm303agr_mag_operating_mode_set+0x14>

08002780 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002780:	b530      	push	{r4, r5, lr}
 8002782:	b083      	sub	sp, #12
 8002784:	4604      	mov	r4, r0
 8002786:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8002788:	2301      	movs	r3, #1
 800278a:	aa01      	add	r2, sp, #4
 800278c:	2160      	movs	r1, #96	; 0x60
 800278e:	f7ff ff05 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8002792:	b108      	cbz	r0, 8002798 <lsm303agr_mag_data_rate_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
}
 8002794:	b003      	add	sp, #12
 8002796:	bd30      	pop	{r4, r5, pc}
    cfg_reg_a_m.odr = (uint8_t)val;
 8002798:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800279c:	f365 0383 	bfi	r3, r5, #2, #2
 80027a0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80027a4:	2301      	movs	r3, #1
 80027a6:	aa01      	add	r2, sp, #4
 80027a8:	2160      	movs	r1, #96	; 0x60
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7ff fefb 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 80027b0:	e7f0      	b.n	8002794 <lsm303agr_mag_data_rate_set+0x14>

080027b2 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80027b2:	b510      	push	{r4, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	460c      	mov	r4, r1
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80027b8:	2301      	movs	r3, #1
 80027ba:	aa01      	add	r2, sp, #4
 80027bc:	2160      	movs	r1, #96	; 0x60
 80027be:	f7ff feed 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 80027c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d810      	bhi.n	80027f0 <lsm303agr_mag_data_rate_get+0x3e>
 80027ce:	e8df f003 	tbb	[pc, r3]
 80027d2:	0602      	.short	0x0602
 80027d4:	0c09      	.short	0x0c09
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80027d6:	2300      	movs	r3, #0
 80027d8:	7023      	strb	r3, [r4, #0]
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
      break;
  }
  return ret;
}
 80027da:	b002      	add	sp, #8
 80027dc:	bd10      	pop	{r4, pc}
      *val = LSM303AGR_MG_ODR_20Hz;
 80027de:	2301      	movs	r3, #1
 80027e0:	7023      	strb	r3, [r4, #0]
      break;
 80027e2:	e7fa      	b.n	80027da <lsm303agr_mag_data_rate_get+0x28>
      *val = LSM303AGR_MG_ODR_50Hz;
 80027e4:	2302      	movs	r3, #2
 80027e6:	7023      	strb	r3, [r4, #0]
      break;
 80027e8:	e7f7      	b.n	80027da <lsm303agr_mag_data_rate_get+0x28>
      *val = LSM303AGR_MG_ODR_100Hz;
 80027ea:	2303      	movs	r3, #3
 80027ec:	7023      	strb	r3, [r4, #0]
      break;
 80027ee:	e7f4      	b.n	80027da <lsm303agr_mag_data_rate_get+0x28>
      *val = LSM303AGR_MG_ODR_10Hz;
 80027f0:	2300      	movs	r3, #0
 80027f2:	7023      	strb	r3, [r4, #0]
  return ret;
 80027f4:	e7f1      	b.n	80027da <lsm303agr_mag_data_rate_get+0x28>

080027f6 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80027f6:	b530      	push	{r4, r5, lr}
 80027f8:	b083      	sub	sp, #12
 80027fa:	4604      	mov	r4, r0
 80027fc:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80027fe:	2301      	movs	r3, #1
 8002800:	aa01      	add	r2, sp, #4
 8002802:	2162      	movs	r1, #98	; 0x62
 8002804:	f7ff feca 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8002808:	b108      	cbz	r0, 800280e <lsm303agr_mag_block_data_update_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
}
 800280a:	b003      	add	sp, #12
 800280c:	bd30      	pop	{r4, r5, pc}
    cfg_reg_c_m.bdu = (uint8_t)val;
 800280e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002812:	f365 1304 	bfi	r3, r5, #4, #1
 8002816:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800281a:	2301      	movs	r3, #1
 800281c:	aa01      	add	r2, sp, #4
 800281e:	2162      	movs	r1, #98	; 0x62
 8002820:	4620      	mov	r0, r4
 8002822:	f7ff fec0 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 8002826:	e7f0      	b.n	800280a <lsm303agr_mag_block_data_update_set+0x14>

08002828 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002828:	b508      	push	{r3, lr}
 800282a:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800282c:	2306      	movs	r3, #6
 800282e:	2168      	movs	r1, #104	; 0x68
 8002830:	f7ff feb4 	bl	800259c <lsm303agr_read_reg>
  return ret;
}
 8002834:	bd08      	pop	{r3, pc}

08002836 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002836:	b508      	push	{r3, lr}
 8002838:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800283a:	2301      	movs	r3, #1
 800283c:	210f      	movs	r1, #15
 800283e:	f7ff fead 	bl	800259c <lsm303agr_read_reg>
  return ret;
}
 8002842:	bd08      	pop	{r3, pc}

08002844 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002844:	b508      	push	{r3, lr}
 8002846:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8002848:	2301      	movs	r3, #1
 800284a:	214f      	movs	r1, #79	; 0x4f
 800284c:	f7ff fea6 	bl	800259c <lsm303agr_read_reg>
  return ret;
}
 8002850:	bd08      	pop	{r3, pc}

08002852 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002852:	b530      	push	{r4, r5, lr}
 8002854:	b083      	sub	sp, #12
 8002856:	4604      	mov	r4, r0
 8002858:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800285a:	2301      	movs	r3, #1
 800285c:	aa01      	add	r2, sp, #4
 800285e:	2162      	movs	r1, #98	; 0x62
 8002860:	f7ff fe9c 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8002864:	b108      	cbz	r0, 800286a <lsm303agr_mag_self_test_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
}
 8002866:	b003      	add	sp, #12
 8002868:	bd30      	pop	{r4, r5, pc}
    cfg_reg_c_m.self_test = (uint8_t)val;
 800286a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800286e:	f365 0341 	bfi	r3, r5, #1, #1
 8002872:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002876:	2301      	movs	r3, #1
 8002878:	aa01      	add	r2, sp, #4
 800287a:	2162      	movs	r1, #98	; 0x62
 800287c:	4620      	mov	r0, r4
 800287e:	f7ff fe92 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 8002882:	e7f0      	b.n	8002866 <lsm303agr_mag_self_test_set+0x14>

08002884 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8002884:	b530      	push	{r4, r5, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	4604      	mov	r4, r0
 800288a:	460d      	mov	r5, r1
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800288c:	2301      	movs	r3, #1
 800288e:	aa01      	add	r2, sp, #4
 8002890:	212e      	movs	r1, #46	; 0x2e
 8002892:	f7ff fe83 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 8002896:	b108      	cbz	r0, 800289c <lsm303agr_xl_fifo_mode_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
}
 8002898:	b003      	add	sp, #12
 800289a:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800289c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028a0:	f365 1387 	bfi	r3, r5, #6, #2
 80028a4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80028a8:	2301      	movs	r3, #1
 80028aa:	aa01      	add	r2, sp, #4
 80028ac:	212e      	movs	r1, #46	; 0x2e
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fe79 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 80028b4:	e7f0      	b.n	8002898 <lsm303agr_xl_fifo_mode_set+0x14>

080028b6 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80028b6:	b530      	push	{r4, r5, lr}
 80028b8:	b083      	sub	sp, #12
 80028ba:	4604      	mov	r4, r0
 80028bc:	460d      	mov	r5, r1
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80028be:	2301      	movs	r3, #1
 80028c0:	aa01      	add	r2, sp, #4
 80028c2:	2162      	movs	r1, #98	; 0x62
 80028c4:	f7ff fe6a 	bl	800259c <lsm303agr_read_reg>
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80028c8:	b108      	cbz	r0, 80028ce <lsm303agr_mag_i2c_interface_set+0x18>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
}
 80028ca:	b003      	add	sp, #12
 80028cc:	bd30      	pop	{r4, r5, pc}
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80028ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028d2:	f365 1345 	bfi	r3, r5, #5, #1
 80028d6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80028da:	2301      	movs	r3, #1
 80028dc:	aa01      	add	r2, sp, #4
 80028de:	2162      	movs	r1, #98	; 0x62
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fe60 	bl	80025a6 <lsm303agr_write_reg>
  return ret;
 80028e6:	e7f0      	b.n	80028ca <lsm303agr_mag_i2c_interface_set+0x14>

080028e8 <LSM6DSL_GetCapabilities>:
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80028e8:	2301      	movs	r3, #1
 80028ea:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 80028ec:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 80028ee:	2000      	movs	r0, #0
 80028f0:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 80028f2:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 80028f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028f8:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 80028fa:	2310      	movs	r3, #16
 80028fc:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 80028fe:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <LSM6DSL_GetCapabilities+0x24>)
 8002902:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8002904:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002906:	2300      	movs	r3, #0
 8002908:	618b      	str	r3, [r1, #24]
  return LSM6DSL_OK;
}
 800290a:	4770      	bx	lr
 800290c:	45d02000 	.word	0x45d02000

08002910 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002910:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002914:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d939      	bls.n	8002992 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x82>
 800291e:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002922:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292a:	d937      	bls.n	800299c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x8c>
 800292c:	eddf 7a23 	vldr	s15, [pc, #140]	; 80029bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xac>
 8002930:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d932      	bls.n	80029a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800293a:	eddf 7a21 	vldr	s15, [pc, #132]	; 80029c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800293e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d92d      	bls.n	80029a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x94>
 8002948:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80029c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb4>
 800294c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	d928      	bls.n	80029a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x98>
 8002956:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80029c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb8>
 800295a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	d923      	bls.n	80029ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x9c>
 8002964:	eddf 7a19 	vldr	s15, [pc, #100]	; 80029cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002968:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d91e      	bls.n	80029b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa0>
 8002972:	eddf 7a17 	vldr	s15, [pc, #92]	; 80029d0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8002976:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d919      	bls.n	80029b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8002980:	eddf 7a14 	vldr	s15, [pc, #80]	; 80029d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8002984:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	d814      	bhi.n	80029b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800298e:	2309      	movs	r3, #9
 8002990:	e000      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002992:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002994:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
}
 8002998:	2000      	movs	r0, #0
 800299a:	4770      	bx	lr
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800299c:	2302      	movs	r3, #2
 800299e:	e7f9      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029a0:	2303      	movs	r3, #3
 80029a2:	e7f7      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e7f5      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029a8:	2305      	movs	r3, #5
 80029aa:	e7f3      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029ac:	2306      	movs	r3, #6
 80029ae:	e7f1      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029b0:	2307      	movs	r3, #7
 80029b2:	e7ef      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029b4:	2308      	movs	r3, #8
 80029b6:	e7ed      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029b8:	230a      	movs	r3, #10
 80029ba:	e7eb      	b.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029bc:	42500000 	.word	0x42500000
 80029c0:	42d00000 	.word	0x42d00000
 80029c4:	43500000 	.word	0x43500000
 80029c8:	43d00000 	.word	0x43d00000
 80029cc:	44504000 	.word	0x44504000
 80029d0:	44cf8000 	.word	0x44cf8000
 80029d4:	45502000 	.word	0x45502000

080029d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80029d8:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80029dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	d939      	bls.n	8002a5a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x82>
 80029e6:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80029ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d937      	bls.n	8002a64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x8c>
 80029f4:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002a84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xac>
 80029f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80029fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a00:	d932      	bls.n	8002a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002a02:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002a88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8002a06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d92d      	bls.n	8002a6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x94>
 8002a10:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002a8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 8002a14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	d928      	bls.n	8002a70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x98>
 8002a1e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002a90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 8002a22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	d923      	bls.n	8002a74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8002a2c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002a94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8002a30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	d91e      	bls.n	8002a78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 8002a3a:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002a98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 8002a3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d919      	bls.n	8002a7c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8002a48:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002a9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 8002a4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d814      	bhi.n	8002a80 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 8002a56:	2309      	movs	r3, #9
 8002a58:	e000      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a5a:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8002a5c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
}
 8002a60:	2000      	movs	r0, #0
 8002a62:	4770      	bx	lr
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8002a64:	2302      	movs	r3, #2
 8002a66:	e7f9      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e7f7      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e7f5      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a70:	2305      	movs	r3, #5
 8002a72:	e7f3      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a74:	2306      	movs	r3, #6
 8002a76:	e7f1      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a78:	2307      	movs	r3, #7
 8002a7a:	e7ef      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	e7ed      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a80:	230a      	movs	r3, #10
 8002a82:	e7eb      	b.n	8002a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8002a84:	42500000 	.word	0x42500000
 8002a88:	42d00000 	.word	0x42d00000
 8002a8c:	43500000 	.word	0x43500000
 8002a90:	43d00000 	.word	0x43d00000
 8002a94:	44504000 	.word	0x44504000
 8002a98:	44cf8000 	.word	0x44cf8000
 8002a9c:	45502000 	.word	0x45502000

08002aa0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002aa0:	b510      	push	{r4, lr}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002aa2:	6944      	ldr	r4, [r0, #20]
 8002aa4:	7b00      	ldrb	r0, [r0, #12]
 8002aa6:	47a0      	blx	r4
}
 8002aa8:	bd10      	pop	{r4, pc}

08002aaa <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002aaa:	b510      	push	{r4, lr}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002aac:	6904      	ldr	r4, [r0, #16]
 8002aae:	7b00      	ldrb	r0, [r0, #12]
 8002ab0:	47a0      	blx	r4
}
 8002ab2:	bd10      	pop	{r4, pc}

08002ab4 <LSM6DSL_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002ab4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d00b      	beq.n	8002ad4 <LSM6DSL_ACC_Enable+0x20>
{
 8002abc:	b510      	push	{r4, lr}
 8002abe:	4604      	mov	r4, r0
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002ac0:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002ac4:	301c      	adds	r0, #28
 8002ac6:	f000 fc72 	bl	80033ae <lsm6dsl_xl_data_rate_set>
 8002aca:	b928      	cbnz	r0, 8002ad8 <LSM6DSL_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8002ad2:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 8002ad4:	2000      	movs	r0, #0
}
 8002ad6:	4770      	bx	lr
    return LSM6DSL_ERROR;
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	e7f9      	b.n	8002ad2 <LSM6DSL_ACC_Enable+0x1e>
	...

08002ae0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
{
 8002ae0:	b508      	push	{r3, lr}
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002ae2:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002ae6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	d939      	bls.n	8002b64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x84>
 8002af0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002af4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d938      	bls.n	8002b70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002afe:	eddf 7a26 	vldr	s15, [pc, #152]	; 8002b98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8002b02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	d933      	bls.n	8002b74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x94>
 8002b0c:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002b9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002b10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	d92e      	bls.n	8002b78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x98>
 8002b1a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002ba0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8002b1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	d929      	bls.n	8002b7c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x9c>
 8002b28:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002ba4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc4>
 8002b2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	d924      	bls.n	8002b80 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa0>
 8002b36:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002ba8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc8>
 8002b3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	d91f      	bls.n	8002b84 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 8002b44:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002bac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xcc>
 8002b48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	d91a      	bls.n	8002b88 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa8>
 8002b52:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002bb0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8002b56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	d815      	bhi.n	8002b8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xac>
 8002b60:	2109      	movs	r1, #9
 8002b62:	e000      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b64:	2101      	movs	r1, #1
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002b66:	301c      	adds	r0, #28
 8002b68:	f000 fc21 	bl	80033ae <lsm6dsl_xl_data_rate_set>
 8002b6c:	b980      	cbnz	r0, 8002b90 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb0>
}
 8002b6e:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002b70:	2102      	movs	r1, #2
 8002b72:	e7f8      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b74:	2103      	movs	r1, #3
 8002b76:	e7f6      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b78:	2104      	movs	r1, #4
 8002b7a:	e7f4      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	e7f2      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b80:	2106      	movs	r1, #6
 8002b82:	e7f0      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b84:	2107      	movs	r1, #7
 8002b86:	e7ee      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b88:	2108      	movs	r1, #8
 8002b8a:	e7ec      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	e7ea      	b.n	8002b66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSL_ERROR;
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	e7eb      	b.n	8002b6e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x8e>
 8002b96:	bf00      	nop
 8002b98:	42500000 	.word	0x42500000
 8002b9c:	42d00000 	.word	0x42d00000
 8002ba0:	43500000 	.word	0x43500000
 8002ba4:	43d00000 	.word	0x43d00000
 8002ba8:	44504000 	.word	0x44504000
 8002bac:	44cf8000 	.word	0x44cf8000
 8002bb0:	45502000 	.word	0x45502000

08002bb4 <LSM6DSL_ACC_SetOutputDataRate>:
{
 8002bb4:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8002bb6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d002      	beq.n	8002bc4 <LSM6DSL_ACC_SetOutputDataRate+0x10>
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002bbe:	f7ff fea7 	bl	8002910 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
}
 8002bc2:	bd08      	pop	{r3, pc}
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002bc4:	f7ff ff8c 	bl	8002ae0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002bc8:	e7fb      	b.n	8002bc2 <LSM6DSL_ACC_SetOutputDataRate+0xe>

08002bca <LSM6DSL_ACC_SetFullScale>:
{
 8002bca:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSL_4g
 8002bcc:	2902      	cmp	r1, #2
 8002bce:	dd05      	ble.n	8002bdc <LSM6DSL_ACC_SetFullScale+0x12>
 8002bd0:	2904      	cmp	r1, #4
 8002bd2:	dd09      	ble.n	8002be8 <LSM6DSL_ACC_SetFullScale+0x1e>
 8002bd4:	2908      	cmp	r1, #8
 8002bd6:	dc09      	bgt.n	8002bec <LSM6DSL_ACC_SetFullScale+0x22>
 8002bd8:	2103      	movs	r1, #3
 8002bda:	e000      	b.n	8002bde <LSM6DSL_ACC_SetFullScale+0x14>
 8002bdc:	2100      	movs	r1, #0
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002bde:	301c      	adds	r0, #28
 8002be0:	f000 fbaa 	bl	8003338 <lsm6dsl_xl_full_scale_set>
 8002be4:	b920      	cbnz	r0, 8002bf0 <LSM6DSL_ACC_SetFullScale+0x26>
}
 8002be6:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSL_4g
 8002be8:	2102      	movs	r1, #2
 8002bea:	e7f8      	b.n	8002bde <LSM6DSL_ACC_SetFullScale+0x14>
 8002bec:	2101      	movs	r1, #1
 8002bee:	e7f6      	b.n	8002bde <LSM6DSL_ACC_SetFullScale+0x14>
    return LSM6DSL_ERROR;
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	e7f7      	b.n	8002be6 <LSM6DSL_ACC_SetFullScale+0x1c>

08002bf6 <LSM6DSL_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8002bf6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00b      	beq.n	8002c16 <LSM6DSL_GYRO_Enable+0x20>
{
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	4604      	mov	r4, r0
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8002c02:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8002c06:	301c      	adds	r0, #28
 8002c08:	f000 fc67 	bl	80034da <lsm6dsl_gy_data_rate_set>
 8002c0c:	b928      	cbnz	r0, 8002c1a <LSM6DSL_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8002c14:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 8002c16:	2000      	movs	r0, #0
}
 8002c18:	4770      	bx	lr
    return LSM6DSL_ERROR;
 8002c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1e:	e7f9      	b.n	8002c14 <LSM6DSL_GYRO_Enable+0x1e>

08002c20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
{
 8002c20:	b508      	push	{r3, lr}
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8002c22:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002c26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d939      	bls.n	8002ca4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x84>
 8002c30:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002c34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d938      	bls.n	8002cb0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002c3e:	eddf 7a26 	vldr	s15, [pc, #152]	; 8002cd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb8>
 8002c42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	d933      	bls.n	8002cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8002c4c:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002cdc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002c50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	d92e      	bls.n	8002cb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x98>
 8002c5a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002ce0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8002c5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	d929      	bls.n	8002cbc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8002c68:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002ce4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 8002c6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d924      	bls.n	8002cc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 8002c76:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002ce8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 8002c7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d91f      	bls.n	8002cc4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8002c84:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002cec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 8002c88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	d91a      	bls.n	8002cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8002c92:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002cf0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 8002c96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	d815      	bhi.n	8002ccc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8002ca0:	2109      	movs	r1, #9
 8002ca2:	e000      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002ca4:	2101      	movs	r1, #1
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002ca6:	301c      	adds	r0, #28
 8002ca8:	f000 fc17 	bl	80034da <lsm6dsl_gy_data_rate_set>
 8002cac:	b980      	cbnz	r0, 8002cd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb0>
}
 8002cae:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	e7f8      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002cb4:	2103      	movs	r1, #3
 8002cb6:	e7f6      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002cb8:	2104      	movs	r1, #4
 8002cba:	e7f4      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	e7f2      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002cc0:	2106      	movs	r1, #6
 8002cc2:	e7f0      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002cc4:	2107      	movs	r1, #7
 8002cc6:	e7ee      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002cc8:	2108      	movs	r1, #8
 8002cca:	e7ec      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8002ccc:	210a      	movs	r1, #10
 8002cce:	e7ea      	b.n	8002ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSL_ERROR;
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	e7eb      	b.n	8002cae <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 8002cd6:	bf00      	nop
 8002cd8:	42500000 	.word	0x42500000
 8002cdc:	42d00000 	.word	0x42d00000
 8002ce0:	43500000 	.word	0x43500000
 8002ce4:	43d00000 	.word	0x43d00000
 8002ce8:	44504000 	.word	0x44504000
 8002cec:	44cf8000 	.word	0x44cf8000
 8002cf0:	45502000 	.word	0x45502000

08002cf4 <LSM6DSL_GYRO_SetOutputDataRate>:
{
 8002cf4:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 8002cf6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <LSM6DSL_GYRO_SetOutputDataRate+0x10>
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002cfe:	f7ff fe6b 	bl	80029d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
}
 8002d02:	bd08      	pop	{r3, pc}
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002d04:	f7ff ff8c 	bl	8002c20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8002d08:	e7fb      	b.n	8002d02 <LSM6DSL_GYRO_SetOutputDataRate+0xe>

08002d0a <LSM6DSL_Init>:
{
 8002d0a:	b538      	push	{r3, r4, r5, lr}
 8002d0c:	4605      	mov	r5, r0
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002d0e:	f100 041c 	add.w	r4, r0, #28
 8002d12:	2101      	movs	r1, #1
 8002d14:	4620      	mov	r0, r4
 8002d16:	f000 fc61 	bl	80035dc <lsm6dsl_auto_increment_set>
 8002d1a:	bb38      	cbnz	r0, 8002d6c <LSM6DSL_Init+0x62>
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 fc2e 	bl	8003580 <lsm6dsl_block_data_update_set>
 8002d24:	bb28      	cbnz	r0, 8002d72 <LSM6DSL_Init+0x68>
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002d26:	2100      	movs	r1, #0
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 fc70 	bl	800360e <lsm6dsl_fifo_mode_set>
 8002d2e:	bb18      	cbnz	r0, 8002d78 <LSM6DSL_Init+0x6e>
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002d30:	2304      	movs	r3, #4
 8002d32:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002d36:	2100      	movs	r1, #0
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f000 fb38 	bl	80033ae <lsm6dsl_xl_data_rate_set>
 8002d3e:	b9f0      	cbnz	r0, 8002d7e <LSM6DSL_Init+0x74>
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002d40:	2100      	movs	r1, #0
 8002d42:	4620      	mov	r0, r4
 8002d44:	f000 faf8 	bl	8003338 <lsm6dsl_xl_full_scale_set>
 8002d48:	b9e0      	cbnz	r0, 8002d84 <LSM6DSL_Init+0x7a>
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002d50:	2100      	movs	r1, #0
 8002d52:	4620      	mov	r0, r4
 8002d54:	f000 fbc1 	bl	80034da <lsm6dsl_gy_data_rate_set>
 8002d58:	b9b8      	cbnz	r0, 8002d8a <LSM6DSL_Init+0x80>
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002d5a:	2106      	movs	r1, #6
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f000 fb7c 	bl	800345a <lsm6dsl_gy_full_scale_set>
 8002d62:	b9a8      	cbnz	r0, 8002d90 <LSM6DSL_Init+0x86>
  pObj->is_initialized = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSL_ERROR;
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	e7fb      	b.n	8002d6a <LSM6DSL_Init+0x60>
    return LSM6DSL_ERROR;
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295
 8002d76:	e7f8      	b.n	8002d6a <LSM6DSL_Init+0x60>
    return LSM6DSL_ERROR;
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e7f5      	b.n	8002d6a <LSM6DSL_Init+0x60>
    return LSM6DSL_ERROR;
 8002d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d82:	e7f2      	b.n	8002d6a <LSM6DSL_Init+0x60>
    return LSM6DSL_ERROR;
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	e7ef      	b.n	8002d6a <LSM6DSL_Init+0x60>
    return LSM6DSL_ERROR;
 8002d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8e:	e7ec      	b.n	8002d6a <LSM6DSL_Init+0x60>
    return LSM6DSL_ERROR;
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	e7e9      	b.n	8002d6a <LSM6DSL_Init+0x60>

08002d96 <LSM6DSL_GYRO_SetFullScale>:
{
 8002d96:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8002d98:	297d      	cmp	r1, #125	; 0x7d
 8002d9a:	dd09      	ble.n	8002db0 <LSM6DSL_GYRO_SetFullScale+0x1a>
 8002d9c:	29fa      	cmp	r1, #250	; 0xfa
 8002d9e:	dd0d      	ble.n	8002dbc <LSM6DSL_GYRO_SetFullScale+0x26>
 8002da0:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8002da4:	dd0c      	ble.n	8002dc0 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8002da6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002daa:	dc0b      	bgt.n	8002dc4 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8002dac:	2104      	movs	r1, #4
 8002dae:	e000      	b.n	8002db2 <LSM6DSL_GYRO_SetFullScale+0x1c>
 8002db0:	2101      	movs	r1, #1
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002db2:	301c      	adds	r0, #28
 8002db4:	f000 fb51 	bl	800345a <lsm6dsl_gy_full_scale_set>
 8002db8:	b930      	cbnz	r0, 8002dc8 <LSM6DSL_GYRO_SetFullScale+0x32>
}
 8002dba:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	e7f8      	b.n	8002db2 <LSM6DSL_GYRO_SetFullScale+0x1c>
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	e7f6      	b.n	8002db2 <LSM6DSL_GYRO_SetFullScale+0x1c>
 8002dc4:	2106      	movs	r1, #6
 8002dc6:	e7f4      	b.n	8002db2 <LSM6DSL_GYRO_SetFullScale+0x1c>
    return LSM6DSL_ERROR;
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	e7f5      	b.n	8002dba <LSM6DSL_GYRO_SetFullScale+0x24>

08002dce <LSM6DSL_ReadID>:
{
 8002dce:	b508      	push	{r3, lr}
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002dd0:	301c      	adds	r0, #28
 8002dd2:	f000 fbfc 	bl	80035ce <lsm6dsl_device_id_get>
 8002dd6:	b900      	cbnz	r0, 8002dda <LSM6DSL_ReadID+0xc>
}
 8002dd8:	bd08      	pop	{r3, pc}
    return LSM6DSL_ERROR;
 8002dda:	f04f 30ff 	mov.w	r0, #4294967295
 8002dde:	e7fb      	b.n	8002dd8 <LSM6DSL_ReadID+0xa>

08002de0 <LSM6DSL_ACC_Disable>:
{
 8002de0:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8002de2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002de6:	b90b      	cbnz	r3, 8002dec <LSM6DSL_ACC_Disable+0xc>
    return LSM6DSL_OK;
 8002de8:	2000      	movs	r0, #0
}
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	4604      	mov	r4, r0
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8002dee:	f100 051c 	add.w	r5, r0, #28
 8002df2:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 faf2 	bl	80033e0 <lsm6dsl_xl_data_rate_get>
 8002dfc:	b938      	cbnz	r0, 8002e0e <LSM6DSL_ACC_Disable+0x2e>
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4628      	mov	r0, r5
 8002e02:	f000 fad4 	bl	80033ae <lsm6dsl_xl_data_rate_set>
 8002e06:	b928      	cbnz	r0, 8002e14 <LSM6DSL_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8002e08:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return LSM6DSL_OK;
 8002e0c:	e7ed      	b.n	8002dea <LSM6DSL_ACC_Disable+0xa>
    return LSM6DSL_ERROR;
 8002e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e12:	e7ea      	b.n	8002dea <LSM6DSL_ACC_Disable+0xa>
    return LSM6DSL_ERROR;
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	e7e7      	b.n	8002dea <LSM6DSL_ACC_Disable+0xa>
	...

08002e1c <LSM6DSL_ACC_GetOutputDataRate>:
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	460c      	mov	r4, r1
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002e22:	f10d 0107 	add.w	r1, sp, #7
 8002e26:	301c      	adds	r0, #28
 8002e28:	f000 fada 	bl	80033e0 <lsm6dsl_xl_data_rate_get>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d132      	bne.n	8002e96 <LSM6DSL_ACC_GetOutputDataRate+0x7a>
 8002e30:	4602      	mov	r2, r0
  switch (odr_low_level)
 8002e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e36:	2b0b      	cmp	r3, #11
 8002e38:	d830      	bhi.n	8002e9c <LSM6DSL_ACC_GetOutputDataRate+0x80>
 8002e3a:	e8df f003 	tbb	[pc, r3]
 8002e3e:	0e06      	.short	0x0e06
 8002e40:	1a171411 	.word	0x1a171411
 8002e44:	2623201d 	.word	0x2623201d
 8002e48:	0b29      	.short	0x0b29
      *Odr = 0.0f;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6023      	str	r3, [r4, #0]
}
 8002e4e:	4610      	mov	r0, r2
 8002e50:	b002      	add	sp, #8
 8002e52:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <LSM6DSL_ACC_GetOutputDataRate+0x88>)
 8002e56:	6023      	str	r3, [r4, #0]
      break;
 8002e58:	e7f9      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 12.5f;
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <LSM6DSL_ACC_GetOutputDataRate+0x8c>)
 8002e5c:	6023      	str	r3, [r4, #0]
      break;
 8002e5e:	e7f6      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <LSM6DSL_ACC_GetOutputDataRate+0x90>)
 8002e62:	6023      	str	r3, [r4, #0]
      break;
 8002e64:	e7f3      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <LSM6DSL_ACC_GetOutputDataRate+0x94>)
 8002e68:	6023      	str	r3, [r4, #0]
      break;
 8002e6a:	e7f0      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <LSM6DSL_ACC_GetOutputDataRate+0x98>)
 8002e6e:	6023      	str	r3, [r4, #0]
      break;
 8002e70:	e7ed      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <LSM6DSL_ACC_GetOutputDataRate+0x9c>)
 8002e74:	6023      	str	r3, [r4, #0]
      break;
 8002e76:	e7ea      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <LSM6DSL_ACC_GetOutputDataRate+0xa0>)
 8002e7a:	6023      	str	r3, [r4, #0]
      break;
 8002e7c:	e7e7      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <LSM6DSL_ACC_GetOutputDataRate+0xa4>)
 8002e80:	6023      	str	r3, [r4, #0]
      break;
 8002e82:	e7e4      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 1660.0f;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <LSM6DSL_ACC_GetOutputDataRate+0xa8>)
 8002e86:	6023      	str	r3, [r4, #0]
      break;
 8002e88:	e7e1      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 3330.0f;
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <LSM6DSL_ACC_GetOutputDataRate+0xac>)
 8002e8c:	6023      	str	r3, [r4, #0]
      break;
 8002e8e:	e7de      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 6660.0f;
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <LSM6DSL_ACC_GetOutputDataRate+0xb0>)
 8002e92:	6023      	str	r3, [r4, #0]
      break;
 8002e94:	e7db      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
    return LSM6DSL_ERROR;
 8002e96:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9a:	e7d8      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
  switch (odr_low_level)
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	e7d5      	b.n	8002e4e <LSM6DSL_ACC_GetOutputDataRate+0x32>
 8002ea2:	bf00      	nop
 8002ea4:	3fcccccd 	.word	0x3fcccccd
 8002ea8:	41480000 	.word	0x41480000
 8002eac:	41d00000 	.word	0x41d00000
 8002eb0:	42500000 	.word	0x42500000
 8002eb4:	42d00000 	.word	0x42d00000
 8002eb8:	43500000 	.word	0x43500000
 8002ebc:	43d00000 	.word	0x43d00000
 8002ec0:	44504000 	.word	0x44504000
 8002ec4:	44cf8000 	.word	0x44cf8000
 8002ec8:	45502000 	.word	0x45502000
 8002ecc:	45d02000 	.word	0x45d02000

08002ed0 <LSM6DSL_ACC_GetSensitivity>:
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002ed6:	f10d 0107 	add.w	r1, sp, #7
 8002eda:	301c      	adds	r0, #28
 8002edc:	f000 fa45 	bl	800336a <lsm6dsl_xl_full_scale_get>
 8002ee0:	b9a0      	cbnz	r0, 8002f0c <LSM6DSL_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 8002ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d813      	bhi.n	8002f12 <LSM6DSL_ACC_GetSensitivity+0x42>
 8002eea:	e8df f003 	tbb	[pc, r3]
 8002eee:	0c02      	.short	0x0c02
 8002ef0:	0906      	.short	0x0906
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <LSM6DSL_ACC_GetSensitivity+0x48>)
 8002ef4:	6023      	str	r3, [r4, #0]
}
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <LSM6DSL_ACC_GetSensitivity+0x4c>)
 8002efc:	6023      	str	r3, [r4, #0]
      break;
 8002efe:	e7fa      	b.n	8002ef6 <LSM6DSL_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <LSM6DSL_ACC_GetSensitivity+0x50>)
 8002f02:	6023      	str	r3, [r4, #0]
      break;
 8002f04:	e7f7      	b.n	8002ef6 <LSM6DSL_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <LSM6DSL_ACC_GetSensitivity+0x54>)
 8002f08:	6023      	str	r3, [r4, #0]
      break;
 8002f0a:	e7f4      	b.n	8002ef6 <LSM6DSL_ACC_GetSensitivity+0x26>
    return LSM6DSL_ERROR;
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e7f1      	b.n	8002ef6 <LSM6DSL_ACC_GetSensitivity+0x26>
  switch (full_scale)
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	e7ee      	b.n	8002ef6 <LSM6DSL_ACC_GetSensitivity+0x26>
 8002f18:	3d79db23 	.word	0x3d79db23
 8002f1c:	3df9db23 	.word	0x3df9db23
 8002f20:	3e79db23 	.word	0x3e79db23
 8002f24:	3ef9db23 	.word	0x3ef9db23

08002f28 <LSM6DSL_ACC_GetFullScale>:
{
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8002f2e:	f10d 0107 	add.w	r1, sp, #7
 8002f32:	301c      	adds	r0, #28
 8002f34:	f000 fa19 	bl	800336a <lsm6dsl_xl_full_scale_get>
 8002f38:	b9a0      	cbnz	r0, 8002f64 <LSM6DSL_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 8002f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d813      	bhi.n	8002f6a <LSM6DSL_ACC_GetFullScale+0x42>
 8002f42:	e8df f003 	tbb	[pc, r3]
 8002f46:	0c02      	.short	0x0c02
 8002f48:	0906      	.short	0x0906
      *FullScale =  2;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	6023      	str	r3, [r4, #0]
}
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8002f52:	2304      	movs	r3, #4
 8002f54:	6023      	str	r3, [r4, #0]
      break;
 8002f56:	e7fa      	b.n	8002f4e <LSM6DSL_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	6023      	str	r3, [r4, #0]
      break;
 8002f5c:	e7f7      	b.n	8002f4e <LSM6DSL_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8002f5e:	2310      	movs	r3, #16
 8002f60:	6023      	str	r3, [r4, #0]
      break;
 8002f62:	e7f4      	b.n	8002f4e <LSM6DSL_ACC_GetFullScale+0x26>
    return LSM6DSL_ERROR;
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	e7f1      	b.n	8002f4e <LSM6DSL_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	e7ee      	b.n	8002f4e <LSM6DSL_ACC_GetFullScale+0x26>

08002f70 <LSM6DSL_ACC_GetAxesRaw>:
{
 8002f70:	b510      	push	{r4, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	460c      	mov	r4, r1
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002f76:	4669      	mov	r1, sp
 8002f78:	301c      	adds	r0, #28
 8002f7a:	f000 fb21 	bl	80035c0 <lsm6dsl_acceleration_raw_get>
 8002f7e:	b950      	cbnz	r0, 8002f96 <LSM6DSL_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8002f80:	f9bd 3000 	ldrsh.w	r3, [sp]
 8002f84:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8002f86:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002f8a:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002f8c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002f90:	80a3      	strh	r3, [r4, #4]
}
 8002f92:	b002      	add	sp, #8
 8002f94:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	e7fa      	b.n	8002f92 <LSM6DSL_ACC_GetAxesRaw+0x22>

08002f9c <LSM6DSL_ACC_GetAxes>:
{
 8002f9c:	b530      	push	{r4, r5, lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9301      	str	r3, [sp, #4]
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002fa8:	a902      	add	r1, sp, #8
 8002faa:	301c      	adds	r0, #28
 8002fac:	f000 fb08 	bl	80035c0 <lsm6dsl_acceleration_raw_get>
 8002fb0:	bb60      	cbnz	r0, 800300c <LSM6DSL_ACC_GetAxes+0x70>
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002fb2:	a901      	add	r1, sp, #4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff ff8b 	bl	8002ed0 <LSM6DSL_ACC_GetSensitivity>
 8002fba:	bb50      	cbnz	r0, 8003012 <LSM6DSL_ACC_GetAxes+0x76>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002fbc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002fc0:	ee07 3a10 	vmov	s14, r3
 8002fc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fc8:	eddd 7a01 	vldr	s15, [sp, #4]
 8002fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002fd4:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fd8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002fdc:	ee07 3a10 	vmov	s14, r3
 8002fe0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002fec:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002ff0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002ff4:	ee07 3a10 	vmov	s14, r3
 8002ff8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003004:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003008:	b005      	add	sp, #20
 800300a:	bd30      	pop	{r4, r5, pc}
    return LSM6DSL_ERROR;
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	e7fa      	b.n	8003008 <LSM6DSL_ACC_GetAxes+0x6c>
    return LSM6DSL_ERROR;
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	e7f7      	b.n	8003008 <LSM6DSL_ACC_GetAxes+0x6c>

08003018 <LSM6DSL_GYRO_Disable>:
{
 8003018:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 800301a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800301e:	b90b      	cbnz	r3, 8003024 <LSM6DSL_GYRO_Disable+0xc>
    return LSM6DSL_OK;
 8003020:	2000      	movs	r0, #0
}
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	4604      	mov	r4, r0
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003026:	f100 051c 	add.w	r5, r0, #28
 800302a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 800302e:	4628      	mov	r0, r5
 8003030:	f000 fa6c 	bl	800350c <lsm6dsl_gy_data_rate_get>
 8003034:	b938      	cbnz	r0, 8003046 <LSM6DSL_GYRO_Disable+0x2e>
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003036:	2100      	movs	r1, #0
 8003038:	4628      	mov	r0, r5
 800303a:	f000 fa4e 	bl	80034da <lsm6dsl_gy_data_rate_set>
 800303e:	b928      	cbnz	r0, 800304c <LSM6DSL_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 8003040:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return LSM6DSL_OK;
 8003044:	e7ed      	b.n	8003022 <LSM6DSL_GYRO_Disable+0xa>
    return LSM6DSL_ERROR;
 8003046:	f04f 30ff 	mov.w	r0, #4294967295
 800304a:	e7ea      	b.n	8003022 <LSM6DSL_GYRO_Disable+0xa>
    return LSM6DSL_ERROR;
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	e7e7      	b.n	8003022 <LSM6DSL_GYRO_Disable+0xa>

08003052 <LSM6DSL_DeInit>:
{
 8003052:	b510      	push	{r4, lr}
 8003054:	4604      	mov	r4, r0
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003056:	f7ff fec3 	bl	8002de0 <LSM6DSL_ACC_Disable>
 800305a:	b950      	cbnz	r0, 8003072 <LSM6DSL_DeInit+0x20>
  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 800305c:	4620      	mov	r0, r4
 800305e:	f7ff ffdb 	bl	8003018 <LSM6DSL_GYRO_Disable>
 8003062:	b948      	cbnz	r0, 8003078 <LSM6DSL_DeInit+0x26>
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003064:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003068:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  pObj->is_initialized = 0;
 800306c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8003070:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003072:	f04f 30ff 	mov.w	r0, #4294967295
 8003076:	e7fb      	b.n	8003070 <LSM6DSL_DeInit+0x1e>
    return LSM6DSL_ERROR;
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	e7f8      	b.n	8003070 <LSM6DSL_DeInit+0x1e>
	...

08003080 <LSM6DSL_GYRO_GetOutputDataRate>:
{
 8003080:	b510      	push	{r4, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	460c      	mov	r4, r1
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003086:	f10d 0107 	add.w	r1, sp, #7
 800308a:	301c      	adds	r0, #28
 800308c:	f000 fa3e 	bl	800350c <lsm6dsl_gy_data_rate_get>
 8003090:	2800      	cmp	r0, #0
 8003092:	d12f      	bne.n	80030f4 <LSM6DSL_GYRO_GetOutputDataRate+0x74>
 8003094:	4602      	mov	r2, r0
  switch (odr_low_level)
 8003096:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800309a:	2b0a      	cmp	r3, #10
 800309c:	d82d      	bhi.n	80030fa <LSM6DSL_GYRO_GetOutputDataRate+0x7a>
 800309e:	e8df f003 	tbb	[pc, r3]
 80030a2:	0b06      	.short	0x0b06
 80030a4:	1714110e 	.word	0x1714110e
 80030a8:	23201d1a 	.word	0x23201d1a
 80030ac:	26          	.byte	0x26
 80030ad:	00          	.byte	0x00
      *Odr = 0.0f;
 80030ae:	2300      	movs	r3, #0
 80030b0:	6023      	str	r3, [r4, #0]
}
 80030b2:	4610      	mov	r0, r2
 80030b4:	b002      	add	sp, #8
 80030b6:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <LSM6DSL_GYRO_GetOutputDataRate+0x80>)
 80030ba:	6023      	str	r3, [r4, #0]
      break;
 80030bc:	e7f9      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <LSM6DSL_GYRO_GetOutputDataRate+0x84>)
 80030c0:	6023      	str	r3, [r4, #0]
      break;
 80030c2:	e7f6      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <LSM6DSL_GYRO_GetOutputDataRate+0x88>)
 80030c6:	6023      	str	r3, [r4, #0]
      break;
 80030c8:	e7f3      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <LSM6DSL_GYRO_GetOutputDataRate+0x8c>)
 80030cc:	6023      	str	r3, [r4, #0]
      break;
 80030ce:	e7f0      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <LSM6DSL_GYRO_GetOutputDataRate+0x90>)
 80030d2:	6023      	str	r3, [r4, #0]
      break;
 80030d4:	e7ed      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <LSM6DSL_GYRO_GetOutputDataRate+0x94>)
 80030d8:	6023      	str	r3, [r4, #0]
      break;
 80030da:	e7ea      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <LSM6DSL_GYRO_GetOutputDataRate+0x98>)
 80030de:	6023      	str	r3, [r4, #0]
      break;
 80030e0:	e7e7      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  1660.0f;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <LSM6DSL_GYRO_GetOutputDataRate+0x9c>)
 80030e4:	6023      	str	r3, [r4, #0]
      break;
 80030e6:	e7e4      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  3330.0f;
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <LSM6DSL_GYRO_GetOutputDataRate+0xa0>)
 80030ea:	6023      	str	r3, [r4, #0]
      break;
 80030ec:	e7e1      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  6660.0f;
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <LSM6DSL_GYRO_GetOutputDataRate+0xa4>)
 80030f0:	6023      	str	r3, [r4, #0]
      break;
 80030f2:	e7de      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
    return LSM6DSL_ERROR;
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	e7db      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
  switch (odr_low_level)
 80030fa:	f04f 32ff 	mov.w	r2, #4294967295
 80030fe:	e7d8      	b.n	80030b2 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
 8003100:	41480000 	.word	0x41480000
 8003104:	41d00000 	.word	0x41d00000
 8003108:	42500000 	.word	0x42500000
 800310c:	42d00000 	.word	0x42d00000
 8003110:	43500000 	.word	0x43500000
 8003114:	43d00000 	.word	0x43d00000
 8003118:	44504000 	.word	0x44504000
 800311c:	44cf8000 	.word	0x44cf8000
 8003120:	45502000 	.word	0x45502000
 8003124:	45d02000 	.word	0x45d02000

08003128 <LSM6DSL_GYRO_GetSensitivity>:
{
 8003128:	b510      	push	{r4, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800312e:	f10d 0107 	add.w	r1, sp, #7
 8003132:	301c      	adds	r0, #28
 8003134:	f000 f9aa 	bl	800348c <lsm6dsl_gy_full_scale_get>
 8003138:	b9c8      	cbnz	r0, 800316e <LSM6DSL_GYRO_GetSensitivity+0x46>
  switch (full_scale)
 800313a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d818      	bhi.n	8003174 <LSM6DSL_GYRO_GetSensitivity+0x4c>
 8003142:	e8df f003 	tbb	[pc, r3]
 8003146:	0408      	.short	0x0408
 8003148:	170e170b 	.word	0x170e170b
 800314c:	11          	.byte	0x11
 800314d:	00          	.byte	0x00
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <LSM6DSL_GYRO_GetSensitivity+0x54>)
 8003150:	6023      	str	r3, [r4, #0]
}
 8003152:	b002      	add	sp, #8
 8003154:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <LSM6DSL_GYRO_GetSensitivity+0x58>)
 8003158:	6023      	str	r3, [r4, #0]
      break;
 800315a:	e7fa      	b.n	8003152 <LSM6DSL_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <LSM6DSL_GYRO_GetSensitivity+0x5c>)
 800315e:	6023      	str	r3, [r4, #0]
      break;
 8003160:	e7f7      	b.n	8003152 <LSM6DSL_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <LSM6DSL_GYRO_GetSensitivity+0x60>)
 8003164:	6023      	str	r3, [r4, #0]
      break;
 8003166:	e7f4      	b.n	8003152 <LSM6DSL_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <LSM6DSL_GYRO_GetSensitivity+0x64>)
 800316a:	6023      	str	r3, [r4, #0]
      break;
 800316c:	e7f1      	b.n	8003152 <LSM6DSL_GYRO_GetSensitivity+0x2a>
    return LSM6DSL_ERROR;
 800316e:	f04f 30ff 	mov.w	r0, #4294967295
 8003172:	e7ee      	b.n	8003152 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  switch (full_scale)
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	e7eb      	b.n	8003152 <LSM6DSL_GYRO_GetSensitivity+0x2a>
 800317a:	bf00      	nop
 800317c:	408c0000 	.word	0x408c0000
 8003180:	410c0000 	.word	0x410c0000
 8003184:	418c0000 	.word	0x418c0000
 8003188:	420c0000 	.word	0x420c0000
 800318c:	428c0000 	.word	0x428c0000

08003190 <LSM6DSL_GYRO_GetFullScale>:
{
 8003190:	b510      	push	{r4, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003196:	f10d 0107 	add.w	r1, sp, #7
 800319a:	301c      	adds	r0, #28
 800319c:	f000 f976 	bl	800348c <lsm6dsl_gy_full_scale_get>
 80031a0:	b9e0      	cbnz	r0, 80031dc <LSM6DSL_GYRO_GetFullScale+0x4c>
  switch (fs_low_level)
 80031a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d81b      	bhi.n	80031e2 <LSM6DSL_GYRO_GetFullScale+0x52>
 80031aa:	e8df f003 	tbb	[pc, r3]
 80031ae:	0408      	.short	0x0408
 80031b0:	1a0f1a0b 	.word	0x1a0f1a0b
 80031b4:	13          	.byte	0x13
 80031b5:	00          	.byte	0x00
      *FullScale =  125;
 80031b6:	237d      	movs	r3, #125	; 0x7d
 80031b8:	6023      	str	r3, [r4, #0]
}
 80031ba:	b002      	add	sp, #8
 80031bc:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 80031be:	23fa      	movs	r3, #250	; 0xfa
 80031c0:	6023      	str	r3, [r4, #0]
      break;
 80031c2:	e7fa      	b.n	80031ba <LSM6DSL_GYRO_GetFullScale+0x2a>
      *FullScale =  500;
 80031c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031c8:	6023      	str	r3, [r4, #0]
      break;
 80031ca:	e7f6      	b.n	80031ba <LSM6DSL_GYRO_GetFullScale+0x2a>
      *FullScale = 1000;
 80031cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d0:	6023      	str	r3, [r4, #0]
      break;
 80031d2:	e7f2      	b.n	80031ba <LSM6DSL_GYRO_GetFullScale+0x2a>
      *FullScale = 2000;
 80031d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031d8:	6023      	str	r3, [r4, #0]
      break;
 80031da:	e7ee      	b.n	80031ba <LSM6DSL_GYRO_GetFullScale+0x2a>
    return LSM6DSL_ERROR;
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	e7eb      	b.n	80031ba <LSM6DSL_GYRO_GetFullScale+0x2a>
  switch (fs_low_level)
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	e7e8      	b.n	80031ba <LSM6DSL_GYRO_GetFullScale+0x2a>

080031e8 <LSM6DSL_GYRO_GetAxesRaw>:
{
 80031e8:	b510      	push	{r4, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80031ee:	4669      	mov	r1, sp
 80031f0:	301c      	adds	r0, #28
 80031f2:	f000 f9de 	bl	80035b2 <lsm6dsl_angular_rate_raw_get>
 80031f6:	b950      	cbnz	r0, 800320e <LSM6DSL_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80031f8:	f9bd 3000 	ldrsh.w	r3, [sp]
 80031fc:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80031fe:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003202:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003204:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003208:	80a3      	strh	r3, [r4, #4]
}
 800320a:	b002      	add	sp, #8
 800320c:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 800320e:	f04f 30ff 	mov.w	r0, #4294967295
 8003212:	e7fa      	b.n	800320a <LSM6DSL_GYRO_GetAxesRaw+0x22>

08003214 <LSM6DSL_GYRO_GetAxes>:
{
 8003214:	b530      	push	{r4, r5, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	4605      	mov	r5, r0
 800321a:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800321c:	a902      	add	r1, sp, #8
 800321e:	301c      	adds	r0, #28
 8003220:	f000 f9c7 	bl	80035b2 <lsm6dsl_angular_rate_raw_get>
 8003224:	bb60      	cbnz	r0, 8003280 <LSM6DSL_GYRO_GetAxes+0x6c>
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003226:	a901      	add	r1, sp, #4
 8003228:	4628      	mov	r0, r5
 800322a:	f7ff ff7d 	bl	8003128 <LSM6DSL_GYRO_GetSensitivity>
 800322e:	bb50      	cbnz	r0, 8003286 <LSM6DSL_GYRO_GetAxes+0x72>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003230:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003234:	ee07 3a10 	vmov	s14, r3
 8003238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800323c:	eddd 7a01 	vldr	s15, [sp, #4]
 8003240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003244:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003248:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800324c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003250:	ee07 3a10 	vmov	s14, r3
 8003254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003260:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003264:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003268:	ee07 3a10 	vmov	s14, r3
 800326c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003278:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800327c:	b005      	add	sp, #20
 800327e:	bd30      	pop	{r4, r5, pc}
    return LSM6DSL_ERROR;
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	e7fa      	b.n	800327c <LSM6DSL_GYRO_GetAxes+0x68>
    return LSM6DSL_ERROR;
 8003286:	f04f 30ff 	mov.w	r0, #4294967295
 800328a:	e7f7      	b.n	800327c <LSM6DSL_GYRO_GetAxes+0x68>

0800328c <LSM6DSL_Write_Reg>:
{
 800328c:	b500      	push	{lr}
 800328e:	b083      	sub	sp, #12
 8003290:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003294:	2301      	movs	r3, #1
 8003296:	f10d 0207 	add.w	r2, sp, #7
 800329a:	301c      	adds	r0, #28
 800329c:	f000 f847 	bl	800332e <lsm6dsl_write_reg>
 80032a0:	b910      	cbnz	r0, 80032a8 <LSM6DSL_Write_Reg+0x1c>
}
 80032a2:	b003      	add	sp, #12
 80032a4:	f85d fb04 	ldr.w	pc, [sp], #4
    return LSM6DSL_ERROR;
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e7f9      	b.n	80032a2 <LSM6DSL_Write_Reg+0x16>
	...

080032b0 <LSM6DSL_RegisterBusIO>:
  if (pObj == NULL)
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d029      	beq.n	8003308 <LSM6DSL_RegisterBusIO+0x58>
{
 80032b4:	b510      	push	{r4, lr}
 80032b6:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80032b8:	680b      	ldr	r3, [r1, #0]
 80032ba:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80032bc:	684a      	ldr	r2, [r1, #4]
 80032be:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80032c0:	688a      	ldr	r2, [r1, #8]
 80032c2:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80032c4:	7b0a      	ldrb	r2, [r1, #12]
 80032c6:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80032c8:	690a      	ldr	r2, [r1, #16]
 80032ca:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80032cc:	694a      	ldr	r2, [r1, #20]
 80032ce:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80032d0:	698a      	ldr	r2, [r1, #24]
 80032d2:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <LSM6DSL_RegisterBusIO+0x6c>)
 80032d6:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <LSM6DSL_RegisterBusIO+0x70>)
 80032da:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80032dc:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80032de:	b1b3      	cbz	r3, 800330e <LSM6DSL_RegisterBusIO+0x5e>
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80032e0:	4798      	blx	r3
 80032e2:	b9b8      	cbnz	r0, 8003314 <LSM6DSL_RegisterBusIO+0x64>
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80032e4:	68a3      	ldr	r3, [r4, #8]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d000      	beq.n	80032ec <LSM6DSL_RegisterBusIO+0x3c>
}
 80032ea:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80032ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1fa      	bne.n	80032ea <LSM6DSL_RegisterBusIO+0x3a>
          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80032f4:	220c      	movs	r2, #12
 80032f6:	2112      	movs	r1, #18
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ffc7 	bl	800328c <LSM6DSL_Write_Reg>
 80032fe:	2800      	cmp	r0, #0
 8003300:	d0f3      	beq.n	80032ea <LSM6DSL_RegisterBusIO+0x3a>
            ret = LSM6DSL_ERROR;
 8003302:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003306:	e7f0      	b.n	80032ea <LSM6DSL_RegisterBusIO+0x3a>
    ret = LSM6DSL_ERROR;
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
}
 800330c:	4770      	bx	lr
      ret = LSM6DSL_ERROR;
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
 8003312:	e7ea      	b.n	80032ea <LSM6DSL_RegisterBusIO+0x3a>
      ret = LSM6DSL_ERROR;
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	e7e7      	b.n	80032ea <LSM6DSL_RegisterBusIO+0x3a>
 800331a:	bf00      	nop
 800331c:	08002aa1 	.word	0x08002aa1
 8003320:	08002aab 	.word	0x08002aab

08003324 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003324:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003326:	6844      	ldr	r4, [r0, #4]
 8003328:	6880      	ldr	r0, [r0, #8]
 800332a:	47a0      	blx	r4
  return ret;
}
 800332c:	bd10      	pop	{r4, pc}

0800332e <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800332e:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003330:	6804      	ldr	r4, [r0, #0]
 8003332:	6880      	ldr	r0, [r0, #8]
 8003334:	47a0      	blx	r4
  return ret;
}
 8003336:	bd10      	pop	{r4, pc}

08003338 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8003338:	b530      	push	{r4, r5, lr}
 800333a:	b083      	sub	sp, #12
 800333c:	4604      	mov	r4, r0
 800333e:	460d      	mov	r5, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003340:	2301      	movs	r3, #1
 8003342:	aa01      	add	r2, sp, #4
 8003344:	2110      	movs	r1, #16
 8003346:	f7ff ffed 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 800334a:	b108      	cbz	r0, 8003350 <lsm6dsl_xl_full_scale_set+0x18>
    ctrl1_xl.fs_xl = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 800334c:	b003      	add	sp, #12
 800334e:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003350:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003354:	f365 0383 	bfi	r3, r5, #2, #2
 8003358:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800335c:	2301      	movs	r3, #1
 800335e:	aa01      	add	r2, sp, #4
 8003360:	2110      	movs	r1, #16
 8003362:	4620      	mov	r0, r4
 8003364:	f7ff ffe3 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 8003368:	e7f0      	b.n	800334c <lsm6dsl_xl_full_scale_set+0x14>

0800336a <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 800336a:	b510      	push	{r4, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	460c      	mov	r4, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003370:	2301      	movs	r3, #1
 8003372:	aa01      	add	r2, sp, #4
 8003374:	2110      	movs	r1, #16
 8003376:	f7ff ffd5 	bl	8003324 <lsm6dsl_read_reg>
  switch (ctrl1_xl.fs_xl) {
 800337a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800337e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003382:	2b03      	cmp	r3, #3
 8003384:	d810      	bhi.n	80033a8 <lsm6dsl_xl_full_scale_get+0x3e>
 8003386:	e8df f003 	tbb	[pc, r3]
 800338a:	0602      	.short	0x0602
 800338c:	0c09      	.short	0x0c09
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800338e:	2300      	movs	r3, #0
 8003390:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_XL_FS_ND;
      break;
  }

  return ret;
}
 8003392:	b002      	add	sp, #8
 8003394:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_16g;
 8003396:	2301      	movs	r3, #1
 8003398:	7023      	strb	r3, [r4, #0]
      break;
 800339a:	e7fa      	b.n	8003392 <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_4g;
 800339c:	2302      	movs	r3, #2
 800339e:	7023      	strb	r3, [r4, #0]
      break;
 80033a0:	e7f7      	b.n	8003392 <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_8g;
 80033a2:	2303      	movs	r3, #3
 80033a4:	7023      	strb	r3, [r4, #0]
      break;
 80033a6:	e7f4      	b.n	8003392 <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_XL_FS_ND;
 80033a8:	2304      	movs	r3, #4
 80033aa:	7023      	strb	r3, [r4, #0]
  return ret;
 80033ac:	e7f1      	b.n	8003392 <lsm6dsl_xl_full_scale_get+0x28>

080033ae <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80033ae:	b530      	push	{r4, r5, lr}
 80033b0:	b083      	sub	sp, #12
 80033b2:	4604      	mov	r4, r0
 80033b4:	460d      	mov	r5, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80033b6:	2301      	movs	r3, #1
 80033b8:	aa01      	add	r2, sp, #4
 80033ba:	2110      	movs	r1, #16
 80033bc:	f7ff ffb2 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 80033c0:	b108      	cbz	r0, 80033c6 <lsm6dsl_xl_data_rate_set+0x18>
    ctrl1_xl.odr_xl = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 80033c2:	b003      	add	sp, #12
 80033c4:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.odr_xl = (uint8_t) val;
 80033c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033ca:	f365 1307 	bfi	r3, r5, #4, #4
 80033ce:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80033d2:	2301      	movs	r3, #1
 80033d4:	aa01      	add	r2, sp, #4
 80033d6:	2110      	movs	r1, #16
 80033d8:	4620      	mov	r0, r4
 80033da:	f7ff ffa8 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 80033de:	e7f0      	b.n	80033c2 <lsm6dsl_xl_data_rate_set+0x14>

080033e0 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 80033e0:	b510      	push	{r4, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	460c      	mov	r4, r1
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80033e6:	2301      	movs	r3, #1
 80033e8:	aa01      	add	r2, sp, #4
 80033ea:	2110      	movs	r1, #16
 80033ec:	f7ff ff9a 	bl	8003324 <lsm6dsl_read_reg>
  switch (ctrl1_xl.odr_xl) {
 80033f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	2b0b      	cmp	r3, #11
 80033f8:	d82c      	bhi.n	8003454 <lsm6dsl_xl_data_rate_get+0x74>
 80033fa:	e8df f003 	tbb	[pc, r3]
 80033fe:	0a06      	.short	0x0a06
 8003400:	1613100d 	.word	0x1613100d
 8003404:	221f1c19 	.word	0x221f1c19
 8003408:	2825      	.short	0x2825
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800340a:	2300      	movs	r3, #0
 800340c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_XL_ODR_ND;
      break;
  }

  return ret;
}
 800340e:	b002      	add	sp, #8
 8003410:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_XL_ODR_12Hz5;
 8003412:	2301      	movs	r3, #1
 8003414:	7023      	strb	r3, [r4, #0]
      break;
 8003416:	e7fa      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_26Hz;
 8003418:	2302      	movs	r3, #2
 800341a:	7023      	strb	r3, [r4, #0]
      break;
 800341c:	e7f7      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_52Hz;
 800341e:	2303      	movs	r3, #3
 8003420:	7023      	strb	r3, [r4, #0]
      break;
 8003422:	e7f4      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_104Hz;
 8003424:	2304      	movs	r3, #4
 8003426:	7023      	strb	r3, [r4, #0]
      break;
 8003428:	e7f1      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_208Hz;
 800342a:	2305      	movs	r3, #5
 800342c:	7023      	strb	r3, [r4, #0]
      break;
 800342e:	e7ee      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_416Hz;
 8003430:	2306      	movs	r3, #6
 8003432:	7023      	strb	r3, [r4, #0]
      break;
 8003434:	e7eb      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_833Hz;
 8003436:	2307      	movs	r3, #7
 8003438:	7023      	strb	r3, [r4, #0]
      break;
 800343a:	e7e8      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800343c:	2308      	movs	r3, #8
 800343e:	7023      	strb	r3, [r4, #0]
      break;
 8003440:	e7e5      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8003442:	2309      	movs	r3, #9
 8003444:	7023      	strb	r3, [r4, #0]
      break;
 8003446:	e7e2      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8003448:	230a      	movs	r3, #10
 800344a:	7023      	strb	r3, [r4, #0]
      break;
 800344c:	e7df      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_1Hz6;
 800344e:	230b      	movs	r3, #11
 8003450:	7023      	strb	r3, [r4, #0]
      break;
 8003452:	e7dc      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_ND;
 8003454:	230c      	movs	r3, #12
 8003456:	7023      	strb	r3, [r4, #0]
  return ret;
 8003458:	e7d9      	b.n	800340e <lsm6dsl_xl_data_rate_get+0x2e>

0800345a <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800345a:	b530      	push	{r4, r5, lr}
 800345c:	b083      	sub	sp, #12
 800345e:	4604      	mov	r4, r0
 8003460:	460d      	mov	r5, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003462:	2301      	movs	r3, #1
 8003464:	aa01      	add	r2, sp, #4
 8003466:	2111      	movs	r1, #17
 8003468:	f7ff ff5c 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 800346c:	b108      	cbz	r0, 8003472 <lsm6dsl_gy_full_scale_set+0x18>
    ctrl2_g.fs_g = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 800346e:	b003      	add	sp, #12
 8003470:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t) val;
 8003472:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003476:	f365 0343 	bfi	r3, r5, #1, #3
 800347a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800347e:	2301      	movs	r3, #1
 8003480:	aa01      	add	r2, sp, #4
 8003482:	2111      	movs	r1, #17
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff ff52 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 800348a:	e7f0      	b.n	800346e <lsm6dsl_gy_full_scale_set+0x14>

0800348c <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 800348c:	b510      	push	{r4, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	460c      	mov	r4, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003492:	2301      	movs	r3, #1
 8003494:	aa01      	add	r2, sp, #4
 8003496:	2111      	movs	r1, #17
 8003498:	f7ff ff44 	bl	8003324 <lsm6dsl_read_reg>
  switch (ctrl2_g.fs_g) {
 800349c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034a0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d815      	bhi.n	80034d4 <lsm6dsl_gy_full_scale_get+0x48>
 80034a8:	e8df f003 	tbb	[pc, r3]
 80034ac:	140b0804 	.word	0x140b0804
 80034b0:	140e      	.short	0x140e
 80034b2:	11          	.byte	0x11
 80034b3:	00          	.byte	0x00
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80034b4:	2300      	movs	r3, #0
 80034b6:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_GY_FS_ND;
      break;
  }

  return ret;
}
 80034b8:	b002      	add	sp, #8
 80034ba:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_125dps;
 80034bc:	2301      	movs	r3, #1
 80034be:	7023      	strb	r3, [r4, #0]
      break;
 80034c0:	e7fa      	b.n	80034b8 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_500dps;
 80034c2:	2302      	movs	r3, #2
 80034c4:	7023      	strb	r3, [r4, #0]
      break;
 80034c6:	e7f7      	b.n	80034b8 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_1000dps;
 80034c8:	2304      	movs	r3, #4
 80034ca:	7023      	strb	r3, [r4, #0]
      break;
 80034cc:	e7f4      	b.n	80034b8 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_2000dps;
 80034ce:	2306      	movs	r3, #6
 80034d0:	7023      	strb	r3, [r4, #0]
      break;
 80034d2:	e7f1      	b.n	80034b8 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_GY_FS_ND;
 80034d4:	2307      	movs	r3, #7
 80034d6:	7023      	strb	r3, [r4, #0]
  return ret;
 80034d8:	e7ee      	b.n	80034b8 <lsm6dsl_gy_full_scale_get+0x2c>

080034da <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80034da:	b530      	push	{r4, r5, lr}
 80034dc:	b083      	sub	sp, #12
 80034de:	4604      	mov	r4, r0
 80034e0:	460d      	mov	r5, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80034e2:	2301      	movs	r3, #1
 80034e4:	aa01      	add	r2, sp, #4
 80034e6:	2111      	movs	r1, #17
 80034e8:	f7ff ff1c 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 80034ec:	b108      	cbz	r0, 80034f2 <lsm6dsl_gy_data_rate_set+0x18>
    ctrl2_g.odr_g = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 80034ee:	b003      	add	sp, #12
 80034f0:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.odr_g = (uint8_t) val;
 80034f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034f6:	f365 1307 	bfi	r3, r5, #4, #4
 80034fa:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80034fe:	2301      	movs	r3, #1
 8003500:	aa01      	add	r2, sp, #4
 8003502:	2111      	movs	r1, #17
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff ff12 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 800350a:	e7f0      	b.n	80034ee <lsm6dsl_gy_data_rate_set+0x14>

0800350c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 800350c:	b510      	push	{r4, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	460c      	mov	r4, r1
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003512:	2301      	movs	r3, #1
 8003514:	aa01      	add	r2, sp, #4
 8003516:	2111      	movs	r1, #17
 8003518:	f7ff ff04 	bl	8003324 <lsm6dsl_read_reg>
  switch (ctrl2_g.odr_g) {
 800351c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d829      	bhi.n	800357a <lsm6dsl_gy_data_rate_get+0x6e>
 8003526:	e8df f003 	tbb	[pc, r3]
 800352a:	0a06      	.short	0x0a06
 800352c:	1613100d 	.word	0x1613100d
 8003530:	221f1c19 	.word	0x221f1c19
 8003534:	25          	.byte	0x25
 8003535:	00          	.byte	0x00
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8003536:	2300      	movs	r3, #0
 8003538:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_GY_ODR_ND;
      break;
  }

  return ret;
}
 800353a:	b002      	add	sp, #8
 800353c:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_GY_ODR_12Hz5;
 800353e:	2301      	movs	r3, #1
 8003540:	7023      	strb	r3, [r4, #0]
      break;
 8003542:	e7fa      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_26Hz;
 8003544:	2302      	movs	r3, #2
 8003546:	7023      	strb	r3, [r4, #0]
      break;
 8003548:	e7f7      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_52Hz;
 800354a:	2303      	movs	r3, #3
 800354c:	7023      	strb	r3, [r4, #0]
      break;
 800354e:	e7f4      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_104Hz;
 8003550:	2304      	movs	r3, #4
 8003552:	7023      	strb	r3, [r4, #0]
      break;
 8003554:	e7f1      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_208Hz;
 8003556:	2305      	movs	r3, #5
 8003558:	7023      	strb	r3, [r4, #0]
      break;
 800355a:	e7ee      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_416Hz;
 800355c:	2306      	movs	r3, #6
 800355e:	7023      	strb	r3, [r4, #0]
      break;
 8003560:	e7eb      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_833Hz;
 8003562:	2307      	movs	r3, #7
 8003564:	7023      	strb	r3, [r4, #0]
      break;
 8003566:	e7e8      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8003568:	2308      	movs	r3, #8
 800356a:	7023      	strb	r3, [r4, #0]
      break;
 800356c:	e7e5      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800356e:	2309      	movs	r3, #9
 8003570:	7023      	strb	r3, [r4, #0]
      break;
 8003572:	e7e2      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8003574:	230a      	movs	r3, #10
 8003576:	7023      	strb	r3, [r4, #0]
      break;
 8003578:	e7df      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_ND;
 800357a:	230b      	movs	r3, #11
 800357c:	7023      	strb	r3, [r4, #0]
  return ret;
 800357e:	e7dc      	b.n	800353a <lsm6dsl_gy_data_rate_get+0x2e>

08003580 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003580:	b530      	push	{r4, r5, lr}
 8003582:	b083      	sub	sp, #12
 8003584:	4604      	mov	r4, r0
 8003586:	460d      	mov	r5, r1
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003588:	2301      	movs	r3, #1
 800358a:	aa01      	add	r2, sp, #4
 800358c:	2112      	movs	r1, #18
 800358e:	f7ff fec9 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 8003592:	b108      	cbz	r0, 8003598 <lsm6dsl_block_data_update_set+0x18>
    ctrl3_c.bdu = val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8003594:	b003      	add	sp, #12
 8003596:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = val;
 8003598:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800359c:	f365 1386 	bfi	r3, r5, #6, #1
 80035a0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80035a4:	2301      	movs	r3, #1
 80035a6:	aa01      	add	r2, sp, #4
 80035a8:	2112      	movs	r1, #18
 80035aa:	4620      	mov	r0, r4
 80035ac:	f7ff febf 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 80035b0:	e7f0      	b.n	8003594 <lsm6dsl_block_data_update_set+0x14>

080035b2 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80035b2:	b508      	push	{r3, lr}
 80035b4:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80035b6:	2306      	movs	r3, #6
 80035b8:	2122      	movs	r1, #34	; 0x22
 80035ba:	f7ff feb3 	bl	8003324 <lsm6dsl_read_reg>
  return ret;
}
 80035be:	bd08      	pop	{r3, pc}

080035c0 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80035c0:	b508      	push	{r3, lr}
 80035c2:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80035c4:	2306      	movs	r3, #6
 80035c6:	2128      	movs	r1, #40	; 0x28
 80035c8:	f7ff feac 	bl	8003324 <lsm6dsl_read_reg>
  return ret;
}
 80035cc:	bd08      	pop	{r3, pc}

080035ce <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80035ce:	b508      	push	{r3, lr}
 80035d0:	460a      	mov	r2, r1
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80035d2:	2301      	movs	r3, #1
 80035d4:	210f      	movs	r1, #15
 80035d6:	f7ff fea5 	bl	8003324 <lsm6dsl_read_reg>
  return ret;
}
 80035da:	bd08      	pop	{r3, pc}

080035dc <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035dc:	b530      	push	{r4, r5, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	4604      	mov	r4, r0
 80035e2:	460d      	mov	r5, r1
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80035e4:	2301      	movs	r3, #1
 80035e6:	aa01      	add	r2, sp, #4
 80035e8:	2112      	movs	r1, #18
 80035ea:	f7ff fe9b 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 80035ee:	b108      	cbz	r0, 80035f4 <lsm6dsl_auto_increment_set+0x18>
    ctrl3_c.if_inc = val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 80035f0:	b003      	add	sp, #12
 80035f2:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = val;
 80035f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80035f8:	f365 0382 	bfi	r3, r5, #2, #1
 80035fc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003600:	2301      	movs	r3, #1
 8003602:	aa01      	add	r2, sp, #4
 8003604:	2112      	movs	r1, #18
 8003606:	4620      	mov	r0, r4
 8003608:	f7ff fe91 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 800360c:	e7f0      	b.n	80035f0 <lsm6dsl_auto_increment_set+0x14>

0800360e <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800360e:	b530      	push	{r4, r5, lr}
 8003610:	b083      	sub	sp, #12
 8003612:	4604      	mov	r4, r0
 8003614:	460d      	mov	r5, r1
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8003616:	2301      	movs	r3, #1
 8003618:	aa01      	add	r2, sp, #4
 800361a:	210a      	movs	r1, #10
 800361c:	f7ff fe82 	bl	8003324 <lsm6dsl_read_reg>
  if(ret == 0){
 8003620:	b108      	cbz	r0, 8003626 <lsm6dsl_fifo_mode_set+0x18>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
  }
  return ret;
}
 8003622:	b003      	add	sp, #12
 8003624:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8003626:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800362a:	f365 0302 	bfi	r3, r5, #0, #3
 800362e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8003632:	2301      	movs	r3, #1
 8003634:	aa01      	add	r2, sp, #4
 8003636:	210a      	movs	r1, #10
 8003638:	4620      	mov	r0, r4
 800363a:	f7ff fe78 	bl	800332e <lsm6dsl_write_reg>
  return ret;
 800363e:	e7f0      	b.n	8003622 <lsm6dsl_fifo_mode_set+0x14>

08003640 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	4604      	mov	r4, r0
  int32_t                ret = BSP_ERROR_NONE;
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003646:	2300      	movs	r3, #0
 8003648:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800364a:	23bf      	movs	r3, #191	; 0xbf
 800364c:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HTS221_0_Probe+0xe0>)
 8003652:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8003654:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HTS221_0_Probe+0xe4>)
 8003656:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HTS221_0_Probe+0xe8>)
 800365a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800365c:	4b33      	ldr	r3, [pc, #204]	; (800372c <HTS221_0_Probe+0xec>)
 800365e:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = IKS01A2_GetTick;
 8003660:	4b33      	ldr	r3, [pc, #204]	; (8003730 <HTS221_0_Probe+0xf0>)
 8003662:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8003664:	a905      	add	r1, sp, #20
 8003666:	4833      	ldr	r0, [pc, #204]	; (8003734 <HTS221_0_Probe+0xf4>)
 8003668:	f7fd fe46 	bl	80012f8 <HTS221_RegisterBusIO>
 800366c:	2800      	cmp	r0, #0
 800366e:	d14b      	bne.n	8003708 <HTS221_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8003670:	f10d 0113 	add.w	r1, sp, #19
 8003674:	482f      	ldr	r0, [pc, #188]	; (8003734 <HTS221_0_Probe+0xf4>)
 8003676:	f7fd fd2b 	bl	80010d0 <HTS221_ReadID>
 800367a:	4606      	mov	r6, r0
 800367c:	2800      	cmp	r0, #0
 800367e:	d146      	bne.n	800370e <HTS221_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8003680:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003684:	2bbc      	cmp	r3, #188	; 0xbc
 8003686:	d145      	bne.n	8003714 <HTS221_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8003688:	4d2a      	ldr	r5, [pc, #168]	; (8003734 <HTS221_0_Probe+0xf4>)
 800368a:	4669      	mov	r1, sp
 800368c:	4628      	mov	r0, r5
 800368e:	f7fd fc0f 	bl	8000eb0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8003692:	f89d 2000 	ldrb.w	r2, [sp]
 8003696:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800369a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                           uint32_t)cap.Humidity << 2);
 800369e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80036a2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80036a6:	62eb      	str	r3, [r5, #44]	; 0x2c

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HTS221_0_Probe+0xf8>)
 80036aa:	601d      	str	r5, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <HTS221_0_Probe+0xfc>)
 80036ae:	636b      	str	r3, [r5, #52]	; 0x34

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80036b0:	f014 0f01 	tst.w	r4, #1
 80036b4:	d001      	beq.n	80036ba <HTS221_0_Probe+0x7a>
 80036b6:	2a01      	cmp	r2, #1
 80036b8:	d00d      	beq.n	80036d6 <HTS221_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80036ba:	f014 0f04 	tst.w	r4, #4
 80036be:	d003      	beq.n	80036c8 <HTS221_0_Probe+0x88>
 80036c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d011      	beq.n	80036ec <HTS221_0_Probe+0xac>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80036c8:	b916      	cbnz	r6, 80036d0 <HTS221_0_Probe+0x90>
 80036ca:	f014 0f02 	tst.w	r4, #2
 80036ce:	d124      	bne.n	800371a <HTS221_0_Probe+0xda>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 80036d0:	4630      	mov	r0, r6
 80036d2:	b00c      	add	sp, #48	; 0x30
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80036d6:	4628      	mov	r0, r5
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HTS221_0_Probe+0x100>)
 80036da:	63eb      	str	r3, [r5, #60]	; 0x3c
      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <HTS221_0_Probe+0xfc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4798      	blx	r3
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d0e9      	beq.n	80036ba <HTS221_0_Probe+0x7a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80036e6:	f06f 0604 	mvn.w	r6, #4
 80036ea:	e7ed      	b.n	80036c8 <HTS221_0_Probe+0x88>
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HTS221_0_Probe+0xf4>)
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <HTS221_0_Probe+0x104>)
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HTS221_0_Probe+0xf8>)
 80036f8:	6810      	ldr	r0, [r2, #0]
 80036fa:	4798      	blx	r3
 80036fc:	4606      	mov	r6, r0
 80036fe:	2800      	cmp	r0, #0
 8003700:	d0e3      	beq.n	80036ca <HTS221_0_Probe+0x8a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003702:	f06f 0604 	mvn.w	r6, #4
 8003706:	e7e3      	b.n	80036d0 <HTS221_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003708:	f06f 0606 	mvn.w	r6, #6
 800370c:	e7e0      	b.n	80036d0 <HTS221_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800370e:	f06f 0606 	mvn.w	r6, #6
 8003712:	e7dd      	b.n	80036d0 <HTS221_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003714:	f06f 0606 	mvn.w	r6, #6
 8003718:	e7da      	b.n	80036d0 <HTS221_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800371a:	f06f 0604 	mvn.w	r6, #4
  return ret;
 800371e:	e7d7      	b.n	80036d0 <HTS221_0_Probe+0x90>
 8003720:	08006bc9 	.word	0x08006bc9
 8003724:	08006ae1 	.word	0x08006ae1
 8003728:	08006b55 	.word	0x08006b55
 800372c:	08006b19 	.word	0x08006b19
 8003730:	08006b91 	.word	0x08006b91
 8003734:	20000464 	.word	0x20000464
 8003738:	200005c8 	.word	0x200005c8
 800373c:	20000028 	.word	0x20000028
 8003740:	20000000 	.word	0x20000000
 8003744:	20000014 	.word	0x20000014

08003748 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8003748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374a:	b08d      	sub	sp, #52	; 0x34
 800374c:	4604      	mov	r4, r0
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800374e:	2300      	movs	r3, #0
 8003750:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8003752:	23bb      	movs	r3, #187	; 0xbb
 8003754:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <LPS22HB_0_Probe+0xe4>)
 800375a:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <LPS22HB_0_Probe+0xe8>)
 800375e:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <LPS22HB_0_Probe+0xec>)
 8003762:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <LPS22HB_0_Probe+0xf0>)
 8003766:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = IKS01A2_GetTick;
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <LPS22HB_0_Probe+0xf4>)
 800376a:	930b      	str	r3, [sp, #44]	; 0x2c

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800376c:	a905      	add	r1, sp, #20
 800376e:	4834      	ldr	r0, [pc, #208]	; (8003840 <LPS22HB_0_Probe+0xf8>)
 8003770:	f7fe f912 	bl	8001998 <LPS22HB_RegisterBusIO>
 8003774:	2800      	cmp	r0, #0
 8003776:	d14d      	bne.n	8003814 <LPS22HB_0_Probe+0xcc>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8003778:	f10d 0113 	add.w	r1, sp, #19
 800377c:	4830      	ldr	r0, [pc, #192]	; (8003840 <LPS22HB_0_Probe+0xf8>)
 800377e:	f7fd ffd7 	bl	8001730 <LPS22HB_ReadID>
 8003782:	4606      	mov	r6, r0
 8003784:	2800      	cmp	r0, #0
 8003786:	d148      	bne.n	800381a <LPS22HB_0_Probe+0xd2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HB_ID)
 8003788:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800378c:	2bb1      	cmp	r3, #177	; 0xb1
 800378e:	d147      	bne.n	8003820 <LPS22HB_0_Probe+0xd8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8003790:	4d2c      	ldr	r5, [pc, #176]	; (8003844 <LPS22HB_0_Probe+0xfc>)
 8003792:	f105 0754 	add.w	r7, r5, #84	; 0x54
 8003796:	4669      	mov	r1, sp
 8003798:	4638      	mov	r0, r7
 800379a:	f7fd fecd 	bl	8001538 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800379e:	f89d 2000 	ldrb.w	r2, [sp]
 80037a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80037a6:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                            uint32_t)cap.Humidity << 2);
 80037aa:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80037ae:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80037b2:	632b      	str	r3, [r5, #48]	; 0x30

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <LPS22HB_0_Probe+0x100>)
 80037b6:	605f      	str	r7, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <LPS22HB_0_Probe+0x104>)
 80037ba:	63ab      	str	r3, [r5, #56]	; 0x38

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80037bc:	f014 0f01 	tst.w	r4, #1
 80037c0:	d001      	beq.n	80037c6 <LPS22HB_0_Probe+0x7e>
 80037c2:	2a01      	cmp	r2, #1
 80037c4:	d00d      	beq.n	80037e2 <LPS22HB_0_Probe+0x9a>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80037c6:	f014 0f02 	tst.w	r4, #2
 80037ca:	d003      	beq.n	80037d4 <LPS22HB_0_Probe+0x8c>
 80037cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d011      	beq.n	80037f8 <LPS22HB_0_Probe+0xb0>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80037d4:	b916      	cbnz	r6, 80037dc <LPS22HB_0_Probe+0x94>
 80037d6:	f014 0f04 	tst.w	r4, #4
 80037da:	d124      	bne.n	8003826 <LPS22HB_0_Probe+0xde>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80037dc:	4630      	mov	r0, r6
 80037de:	b00d      	add	sp, #52	; 0x34
 80037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <LPS22HB_0_Probe+0x108>)
 80037e4:	64ab      	str	r3, [r5, #72]	; 0x48
      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <LPS22HB_0_Probe+0x104>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4638      	mov	r0, r7
 80037ec:	4798      	blx	r3
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d0e9      	beq.n	80037c6 <LPS22HB_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80037f2:	f06f 0604 	mvn.w	r6, #4
 80037f6:	e7ed      	b.n	80037d4 <LPS22HB_0_Probe+0x8c>
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <LPS22HB_0_Probe+0xfc>)
 80037fa:	4a16      	ldr	r2, [pc, #88]	; (8003854 <LPS22HB_0_Probe+0x10c>)
 80037fc:	64da      	str	r2, [r3, #76]	; 0x4c
      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a11      	ldr	r2, [pc, #68]	; (8003848 <LPS22HB_0_Probe+0x100>)
 8003804:	6850      	ldr	r0, [r2, #4]
 8003806:	4798      	blx	r3
 8003808:	4606      	mov	r6, r0
 800380a:	2800      	cmp	r0, #0
 800380c:	d0e3      	beq.n	80037d6 <LPS22HB_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800380e:	f06f 0604 	mvn.w	r6, #4
 8003812:	e7e3      	b.n	80037dc <LPS22HB_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003814:	f06f 0606 	mvn.w	r6, #6
 8003818:	e7e0      	b.n	80037dc <LPS22HB_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800381a:	f06f 0606 	mvn.w	r6, #6
 800381e:	e7dd      	b.n	80037dc <LPS22HB_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003820:	f06f 0606 	mvn.w	r6, #6
 8003824:	e7da      	b.n	80037dc <LPS22HB_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003826:	f06f 0604 	mvn.w	r6, #4
  return ret;
 800382a:	e7d7      	b.n	80037dc <LPS22HB_0_Probe+0x94>
 800382c:	08006bc9 	.word	0x08006bc9
 8003830:	08006ae1 	.word	0x08006ae1
 8003834:	08006b55 	.word	0x08006b55
 8003838:	08006b19 	.word	0x08006b19
 800383c:	08006b91 	.word	0x08006b91
 8003840:	200004b8 	.word	0x200004b8
 8003844:	20000464 	.word	0x20000464
 8003848:	200005c8 	.word	0x200005c8
 800384c:	20000060 	.word	0x20000060
 8003850:	20000038 	.word	0x20000038
 8003854:	2000004c 	.word	0x2000004c

08003858 <IKS01A2_ENV_SENSOR_Init>:
{
 8003858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	460e      	mov	r6, r1
  switch (Instance)
 8003860:	4607      	mov	r7, r0
 8003862:	b120      	cbz	r0, 800386e <IKS01A2_ENV_SENSOR_Init+0x16>
 8003864:	2801      	cmp	r0, #1
 8003866:	d02c      	beq.n	80038c2 <IKS01A2_ENV_SENSOR_Init+0x6a>
 8003868:	f06f 0001 	mvn.w	r0, #1
 800386c:	e06f      	b.n	800394e <IKS01A2_ENV_SENSOR_Init+0xf6>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800386e:	4608      	mov	r0, r1
 8003870:	f7ff fee6 	bl	8003640 <HTS221_0_Probe>
 8003874:	2800      	cmp	r0, #0
 8003876:	d16d      	bne.n	8003954 <IKS01A2_ENV_SENSOR_Init+0xfc>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003878:	4b3c      	ldr	r3, [pc, #240]	; (800396c <IKS01A2_ENV_SENSOR_Init+0x114>)
 800387a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4669      	mov	r1, sp
 8003884:	4a3a      	ldr	r2, [pc, #232]	; (8003970 <IKS01A2_ENV_SENSOR_Init+0x118>)
 8003886:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 800388a:	4798      	blx	r3
 800388c:	2800      	cmp	r0, #0
 800388e:	d164      	bne.n	800395a <IKS01A2_ENV_SENSOR_Init+0x102>
      if (cap.Temperature == 1U)
 8003890:	f89d 3000 	ldrb.w	r3, [sp]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d00b      	beq.n	80038b0 <IKS01A2_ENV_SENSOR_Init+0x58>
  uint32_t component_functions = 0;
 8003898:	46b8      	mov	r8, r7
      if (cap.Humidity == 1U)
 800389a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d009      	beq.n	80038b6 <IKS01A2_ENV_SENSOR_Init+0x5e>
      if (cap.Pressure == 1U)
 80038a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d008      	beq.n	80038bc <IKS01A2_ENV_SENSOR_Init+0x64>
  uint32_t component_functions = 0;
 80038aa:	2500      	movs	r5, #0
 80038ac:	2401      	movs	r4, #1
 80038ae:	e031      	b.n	8003914 <IKS01A2_ENV_SENSOR_Init+0xbc>
        component_functions |= ENV_TEMPERATURE;
 80038b0:	f04f 0801 	mov.w	r8, #1
 80038b4:	e7f1      	b.n	800389a <IKS01A2_ENV_SENSOR_Init+0x42>
        component_functions |= ENV_HUMIDITY;
 80038b6:	f048 0804 	orr.w	r8, r8, #4
 80038ba:	e7f2      	b.n	80038a2 <IKS01A2_ENV_SENSOR_Init+0x4a>
        component_functions |= ENV_PRESSURE;
 80038bc:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 80038c0:	e7f3      	b.n	80038aa <IKS01A2_ENV_SENSOR_Init+0x52>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80038c2:	4608      	mov	r0, r1
 80038c4:	f7ff ff40 	bl	8003748 <LPS22HB_0_Probe>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d149      	bne.n	8003960 <IKS01A2_ENV_SENSOR_Init+0x108>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <IKS01A2_ENV_SENSOR_Init+0x114>)
 80038ce:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4669      	mov	r1, sp
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <IKS01A2_ENV_SENSOR_Init+0x118>)
 80038da:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 80038de:	4798      	blx	r3
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d140      	bne.n	8003966 <IKS01A2_ENV_SENSOR_Init+0x10e>
      if (cap.Temperature == 1U)
 80038e4:	f89d 3000 	ldrb.w	r3, [sp]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00c      	beq.n	8003906 <IKS01A2_ENV_SENSOR_Init+0xae>
  uint32_t component_functions = 0;
 80038ec:	f04f 0800 	mov.w	r8, #0
      if (cap.Humidity == 1U)
 80038f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d008      	beq.n	800390a <IKS01A2_ENV_SENSOR_Init+0xb2>
      if (cap.Pressure == 1U)
 80038f8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d1d4      	bne.n	80038aa <IKS01A2_ENV_SENSOR_Init+0x52>
        component_functions |= ENV_PRESSURE;
 8003900:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 8003904:	e7d1      	b.n	80038aa <IKS01A2_ENV_SENSOR_Init+0x52>
        component_functions |= ENV_TEMPERATURE;
 8003906:	46b8      	mov	r8, r7
 8003908:	e7f2      	b.n	80038f0 <IKS01A2_ENV_SENSOR_Init+0x98>
        component_functions |= ENV_HUMIDITY;
 800390a:	f048 0804 	orr.w	r8, r8, #4
 800390e:	e7f3      	b.n	80038f8 <IKS01A2_ENV_SENSOR_Init+0xa0>
    function = function << 1;
 8003910:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8003912:	3501      	adds	r5, #1
 8003914:	2d02      	cmp	r5, #2
 8003916:	d819      	bhi.n	800394c <IKS01A2_ENV_SENSOR_Init+0xf4>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8003918:	ea34 0306 	bics.w	r3, r4, r6
 800391c:	d1f8      	bne.n	8003910 <IKS01A2_ENV_SENSOR_Init+0xb8>
 800391e:	ea34 0308 	bics.w	r3, r4, r8
 8003922:	d1f5      	bne.n	8003910 <IKS01A2_ENV_SENSOR_Init+0xb8>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <IKS01A2_ENV_SENSOR_Init+0x11c>)
 8003926:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800392a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800392e:	441a      	add	r2, r3
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <IKS01A2_ENV_SENSOR_Init+0x114>)
 8003932:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <IKS01A2_ENV_SENSOR_Init+0x118>)
 800393c:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8003940:	4798      	blx	r3
 8003942:	2800      	cmp	r0, #0
 8003944:	d0e4      	beq.n	8003910 <IKS01A2_ENV_SENSOR_Init+0xb8>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003946:	f06f 0004 	mvn.w	r0, #4
 800394a:	e000      	b.n	800394e <IKS01A2_ENV_SENSOR_Init+0xf6>
 800394c:	2000      	movs	r0, #0
}
 800394e:	b004      	add	sp, #16
 8003950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	e7f9      	b.n	800394e <IKS01A2_ENV_SENSOR_Init+0xf6>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800395a:	f06f 0006 	mvn.w	r0, #6
 800395e:	e7f6      	b.n	800394e <IKS01A2_ENV_SENSOR_Init+0xf6>
        return BSP_ERROR_NO_INIT;
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	e7f3      	b.n	800394e <IKS01A2_ENV_SENSOR_Init+0xf6>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003966:	f06f 0006 	mvn.w	r0, #6
 800396a:	e7f0      	b.n	800394e <IKS01A2_ENV_SENSOR_Init+0xf6>
 800396c:	20000464 	.word	0x20000464
 8003970:	200005c8 	.word	0x200005c8
 8003974:	08009b00 	.word	0x08009b00

08003978 <IKS01A2_ENV_SENSOR_Enable>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8003978:	2801      	cmp	r0, #1
 800397a:	d81b      	bhi.n	80039b4 <IKS01A2_ENV_SENSOR_Enable+0x3c>
{
 800397c:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <IKS01A2_ENV_SENSOR_Enable+0x48>)
 8003980:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	ea31 0303 	bics.w	r3, r1, r3
 800398a:	d116      	bne.n	80039ba <IKS01A2_ENV_SENSOR_Enable+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <IKS01A2_ENV_SENSOR_Enable+0x4c>)
 800398e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8003992:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003996:	441a      	add	r2, r3
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <IKS01A2_ENV_SENSOR_Enable+0x48>)
 800399a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <IKS01A2_ENV_SENSOR_Enable+0x50>)
 80039a4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80039a8:	4798      	blx	r3
 80039aa:	b900      	cbnz	r0, 80039ae <IKS01A2_ENV_SENSOR_Enable+0x36>
}
 80039ac:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80039ae:	f06f 0004 	mvn.w	r0, #4
 80039b2:	e7fb      	b.n	80039ac <IKS01A2_ENV_SENSOR_Enable+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 80039b4:	f06f 0001 	mvn.w	r0, #1
}
 80039b8:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 80039ba:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80039be:	e7f5      	b.n	80039ac <IKS01A2_ENV_SENSOR_Enable+0x34>
 80039c0:	20000464 	.word	0x20000464
 80039c4:	08009b00 	.word	0x08009b00
 80039c8:	200005c8 	.word	0x200005c8

080039cc <IKS01A2_ENV_SENSOR_GetOutputDataRate>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80039cc:	2801      	cmp	r0, #1
 80039ce:	d81d      	bhi.n	8003a0c <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x40>
{
 80039d0:	b508      	push	{r3, lr}
 80039d2:	460b      	mov	r3, r1
 80039d4:	4611      	mov	r1, r2
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x4c>)
 80039d8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80039dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039de:	ea33 0202 	bics.w	r2, r3, r2
 80039e2:	d116      	bne.n	8003a12 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x46>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x50>)
 80039e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80039ee:	441a      	add	r2, r3
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x4c>)
 80039f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x54>)
 80039fc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003a00:	4798      	blx	r3
 8003a02:	b900      	cbnz	r0, 8003a06 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x3a>
}
 8003a04:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a06:	f06f 0004 	mvn.w	r0, #4
 8003a0a:	e7fb      	b.n	8003a04 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x38>
    ret = BSP_ERROR_WRONG_PARAM;
 8003a0c:	f06f 0001 	mvn.w	r0, #1
}
 8003a10:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003a12:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003a16:	e7f5      	b.n	8003a04 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x38>
 8003a18:	20000464 	.word	0x20000464
 8003a1c:	08009b00 	.word	0x08009b00
 8003a20:	200005c8 	.word	0x200005c8

08003a24 <IKS01A2_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8003a24:	2801      	cmp	r0, #1
 8003a26:	d81d      	bhi.n	8003a64 <IKS01A2_ENV_SENSOR_GetValue+0x40>
{
 8003a28:	b508      	push	{r3, lr}
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4611      	mov	r1, r2
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003a2e:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 8003a30:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8003a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a36:	ea33 0202 	bics.w	r2, r3, r2
 8003a3a:	d116      	bne.n	8003a6a <IKS01A2_ENV_SENSOR_GetValue+0x46>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <IKS01A2_ENV_SENSOR_GetValue+0x50>)
 8003a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003a46:	441a      	add	r2, r3
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 8003a4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <IKS01A2_ENV_SENSOR_GetValue+0x54>)
 8003a54:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003a58:	4798      	blx	r3
 8003a5a:	b900      	cbnz	r0, 8003a5e <IKS01A2_ENV_SENSOR_GetValue+0x3a>
}
 8003a5c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a5e:	f06f 0004 	mvn.w	r0, #4
 8003a62:	e7fb      	b.n	8003a5c <IKS01A2_ENV_SENSOR_GetValue+0x38>
    ret = BSP_ERROR_WRONG_PARAM;
 8003a64:	f06f 0001 	mvn.w	r0, #1
}
 8003a68:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003a6a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003a6e:	e7f5      	b.n	8003a5c <IKS01A2_ENV_SENSOR_GetValue+0x38>
 8003a70:	20000464 	.word	0x20000464
 8003a74:	08009b00 	.word	0x08009b00
 8003a78:	200005c8 	.word	0x200005c8

08003a7c <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	b090      	sub	sp, #64	; 0x40
 8003a80:	4604      	mov	r4, r0
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8003a82:	2300      	movs	r3, #0
 8003a84:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8003a86:	23d7      	movs	r3, #215	; 0xd7
 8003a88:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <LSM6DSL_0_Probe+0xe0>)
 8003a8e:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <LSM6DSL_0_Probe+0xe4>)
 8003a92:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <LSM6DSL_0_Probe+0xe8>)
 8003a96:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8003a98:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <LSM6DSL_0_Probe+0xec>)
 8003a9a:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8003a9c:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <LSM6DSL_0_Probe+0xf0>)
 8003a9e:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8003aa0:	a909      	add	r1, sp, #36	; 0x24
 8003aa2:	4833      	ldr	r0, [pc, #204]	; (8003b70 <LSM6DSL_0_Probe+0xf4>)
 8003aa4:	f7ff fc04 	bl	80032b0 <LSM6DSL_RegisterBusIO>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d14b      	bne.n	8003b44 <LSM6DSL_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8003aac:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003ab0:	482f      	ldr	r0, [pc, #188]	; (8003b70 <LSM6DSL_0_Probe+0xf4>)
 8003ab2:	f7ff f98c 	bl	8002dce <LSM6DSL_ReadID>
 8003ab6:	4606      	mov	r6, r0
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d146      	bne.n	8003b4a <LSM6DSL_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSL_ID)
 8003abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ac0:	2b6a      	cmp	r3, #106	; 0x6a
 8003ac2:	d145      	bne.n	8003b50 <LSM6DSL_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8003ac4:	4d2a      	ldr	r5, [pc, #168]	; (8003b70 <LSM6DSL_0_Probe+0xf4>)
 8003ac6:	a901      	add	r1, sp, #4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7fe ff0d 	bl	80028e8 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8003ace:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003ad2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ad6:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8003ada:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8003ade:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8003ae2:	632b      	str	r3, [r5, #48]	; 0x30

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <LSM6DSL_0_Probe+0xf8>)
 8003ae6:	601d      	str	r5, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8003ae8:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <LSM6DSL_0_Probe+0xfc>)
 8003aea:	63eb      	str	r3, [r5, #60]	; 0x3c

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8003aec:	f014 0f01 	tst.w	r4, #1
 8003af0:	d001      	beq.n	8003af6 <LSM6DSL_0_Probe+0x7a>
 8003af2:	2a01      	cmp	r2, #1
 8003af4:	d00d      	beq.n	8003b12 <LSM6DSL_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8003af6:	f014 0f02 	tst.w	r4, #2
 8003afa:	d003      	beq.n	8003b04 <LSM6DSL_0_Probe+0x88>
 8003afc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d011      	beq.n	8003b28 <LSM6DSL_0_Probe+0xac>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8003b04:	b916      	cbnz	r6, 8003b0c <LSM6DSL_0_Probe+0x90>
 8003b06:	f014 0f04 	tst.w	r4, #4
 8003b0a:	d124      	bne.n	8003b56 <LSM6DSL_0_Probe+0xda>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	b010      	add	sp, #64	; 0x40
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8003b12:	4628      	mov	r0, r5
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <LSM6DSL_0_Probe+0x100>)
 8003b16:	64ab      	str	r3, [r5, #72]	; 0x48
      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <LSM6DSL_0_Probe+0xfc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4798      	blx	r3
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0e9      	beq.n	8003af6 <LSM6DSL_0_Probe+0x7a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b22:	f06f 0604 	mvn.w	r6, #4
 8003b26:	e7ed      	b.n	8003b04 <LSM6DSL_0_Probe+0x88>
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <LSM6DSL_0_Probe+0xf4>)
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <LSM6DSL_0_Probe+0x104>)
 8003b2c:	64da      	str	r2, [r3, #76]	; 0x4c
      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <LSM6DSL_0_Probe+0xf8>)
 8003b34:	6810      	ldr	r0, [r2, #0]
 8003b36:	4798      	blx	r3
 8003b38:	4606      	mov	r6, r0
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d0e3      	beq.n	8003b06 <LSM6DSL_0_Probe+0x8a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b3e:	f06f 0604 	mvn.w	r6, #4
 8003b42:	e7e3      	b.n	8003b0c <LSM6DSL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b44:	f06f 0606 	mvn.w	r6, #6
 8003b48:	e7e0      	b.n	8003b0c <LSM6DSL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b4a:	f06f 0606 	mvn.w	r6, #6
 8003b4e:	e7dd      	b.n	8003b0c <LSM6DSL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b50:	f06f 0606 	mvn.w	r6, #6
 8003b54:	e7da      	b.n	8003b0c <LSM6DSL_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b56:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8003b5a:	e7d7      	b.n	8003b0c <LSM6DSL_0_Probe+0x90>
 8003b5c:	08006bc9 	.word	0x08006bc9
 8003b60:	08006ae1 	.word	0x08006ae1
 8003b64:	08006b55 	.word	0x08006b55
 8003b68:	08006b19 	.word	0x08006b19
 8003b6c:	08006b91 	.word	0x08006b91
 8003b70:	200004e4 	.word	0x200004e4
 8003b74:	200005d0 	.word	0x200005d0
 8003b78:	20000120 	.word	0x20000120
 8003b7c:	200000d8 	.word	0x200000d8
 8003b80:	200000fc 	.word	0x200000fc

08003b84 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b091      	sub	sp, #68	; 0x44
 8003b88:	4604      	mov	r4, r0
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8003b8e:	2333      	movs	r3, #51	; 0x33
 8003b90:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <LSM303AGR_ACC_0_Probe+0xc8>)
 8003b96:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <LSM303AGR_ACC_0_Probe+0xcc>)
 8003b9a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <LSM303AGR_ACC_0_Probe+0xd0>)
 8003b9e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <LSM303AGR_ACC_0_Probe+0xd4>)
 8003ba2:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <LSM303AGR_ACC_0_Probe+0xd8>)
 8003ba6:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8003ba8:	a909      	add	r1, sp, #36	; 0x24
 8003baa:	482d      	ldr	r0, [pc, #180]	; (8003c60 <LSM303AGR_ACC_0_Probe+0xdc>)
 8003bac:	f7fe fc86 	bl	80024bc <LSM303AGR_ACC_RegisterBusIO>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d13b      	bne.n	8003c2c <LSM303AGR_ACC_0_Probe+0xa8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8003bb4:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003bb8:	4829      	ldr	r0, [pc, #164]	; (8003c60 <LSM303AGR_ACC_0_Probe+0xdc>)
 8003bba:	f7fe f95b 	bl	8001e74 <LSM303AGR_ACC_ReadID>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d136      	bne.n	8003c32 <LSM303AGR_ACC_0_Probe+0xae>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8003bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bc8:	2b33      	cmp	r3, #51	; 0x33
 8003bca:	d135      	bne.n	8003c38 <LSM303AGR_ACC_0_Probe+0xb4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8003bcc:	4d25      	ldr	r5, [pc, #148]	; (8003c64 <LSM303AGR_ACC_0_Probe+0xe0>)
 8003bce:	f105 076c 	add.w	r7, r5, #108	; 0x6c
 8003bd2:	a901      	add	r1, sp, #4
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f7fd fff7 	bl	8001bc8 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8003bda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003bde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003be2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                                     uint32_t)cap.Magneto << 2);
 8003be6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8003bea:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8003bee:	636b      	str	r3, [r5, #52]	; 0x34

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <LSM303AGR_ACC_0_Probe+0xe4>)
 8003bf2:	605f      	str	r7, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <LSM303AGR_ACC_0_Probe+0xe8>)
 8003bf6:	642b      	str	r3, [r5, #64]	; 0x40

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8003bf8:	f014 0f02 	tst.w	r4, #2
 8003bfc:	d001      	beq.n	8003c02 <LSM303AGR_ACC_0_Probe+0x7e>
 8003bfe:	2a01      	cmp	r2, #1
 8003c00:	d009      	beq.n	8003c16 <LSM303AGR_ACC_0_Probe+0x92>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8003c02:	f014 0f01 	tst.w	r4, #1
 8003c06:	d11a      	bne.n	8003c3e <LSM303AGR_ACC_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8003c08:	b916      	cbnz	r6, 8003c10 <LSM303AGR_ACC_0_Probe+0x8c>
 8003c0a:	f014 0f04 	tst.w	r4, #4
 8003c0e:	d119      	bne.n	8003c44 <LSM303AGR_ACC_0_Probe+0xc0>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8003c10:	4630      	mov	r0, r6
 8003c12:	b011      	add	sp, #68	; 0x44
 8003c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <LSM303AGR_ACC_0_Probe+0xec>)
 8003c18:	65ab      	str	r3, [r5, #88]	; 0x58
      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <LSM303AGR_ACC_0_Probe+0xe8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4638      	mov	r0, r7
 8003c20:	4798      	blx	r3
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d0ed      	beq.n	8003c02 <LSM303AGR_ACC_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c26:	f06f 0604 	mvn.w	r6, #4
 8003c2a:	e7ed      	b.n	8003c08 <LSM303AGR_ACC_0_Probe+0x84>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c2c:	f06f 0606 	mvn.w	r6, #6
 8003c30:	e7ee      	b.n	8003c10 <LSM303AGR_ACC_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c32:	f06f 0606 	mvn.w	r6, #6
 8003c36:	e7eb      	b.n	8003c10 <LSM303AGR_ACC_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c38:	f06f 0606 	mvn.w	r6, #6
 8003c3c:	e7e8      	b.n	8003c10 <LSM303AGR_ACC_0_Probe+0x8c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c3e:	f06f 0604 	mvn.w	r6, #4
 8003c42:	e7e5      	b.n	8003c10 <LSM303AGR_ACC_0_Probe+0x8c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c44:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8003c48:	e7e2      	b.n	8003c10 <LSM303AGR_ACC_0_Probe+0x8c>
 8003c4a:	bf00      	nop
 8003c4c:	08006bc9 	.word	0x08006bc9
 8003c50:	08006ae1 	.word	0x08006ae1
 8003c54:	08006b55 	.word	0x08006b55
 8003c58:	08006b19 	.word	0x08006b19
 8003c5c:	08006b91 	.word	0x08006b91
 8003c60:	20000550 	.word	0x20000550
 8003c64:	200004e4 	.word	0x200004e4
 8003c68:	200005d0 	.word	0x200005d0
 8003c6c:	200000c8 	.word	0x200000c8
 8003c70:	200000a4 	.word	0x200000a4

08003c74 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	b091      	sub	sp, #68	; 0x44
 8003c78:	4604      	mov	r4, r0
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8003c7e:	233d      	movs	r3, #61	; 0x3d
 8003c80:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8003c84:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <LSM303AGR_MAG_0_Probe+0xc8>)
 8003c86:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <LSM303AGR_MAG_0_Probe+0xcc>)
 8003c8a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <LSM303AGR_MAG_0_Probe+0xd0>)
 8003c8e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8003c90:	4b2d      	ldr	r3, [pc, #180]	; (8003d48 <LSM303AGR_MAG_0_Probe+0xd4>)
 8003c92:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8003c94:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <LSM303AGR_MAG_0_Probe+0xd8>)
 8003c96:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8003c98:	a909      	add	r1, sp, #36	; 0x24
 8003c9a:	482d      	ldr	r0, [pc, #180]	; (8003d50 <LSM303AGR_MAG_0_Probe+0xdc>)
 8003c9c:	f7fe fc48 	bl	8002530 <LSM303AGR_MAG_RegisterBusIO>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d13b      	bne.n	8003d1c <LSM303AGR_MAG_0_Probe+0xa8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8003ca4:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003ca8:	4829      	ldr	r0, [pc, #164]	; (8003d50 <LSM303AGR_MAG_0_Probe+0xdc>)
 8003caa:	f7fe fb6f 	bl	800238c <LSM303AGR_MAG_ReadID>
 8003cae:	4606      	mov	r6, r0
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d136      	bne.n	8003d22 <LSM303AGR_MAG_0_Probe+0xae>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8003cb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d135      	bne.n	8003d28 <LSM303AGR_MAG_0_Probe+0xb4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8003cbc:	4d25      	ldr	r5, [pc, #148]	; (8003d54 <LSM303AGR_MAG_0_Probe+0xe0>)
 8003cbe:	f105 0798 	add.w	r7, r5, #152	; 0x98
 8003cc2:	a901      	add	r1, sp, #4
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f7fd ff91 	bl	8001bec <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8003cca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003cce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003cd2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                                     uint32_t)cap.Magneto << 2);
 8003cd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8003cda:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8003cde:	63ab      	str	r3, [r5, #56]	; 0x38

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <LSM303AGR_MAG_0_Probe+0xe4>)
 8003ce2:	609f      	str	r7, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <LSM303AGR_MAG_0_Probe+0xe8>)
 8003ce6:	646b      	str	r3, [r5, #68]	; 0x44

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8003ce8:	f014 0f04 	tst.w	r4, #4
 8003cec:	d001      	beq.n	8003cf2 <LSM303AGR_MAG_0_Probe+0x7e>
 8003cee:	2a01      	cmp	r2, #1
 8003cf0:	d009      	beq.n	8003d06 <LSM303AGR_MAG_0_Probe+0x92>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8003cf2:	f014 0f02 	tst.w	r4, #2
 8003cf6:	d11a      	bne.n	8003d2e <LSM303AGR_MAG_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8003cf8:	b916      	cbnz	r6, 8003d00 <LSM303AGR_MAG_0_Probe+0x8c>
 8003cfa:	f014 0f01 	tst.w	r4, #1
 8003cfe:	d119      	bne.n	8003d34 <LSM303AGR_MAG_0_Probe+0xc0>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8003d00:	4630      	mov	r0, r6
 8003d02:	b011      	add	sp, #68	; 0x44
 8003d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <LSM303AGR_MAG_0_Probe+0xec>)
 8003d08:	66ab      	str	r3, [r5, #104]	; 0x68
      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <LSM303AGR_MAG_0_Probe+0xe8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4638      	mov	r0, r7
 8003d10:	4798      	blx	r3
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0ed      	beq.n	8003cf2 <LSM303AGR_MAG_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d16:	f06f 0604 	mvn.w	r6, #4
 8003d1a:	e7ed      	b.n	8003cf8 <LSM303AGR_MAG_0_Probe+0x84>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003d1c:	f06f 0606 	mvn.w	r6, #6
 8003d20:	e7ee      	b.n	8003d00 <LSM303AGR_MAG_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003d22:	f06f 0606 	mvn.w	r6, #6
 8003d26:	e7eb      	b.n	8003d00 <LSM303AGR_MAG_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003d28:	f06f 0606 	mvn.w	r6, #6
 8003d2c:	e7e8      	b.n	8003d00 <LSM303AGR_MAG_0_Probe+0x8c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d2e:	f06f 0604 	mvn.w	r6, #4
 8003d32:	e7e5      	b.n	8003d00 <LSM303AGR_MAG_0_Probe+0x8c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d34:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8003d38:	e7e2      	b.n	8003d00 <LSM303AGR_MAG_0_Probe+0x8c>
 8003d3a:	bf00      	nop
 8003d3c:	08006bc9 	.word	0x08006bc9
 8003d40:	08006ae1 	.word	0x08006ae1
 8003d44:	08006b55 	.word	0x08006b55
 8003d48:	08006b19 	.word	0x08006b19
 8003d4c:	08006b91 	.word	0x08006b91
 8003d50:	2000057c 	.word	0x2000057c
 8003d54:	200004e4 	.word	0x200004e4
 8003d58:	200005d0 	.word	0x200005d0
 8003d5c:	20000094 	.word	0x20000094
 8003d60:	20000070 	.word	0x20000070

08003d64 <IKS01A2_MOTION_SENSOR_Init>:
{
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	b088      	sub	sp, #32
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	460f      	mov	r7, r1
  switch (Instance)
 8003d6e:	2801      	cmp	r0, #1
 8003d70:	d031      	beq.n	8003dd6 <IKS01A2_MOTION_SENSOR_Init+0x72>
 8003d72:	2802      	cmp	r0, #2
 8003d74:	d057      	beq.n	8003e26 <IKS01A2_MOTION_SENSOR_Init+0xc2>
 8003d76:	b110      	cbz	r0, 8003d7e <IKS01A2_MOTION_SENSOR_Init+0x1a>
 8003d78:	f06f 0001 	mvn.w	r0, #1
 8003d7c:	e099      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8003d7e:	4608      	mov	r0, r1
 8003d80:	f7ff fe7c 	bl	8003a7c <LSM6DSL_0_Probe>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	f040 8097 	bne.w	8003eb8 <IKS01A2_MOTION_SENSOR_Init+0x154>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003d8a:	4b54      	ldr	r3, [pc, #336]	; (8003edc <IKS01A2_MOTION_SENSOR_Init+0x178>)
 8003d8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	a901      	add	r1, sp, #4
 8003d96:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <IKS01A2_MOTION_SENSOR_Init+0x17c>)
 8003d98:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003d9c:	4798      	blx	r3
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f040 808d 	bne.w	8003ebe <IKS01A2_MOTION_SENSOR_Init+0x15a>
      if (cap.Acc == 1U)
 8003da4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d00b      	beq.n	8003dc4 <IKS01A2_MOTION_SENSOR_Init+0x60>
  uint32_t component_functions = 0;
 8003dac:	46a0      	mov	r8, r4
      if (cap.Gyro == 1U)
 8003dae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d009      	beq.n	8003dca <IKS01A2_MOTION_SENSOR_Init+0x66>
      if (cap.Magneto == 1U)
 8003db6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d008      	beq.n	8003dd0 <IKS01A2_MOTION_SENSOR_Init+0x6c>
  uint32_t component_functions = 0;
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	2501      	movs	r5, #1
 8003dc2:	e059      	b.n	8003e78 <IKS01A2_MOTION_SENSOR_Init+0x114>
        component_functions |= MOTION_ACCELERO;
 8003dc4:	f04f 0802 	mov.w	r8, #2
 8003dc8:	e7f1      	b.n	8003dae <IKS01A2_MOTION_SENSOR_Init+0x4a>
        component_functions |= MOTION_GYRO;
 8003dca:	f048 0801 	orr.w	r8, r8, #1
 8003dce:	e7f2      	b.n	8003db6 <IKS01A2_MOTION_SENSOR_Init+0x52>
        component_functions |= MOTION_MAGNETO;
 8003dd0:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8003dd4:	e7f3      	b.n	8003dbe <IKS01A2_MOTION_SENSOR_Init+0x5a>
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8003dd6:	4608      	mov	r0, r1
 8003dd8:	f7ff fed4 	bl	8003b84 <LSM303AGR_ACC_0_Probe>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d171      	bne.n	8003ec4 <IKS01A2_MOTION_SENSOR_Init+0x160>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003de0:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <IKS01A2_MOTION_SENSOR_Init+0x178>)
 8003de2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	a901      	add	r1, sp, #4
 8003dec:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <IKS01A2_MOTION_SENSOR_Init+0x17c>)
 8003dee:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003df2:	4798      	blx	r3
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d168      	bne.n	8003eca <IKS01A2_MOTION_SENSOR_Init+0x166>
      if (cap.Acc == 1U)
 8003df8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d00c      	beq.n	8003e1a <IKS01A2_MOTION_SENSOR_Init+0xb6>
  uint32_t component_functions = 0;
 8003e00:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8003e04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d009      	beq.n	8003e20 <IKS01A2_MOTION_SENSOR_Init+0xbc>
      if (cap.Magneto == 1U)
 8003e0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d1d4      	bne.n	8003dbe <IKS01A2_MOTION_SENSOR_Init+0x5a>
        component_functions |= MOTION_MAGNETO;
 8003e14:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8003e18:	e7d1      	b.n	8003dbe <IKS01A2_MOTION_SENSOR_Init+0x5a>
        component_functions |= MOTION_ACCELERO;
 8003e1a:	f04f 0802 	mov.w	r8, #2
 8003e1e:	e7f1      	b.n	8003e04 <IKS01A2_MOTION_SENSOR_Init+0xa0>
        component_functions |= MOTION_GYRO;
 8003e20:	f048 0801 	orr.w	r8, r8, #1
 8003e24:	e7f2      	b.n	8003e0c <IKS01A2_MOTION_SENSOR_Init+0xa8>
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8003e26:	4608      	mov	r0, r1
 8003e28:	f7ff ff24 	bl	8003c74 <LSM303AGR_MAG_0_Probe>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d14f      	bne.n	8003ed0 <IKS01A2_MOTION_SENSOR_Init+0x16c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <IKS01A2_MOTION_SENSOR_Init+0x178>)
 8003e32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	a901      	add	r1, sp, #4
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <IKS01A2_MOTION_SENSOR_Init+0x17c>)
 8003e3e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003e42:	4798      	blx	r3
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d146      	bne.n	8003ed6 <IKS01A2_MOTION_SENSOR_Init+0x172>
      if (cap.Acc == 1U)
 8003e48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d00c      	beq.n	8003e6a <IKS01A2_MOTION_SENSOR_Init+0x106>
  uint32_t component_functions = 0;
 8003e50:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8003e54:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d008      	beq.n	8003e6e <IKS01A2_MOTION_SENSOR_Init+0x10a>
      if (cap.Magneto == 1U)
 8003e5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d1ac      	bne.n	8003dbe <IKS01A2_MOTION_SENSOR_Init+0x5a>
        component_functions |= MOTION_MAGNETO;
 8003e64:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8003e68:	e7a9      	b.n	8003dbe <IKS01A2_MOTION_SENSOR_Init+0x5a>
        component_functions |= MOTION_ACCELERO;
 8003e6a:	46a0      	mov	r8, r4
 8003e6c:	e7f2      	b.n	8003e54 <IKS01A2_MOTION_SENSOR_Init+0xf0>
        component_functions |= MOTION_GYRO;
 8003e6e:	f048 0801 	orr.w	r8, r8, #1
 8003e72:	e7f3      	b.n	8003e5c <IKS01A2_MOTION_SENSOR_Init+0xf8>
    function = function << 1;
 8003e74:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8003e76:	3601      	adds	r6, #1
 8003e78:	2e02      	cmp	r6, #2
 8003e7a:	d819      	bhi.n	8003eb0 <IKS01A2_MOTION_SENSOR_Init+0x14c>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8003e7c:	ea35 0307 	bics.w	r3, r5, r7
 8003e80:	d1f8      	bne.n	8003e74 <IKS01A2_MOTION_SENSOR_Init+0x110>
 8003e82:	ea35 0308 	bics.w	r3, r5, r8
 8003e86:	d1f5      	bne.n	8003e74 <IKS01A2_MOTION_SENSOR_Init+0x110>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8003e88:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 8003e8a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8003e8e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003e92:	441a      	add	r2, r3
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <IKS01A2_MOTION_SENSOR_Init+0x178>)
 8003e96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <IKS01A2_MOTION_SENSOR_Init+0x17c>)
 8003ea0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003ea4:	4798      	blx	r3
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d0e4      	beq.n	8003e74 <IKS01A2_MOTION_SENSOR_Init+0x110>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003eaa:	f06f 0004 	mvn.w	r0, #4
 8003eae:	e000      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
 8003eb0:	2000      	movs	r0, #0
}
 8003eb2:	b008      	add	sp, #32
 8003eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	e7f9      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003ebe:	f06f 0006 	mvn.w	r0, #6
 8003ec2:	e7f6      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
        return BSP_ERROR_NO_INIT;
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	e7f3      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003eca:	f06f 0006 	mvn.w	r0, #6
 8003ece:	e7f0      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
        return BSP_ERROR_NO_INIT;
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	e7ed      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003ed6:	f06f 0006 	mvn.w	r0, #6
 8003eda:	e7ea      	b.n	8003eb2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
 8003edc:	200004e4 	.word	0x200004e4
 8003ee0:	200005d0 	.word	0x200005d0
 8003ee4:	08009b14 	.word	0x08009b14

08003ee8 <IKS01A2_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8003ee8:	2802      	cmp	r0, #2
 8003eea:	d81b      	bhi.n	8003f24 <IKS01A2_MOTION_SENSOR_Enable+0x3c>
{
 8003eec:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 8003ef0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	ea31 0303 	bics.w	r3, r1, r3
 8003efa:	d116      	bne.n	8003f2a <IKS01A2_MOTION_SENSOR_Enable+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <IKS01A2_MOTION_SENSOR_Enable+0x4c>)
 8003efe:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8003f02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003f06:	441a      	add	r2, r3
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 8003f0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <IKS01A2_MOTION_SENSOR_Enable+0x50>)
 8003f14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003f18:	4798      	blx	r3
 8003f1a:	b900      	cbnz	r0, 8003f1e <IKS01A2_MOTION_SENSOR_Enable+0x36>
}
 8003f1c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f1e:	f06f 0004 	mvn.w	r0, #4
 8003f22:	e7fb      	b.n	8003f1c <IKS01A2_MOTION_SENSOR_Enable+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8003f24:	f06f 0001 	mvn.w	r0, #1
}
 8003f28:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003f2a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003f2e:	e7f5      	b.n	8003f1c <IKS01A2_MOTION_SENSOR_Enable+0x34>
 8003f30:	200004e4 	.word	0x200004e4
 8003f34:	08009b14 	.word	0x08009b14
 8003f38:	200005d0 	.word	0x200005d0

08003f3c <IKS01A2_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8003f3c:	2802      	cmp	r0, #2
 8003f3e:	d81d      	bhi.n	8003f7c <IKS01A2_MOTION_SENSOR_GetAxes+0x40>
{
 8003f40:	b508      	push	{r3, lr}
 8003f42:	460b      	mov	r3, r1
 8003f44:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8003f46:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 8003f48:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8003f4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f4e:	ea33 0202 	bics.w	r2, r3, r2
 8003f52:	d116      	bne.n	8003f82 <IKS01A2_MOTION_SENSOR_GetAxes+0x46>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <IKS01A2_MOTION_SENSOR_GetAxes+0x50>)
 8003f56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f5a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003f5e:	441a      	add	r2, r3
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 8003f62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <IKS01A2_MOTION_SENSOR_GetAxes+0x54>)
 8003f6c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003f70:	4798      	blx	r3
 8003f72:	b900      	cbnz	r0, 8003f76 <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
}
 8003f74:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f76:	f06f 0004 	mvn.w	r0, #4
 8003f7a:	e7fb      	b.n	8003f74 <IKS01A2_MOTION_SENSOR_GetAxes+0x38>
    ret = BSP_ERROR_WRONG_PARAM;
 8003f7c:	f06f 0001 	mvn.w	r0, #1
}
 8003f80:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003f82:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003f86:	e7f5      	b.n	8003f74 <IKS01A2_MOTION_SENSOR_GetAxes+0x38>
 8003f88:	200004e4 	.word	0x200004e4
 8003f8c:	08009b14 	.word	0x08009b14
 8003f90:	200005d0 	.word	0x200005d0

08003f94 <IKS01A2_MOTION_SENSOR_GetSensitivity>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8003f94:	2802      	cmp	r0, #2
 8003f96:	d81d      	bhi.n	8003fd4 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x40>
{
 8003f98:	b508      	push	{r3, lr}
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x4c>)
 8003fa0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8003fa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fa6:	ea33 0202 	bics.w	r2, r3, r2
 8003faa:	d116      	bne.n	8003fda <IKS01A2_MOTION_SENSOR_GetSensitivity+0x46>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x50>)
 8003fae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fb2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003fb6:	441a      	add	r2, r3
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x4c>)
 8003fba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x54>)
 8003fc4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003fc8:	4798      	blx	r3
 8003fca:	b900      	cbnz	r0, 8003fce <IKS01A2_MOTION_SENSOR_GetSensitivity+0x3a>
}
 8003fcc:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003fce:	f06f 0004 	mvn.w	r0, #4
 8003fd2:	e7fb      	b.n	8003fcc <IKS01A2_MOTION_SENSOR_GetSensitivity+0x38>
    ret = BSP_ERROR_WRONG_PARAM;
 8003fd4:	f06f 0001 	mvn.w	r0, #1
}
 8003fd8:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003fda:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003fde:	e7f5      	b.n	8003fcc <IKS01A2_MOTION_SENSOR_GetSensitivity+0x38>
 8003fe0:	200004e4 	.word	0x200004e4
 8003fe4:	08009b14 	.word	0x08009b14
 8003fe8:	200005d0 	.word	0x200005d0

08003fec <IKS01A2_MOTION_SENSOR_GetOutputDataRate>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8003fec:	2802      	cmp	r0, #2
 8003fee:	d81d      	bhi.n	800402c <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x40>
{
 8003ff0:	b508      	push	{r3, lr}
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 8003ff8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8003ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ffe:	ea33 0202 	bics.w	r2, r3, r2
 8004002:	d116      	bne.n	8004032 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x46>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x50>)
 8004006:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800400a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800400e:	441a      	add	r2, r3
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 8004012:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x54>)
 800401c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004020:	4798      	blx	r3
 8004022:	b900      	cbnz	r0, 8004026 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x3a>
}
 8004024:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004026:	f06f 0004 	mvn.w	r0, #4
 800402a:	e7fb      	b.n	8004024 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x38>
    ret = BSP_ERROR_WRONG_PARAM;
 800402c:	f06f 0001 	mvn.w	r0, #1
}
 8004030:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8004032:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004036:	e7f5      	b.n	8004024 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x38>
 8004038:	200004e4 	.word	0x200004e4
 800403c:	08009b14 	.word	0x08009b14
 8004040:	200005d0 	.word	0x200005d0

08004044 <IKS01A2_MOTION_SENSOR_GetFullScale>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004044:	2802      	cmp	r0, #2
 8004046:	d81d      	bhi.n	8004084 <IKS01A2_MOTION_SENSOR_GetFullScale+0x40>
{
 8004048:	b508      	push	{r3, lr}
 800404a:	460b      	mov	r3, r1
 800404c:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800404e:	4a10      	ldr	r2, [pc, #64]	; (8004090 <IKS01A2_MOTION_SENSOR_GetFullScale+0x4c>)
 8004050:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004054:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004056:	ea33 0202 	bics.w	r2, r3, r2
 800405a:	d116      	bne.n	800408a <IKS01A2_MOTION_SENSOR_GetFullScale+0x46>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800405c:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <IKS01A2_MOTION_SENSOR_GetFullScale+0x50>)
 800405e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004062:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004066:	441a      	add	r2, r3
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <IKS01A2_MOTION_SENSOR_GetFullScale+0x4c>)
 800406a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <IKS01A2_MOTION_SENSOR_GetFullScale+0x54>)
 8004074:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004078:	4798      	blx	r3
 800407a:	b900      	cbnz	r0, 800407e <IKS01A2_MOTION_SENSOR_GetFullScale+0x3a>
}
 800407c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800407e:	f06f 0004 	mvn.w	r0, #4
 8004082:	e7fb      	b.n	800407c <IKS01A2_MOTION_SENSOR_GetFullScale+0x38>
    ret = BSP_ERROR_WRONG_PARAM;
 8004084:	f06f 0001 	mvn.w	r0, #1
}
 8004088:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 800408a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800408e:	e7f5      	b.n	800407c <IKS01A2_MOTION_SENSOR_GetFullScale+0x38>
 8004090:	200004e4 	.word	0x200004e4
 8004094:	08009b14 	.word	0x08009b14
 8004098:	200005d0 	.word	0x200005d0

0800409c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800409c:	b510      	push	{r4, lr}
 800409e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_InitTick+0x40>)
 80040a2:	7818      	ldrb	r0, [r3, #0]
 80040a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80040ac:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_InitTick+0x44>)
 80040ae:	6810      	ldr	r0, [r2, #0]
 80040b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80040b4:	f000 fa24 	bl	8004500 <HAL_SYSTICK_Config>
 80040b8:	b968      	cbnz	r0, 80040d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ba:	2c0f      	cmp	r4, #15
 80040bc:	d901      	bls.n	80040c2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80040be:	2001      	movs	r0, #1
 80040c0:	e00a      	b.n	80040d8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c2:	2200      	movs	r2, #0
 80040c4:	4621      	mov	r1, r4
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	f000 f9d7 	bl	800447c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040ce:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_InitTick+0x40>)
 80040d0:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80040d2:	2000      	movs	r0, #0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80040d6:	2001      	movs	r0, #1
}
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	20000130 	.word	0x20000130
 80040e0:	20000274 	.word	0x20000274

080040e4 <HAL_Init>:
{
 80040e4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_Init+0x30>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004100:	2003      	movs	r0, #3
 8004102:	f000 f9a9 	bl	8004458 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004106:	2000      	movs	r0, #0
 8004108:	f7ff ffc8 	bl	800409c <HAL_InitTick>
  HAL_MspInit();
 800410c:	f002 fbd6 	bl	80068bc <HAL_MspInit>
}
 8004110:	2000      	movs	r0, #0
 8004112:	bd08      	pop	{r3, pc}
 8004114:	40023c00 	.word	0x40023c00

08004118 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004118:	4a03      	ldr	r2, [pc, #12]	; (8004128 <HAL_IncTick+0x10>)
 800411a:	6811      	ldr	r1, [r2, #0]
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_IncTick+0x14>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	440b      	add	r3, r1
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	200005dc 	.word	0x200005dc
 800412c:	20000130 	.word	0x20000130

08004130 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004130:	4b01      	ldr	r3, [pc, #4]	; (8004138 <HAL_GetTick+0x8>)
 8004132:	6818      	ldr	r0, [r3, #0]
}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	200005dc 	.word	0x200005dc

0800413c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <ADC_Init+0x12c>)
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004144:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	6841      	ldr	r1, [r0, #4]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800414e:	6802      	ldr	r2, [r0, #0]
 8004150:	6853      	ldr	r3, [r2, #4]
 8004152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004156:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004158:	6802      	ldr	r2, [r0, #0]
 800415a:	6853      	ldr	r3, [r2, #4]
 800415c:	6901      	ldr	r1, [r0, #16]
 800415e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004162:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004164:	6802      	ldr	r2, [r0, #0]
 8004166:	6853      	ldr	r3, [r2, #4]
 8004168:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800416c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800416e:	6802      	ldr	r2, [r0, #0]
 8004170:	6853      	ldr	r3, [r2, #4]
 8004172:	6881      	ldr	r1, [r0, #8]
 8004174:	430b      	orrs	r3, r1
 8004176:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004178:	6802      	ldr	r2, [r0, #0]
 800417a:	6893      	ldr	r3, [r2, #8]
 800417c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004180:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004182:	6802      	ldr	r2, [r0, #0]
 8004184:	6893      	ldr	r3, [r2, #8]
 8004186:	68c1      	ldr	r1, [r0, #12]
 8004188:	430b      	orrs	r3, r1
 800418a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800418c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <ADC_Init+0x130>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d057      	beq.n	8004244 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004194:	6802      	ldr	r2, [r0, #0]
 8004196:	6893      	ldr	r3, [r2, #8]
 8004198:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800419c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800419e:	6802      	ldr	r2, [r0, #0]
 80041a0:	6893      	ldr	r3, [r2, #8]
 80041a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041a8:	6802      	ldr	r2, [r0, #0]
 80041aa:	6893      	ldr	r3, [r2, #8]
 80041ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80041b0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041b2:	6802      	ldr	r2, [r0, #0]
 80041b4:	6893      	ldr	r3, [r2, #8]
 80041b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041bc:	6802      	ldr	r2, [r0, #0]
 80041be:	6893      	ldr	r3, [r2, #8]
 80041c0:	f023 0302 	bic.w	r3, r3, #2
 80041c4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041c6:	6802      	ldr	r2, [r0, #0]
 80041c8:	6893      	ldr	r3, [r2, #8]
 80041ca:	7e01      	ldrb	r1, [r0, #24]
 80041cc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80041d0:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d03f      	beq.n	800425a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041da:	6802      	ldr	r2, [r0, #0]
 80041dc:	6853      	ldr	r3, [r2, #4]
 80041de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041e2:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041e4:	6802      	ldr	r2, [r0, #0]
 80041e6:	6853      	ldr	r3, [r2, #4]
 80041e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80041ec:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041ee:	6801      	ldr	r1, [r0, #0]
 80041f0:	684b      	ldr	r3, [r1, #4]
 80041f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80041f4:	3a01      	subs	r2, #1
 80041f6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80041fa:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041fc:	6802      	ldr	r2, [r0, #0]
 80041fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004200:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004204:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004206:	6801      	ldr	r1, [r0, #0]
 8004208:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800420a:	69c2      	ldr	r2, [r0, #28]
 800420c:	3a01      	subs	r2, #1
 800420e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004212:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004214:	6802      	ldr	r2, [r0, #0]
 8004216:	6893      	ldr	r3, [r2, #8]
 8004218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800421c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800421e:	6802      	ldr	r2, [r0, #0]
 8004220:	6893      	ldr	r3, [r2, #8]
 8004222:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8004226:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800422a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800422c:	6802      	ldr	r2, [r0, #0]
 800422e:	6893      	ldr	r3, [r2, #8]
 8004230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004234:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004236:	6802      	ldr	r2, [r0, #0]
 8004238:	6893      	ldr	r3, [r2, #8]
 800423a:	6941      	ldr	r1, [r0, #20]
 800423c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004240:	6093      	str	r3, [r2, #8]
}
 8004242:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004244:	6802      	ldr	r2, [r0, #0]
 8004246:	6893      	ldr	r3, [r2, #8]
 8004248:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800424c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800424e:	6802      	ldr	r2, [r0, #0]
 8004250:	6893      	ldr	r3, [r2, #8]
 8004252:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004256:	6093      	str	r3, [r2, #8]
 8004258:	e7b0      	b.n	80041bc <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800425a:	6802      	ldr	r2, [r0, #0]
 800425c:	6853      	ldr	r3, [r2, #4]
 800425e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004262:	6053      	str	r3, [r2, #4]
 8004264:	e7ca      	b.n	80041fc <ADC_Init+0xc0>
 8004266:	bf00      	nop
 8004268:	40012300 	.word	0x40012300
 800426c:	0f000001 	.word	0x0f000001

08004270 <HAL_ADC_Init>:
  if(hadc == NULL)
 8004270:	b338      	cbz	r0, 80042c2 <HAL_ADC_Init+0x52>
{
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004276:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004278:	b143      	cbz	r3, 800428c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800427a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800427c:	f013 0f10 	tst.w	r3, #16
 8004280:	d00b      	beq.n	800429a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8004282:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004284:	2300      	movs	r3, #0
 8004286:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800428a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 800428c:	f002 fb36 	bl	80068fc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004290:	2300      	movs	r3, #0
 8004292:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8004294:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004298:	e7ef      	b.n	800427a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800429a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800429c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042a0:	f023 0302 	bic.w	r3, r3, #2
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7ff ff46 	bl	800413c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80042b0:	2000      	movs	r0, #0
 80042b2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80042b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6423      	str	r3, [r4, #64]	; 0x40
 80042c0:	e7e0      	b.n	8004284 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80042c2:	2001      	movs	r0, #1
}
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_ADC_ConfigChannel>:
{
 80042c8:	b430      	push	{r4, r5}
 80042ca:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80042d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	f000 80b7 	beq.w	8004448 <HAL_ADC_ConfigChannel+0x180>
 80042da:	2301      	movs	r3, #1
 80042dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	d93e      	bls.n	8004364 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042e6:	6805      	ldr	r5, [r0, #0]
 80042e8:	68ea      	ldr	r2, [r5, #12]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042f0:	3b1e      	subs	r3, #30
 80042f2:	2407      	movs	r4, #7
 80042f4:	fa04 f303 	lsl.w	r3, r4, r3
 80042f8:	ea22 0303 	bic.w	r3, r2, r3
 80042fc:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042fe:	6805      	ldr	r5, [r0, #0]
 8004300:	68ea      	ldr	r2, [r5, #12]
 8004302:	688c      	ldr	r4, [r1, #8]
 8004304:	880b      	ldrh	r3, [r1, #0]
 8004306:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800430a:	3b1e      	subs	r3, #30
 800430c:	fa04 f303 	lsl.w	r3, r4, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8004314:	684b      	ldr	r3, [r1, #4]
 8004316:	2b06      	cmp	r3, #6
 8004318:	d83a      	bhi.n	8004390 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800431a:	6805      	ldr	r5, [r0, #0]
 800431c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800431e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004322:	3b05      	subs	r3, #5
 8004324:	241f      	movs	r4, #31
 8004326:	fa04 f303 	lsl.w	r3, r4, r3
 800432a:	ea22 0303 	bic.w	r3, r2, r3
 800432e:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004330:	6805      	ldr	r5, [r0, #0]
 8004332:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004334:	684b      	ldr	r3, [r1, #4]
 8004336:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800433a:	3b05      	subs	r3, #5
 800433c:	880c      	ldrh	r4, [r1, #0]
 800433e:	fa04 f303 	lsl.w	r3, r4, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004346:	6802      	ldr	r2, [r0, #0]
 8004348:	4b40      	ldr	r3, [pc, #256]	; (800444c <HAL_ADC_ConfigChannel+0x184>)
 800434a:	429a      	cmp	r2, r3
 800434c:	d050      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800434e:	6802      	ldr	r2, [r0, #0]
 8004350:	4b3e      	ldr	r3, [pc, #248]	; (800444c <HAL_ADC_ConfigChannel+0x184>)
 8004352:	429a      	cmp	r2, r3
 8004354:	d055      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8004356:	2300      	movs	r3, #0
 8004358:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800435c:	4618      	mov	r0, r3
}
 800435e:	b002      	add	sp, #8
 8004360:	bc30      	pop	{r4, r5}
 8004362:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004364:	6805      	ldr	r5, [r0, #0]
 8004366:	692a      	ldr	r2, [r5, #16]
 8004368:	b29b      	uxth	r3, r3
 800436a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800436e:	2407      	movs	r4, #7
 8004370:	fa04 f303 	lsl.w	r3, r4, r3
 8004374:	ea22 0303 	bic.w	r3, r2, r3
 8004378:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800437a:	6805      	ldr	r5, [r0, #0]
 800437c:	692a      	ldr	r2, [r5, #16]
 800437e:	688c      	ldr	r4, [r1, #8]
 8004380:	880b      	ldrh	r3, [r1, #0]
 8004382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004386:	fa04 f303 	lsl.w	r3, r4, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	612b      	str	r3, [r5, #16]
 800438e:	e7c1      	b.n	8004314 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d816      	bhi.n	80043c2 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004394:	6805      	ldr	r5, [r0, #0]
 8004396:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800439c:	3b23      	subs	r3, #35	; 0x23
 800439e:	241f      	movs	r4, #31
 80043a0:	fa04 f303 	lsl.w	r3, r4, r3
 80043a4:	ea22 0303 	bic.w	r3, r2, r3
 80043a8:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043aa:	6805      	ldr	r5, [r0, #0]
 80043ac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80043ae:	684b      	ldr	r3, [r1, #4]
 80043b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043b4:	3b23      	subs	r3, #35	; 0x23
 80043b6:	880c      	ldrh	r4, [r1, #0]
 80043b8:	fa04 f303 	lsl.w	r3, r4, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	632b      	str	r3, [r5, #48]	; 0x30
 80043c0:	e7c1      	b.n	8004346 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80043c2:	6805      	ldr	r5, [r0, #0]
 80043c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80043c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043ca:	3b41      	subs	r3, #65	; 0x41
 80043cc:	241f      	movs	r4, #31
 80043ce:	fa04 f303 	lsl.w	r3, r4, r3
 80043d2:	ea22 0303 	bic.w	r3, r2, r3
 80043d6:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043d8:	6805      	ldr	r5, [r0, #0]
 80043da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80043dc:	684b      	ldr	r3, [r1, #4]
 80043de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043e2:	3b41      	subs	r3, #65	; 0x41
 80043e4:	880c      	ldrh	r4, [r1, #0]
 80043e6:	fa04 f303 	lsl.w	r3, r4, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	62eb      	str	r3, [r5, #44]	; 0x2c
 80043ee:	e7aa      	b.n	8004346 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043f0:	680b      	ldr	r3, [r1, #0]
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d1ab      	bne.n	800434e <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_ADC_ConfigChannel+0x188>)
 80043f8:	6853      	ldr	r3, [r2, #4]
 80043fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043fe:	6053      	str	r3, [r2, #4]
 8004400:	e7a5      	b.n	800434e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004402:	680b      	ldr	r3, [r1, #0]
 8004404:	3b10      	subs	r3, #16
 8004406:	2b01      	cmp	r3, #1
 8004408:	d8a5      	bhi.n	8004356 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800440a:	4a11      	ldr	r2, [pc, #68]	; (8004450 <HAL_ADC_ConfigChannel+0x188>)
 800440c:	6853      	ldr	r3, [r2, #4]
 800440e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004412:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004414:	680b      	ldr	r3, [r1, #0]
 8004416:	2b10      	cmp	r3, #16
 8004418:	d19d      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_ADC_ConfigChannel+0x18c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8004422:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004426:	f202 3283 	addw	r2, r2, #899	; 0x383
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	0c9b      	lsrs	r3, r3, #18
 8004430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004438:	e002      	b.n	8004440 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 800443a:	9b01      	ldr	r3, [sp, #4]
 800443c:	3b01      	subs	r3, #1
 800443e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f9      	bne.n	800443a <HAL_ADC_ConfigChannel+0x172>
 8004446:	e786      	b.n	8004356 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8004448:	2002      	movs	r0, #2
 800444a:	e788      	b.n	800435e <HAL_ADC_ConfigChannel+0x96>
 800444c:	40012000 	.word	0x40012000
 8004450:	40012300 	.word	0x40012300
 8004454:	20000274 	.word	0x20000274

08004458 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004458:	4a07      	ldr	r2, [pc, #28]	; (8004478 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800445a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004464:	0200      	lsls	r0, r0, #8
 8004466:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800446a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800446c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004474:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_NVIC_SetPriority+0x60>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004486:	f1c3 0407 	rsb	r4, r3, #7
 800448a:	2c04      	cmp	r4, #4
 800448c:	bf28      	it	cs
 800448e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004490:	1d1d      	adds	r5, r3, #4
 8004492:	2d06      	cmp	r5, #6
 8004494:	d918      	bls.n	80044c8 <HAL_NVIC_SetPriority+0x4c>
 8004496:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	f04f 35ff 	mov.w	r5, #4294967295
 800449c:	fa05 f404 	lsl.w	r4, r5, r4
 80044a0:	ea21 0104 	bic.w	r1, r1, r4
 80044a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a6:	fa05 f303 	lsl.w	r3, r5, r3
 80044aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80044b0:	2800      	cmp	r0, #0
 80044b2:	db0b      	blt.n	80044cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b4:	0109      	lsls	r1, r1, #4
 80044b6:	b2c9      	uxtb	r1, r1
 80044b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80044bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80044c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044c4:	bc30      	pop	{r4, r5}
 80044c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c8:	2300      	movs	r3, #0
 80044ca:	e7e5      	b.n	8004498 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044cc:	f000 000f 	and.w	r0, r0, #15
 80044d0:	0109      	lsls	r1, r1, #4
 80044d2:	b2c9      	uxtb	r1, r1
 80044d4:	4b02      	ldr	r3, [pc, #8]	; (80044e0 <HAL_NVIC_SetPriority+0x64>)
 80044d6:	5419      	strb	r1, [r3, r0]
 80044d8:	e7f4      	b.n	80044c4 <HAL_NVIC_SetPriority+0x48>
 80044da:	bf00      	nop
 80044dc:	e000ed00 	.word	0xe000ed00
 80044e0:	e000ed14 	.word	0xe000ed14

080044e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044e4:	2800      	cmp	r0, #0
 80044e6:	db07      	blt.n	80044f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e8:	f000 021f 	and.w	r2, r0, #31
 80044ec:	0940      	lsrs	r0, r0, #5
 80044ee:	2301      	movs	r3, #1
 80044f0:	4093      	lsls	r3, r2
 80044f2:	4a02      	ldr	r2, [pc, #8]	; (80044fc <HAL_NVIC_EnableIRQ+0x18>)
 80044f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000e100 	.word	0xe000e100

08004500 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004500:	3801      	subs	r0, #1
 8004502:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004506:	d20a      	bcs.n	800451e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_SYSTICK_Config+0x24>)
 800450a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <HAL_SYSTICK_Config+0x28>)
 800450e:	21f0      	movs	r1, #240	; 0xf0
 8004510:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004514:	2000      	movs	r0, #0
 8004516:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004518:	2207      	movs	r2, #7
 800451a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800451c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800451e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e010 	.word	0xe000e010
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800452c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d003      	beq.n	800453e <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800453a:	2001      	movs	r0, #1
 800453c:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800453e:	2305      	movs	r3, #5
 8004540:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004544:	6802      	ldr	r2, [r0, #0]
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800454e:	2000      	movs	r0, #0
}
 8004550:	4770      	bx	lr
	...

08004554 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004554:	2300      	movs	r3, #0
 8004556:	2b0f      	cmp	r3, #15
 8004558:	f200 80c7 	bhi.w	80046ea <HAL_GPIO_Init+0x196>
{
 800455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455e:	b083      	sub	sp, #12
 8004560:	e039      	b.n	80045d6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004562:	2204      	movs	r2, #4
 8004564:	e000      	b.n	8004568 <HAL_GPIO_Init+0x14>
 8004566:	2200      	movs	r2, #0
 8004568:	40b2      	lsls	r2, r6
 800456a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800456c:	3402      	adds	r4, #2
 800456e:	4e5f      	ldr	r6, [pc, #380]	; (80046ec <HAL_GPIO_Init+0x198>)
 8004570:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004574:	4a5e      	ldr	r2, [pc, #376]	; (80046f0 <HAL_GPIO_Init+0x19c>)
 8004576:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004578:	43ea      	mvns	r2, r5
 800457a:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800457e:	684f      	ldr	r7, [r1, #4]
 8004580:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004584:	d001      	beq.n	800458a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8004586:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800458a:	4c59      	ldr	r4, [pc, #356]	; (80046f0 <HAL_GPIO_Init+0x19c>)
 800458c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800458e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004590:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004594:	684f      	ldr	r7, [r1, #4]
 8004596:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800459a:	d001      	beq.n	80045a0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800459c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80045a0:	4c53      	ldr	r4, [pc, #332]	; (80046f0 <HAL_GPIO_Init+0x19c>)
 80045a2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80045a6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045aa:	684f      	ldr	r7, [r1, #4]
 80045ac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80045b0:	d001      	beq.n	80045b6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80045b2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80045b6:	4c4e      	ldr	r4, [pc, #312]	; (80046f0 <HAL_GPIO_Init+0x19c>)
 80045b8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80045ba:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045be:	684e      	ldr	r6, [r1, #4]
 80045c0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80045c4:	d001      	beq.n	80045ca <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80045c6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80045ca:	4c49      	ldr	r4, [pc, #292]	; (80046f0 <HAL_GPIO_Init+0x19c>)
 80045cc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ce:	3301      	adds	r3, #1
 80045d0:	2b0f      	cmp	r3, #15
 80045d2:	f200 8088 	bhi.w	80046e6 <HAL_GPIO_Init+0x192>
    ioposition = 0x01U << position;
 80045d6:	2201      	movs	r2, #1
 80045d8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045da:	680c      	ldr	r4, [r1, #0]
 80045dc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80045e0:	ea32 0404 	bics.w	r4, r2, r4
 80045e4:	d1f3      	bne.n	80045ce <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e6:	684c      	ldr	r4, [r1, #4]
 80045e8:	1e66      	subs	r6, r4, #1
 80045ea:	2e01      	cmp	r6, #1
 80045ec:	d903      	bls.n	80045f6 <HAL_GPIO_Init+0xa2>
 80045ee:	2c11      	cmp	r4, #17
 80045f0:	d001      	beq.n	80045f6 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f2:	2c12      	cmp	r4, #18
 80045f4:	d112      	bne.n	800461c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80045f6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f8:	005f      	lsls	r7, r3, #1
 80045fa:	2403      	movs	r4, #3
 80045fc:	40bc      	lsls	r4, r7
 80045fe:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004602:	68cc      	ldr	r4, [r1, #12]
 8004604:	40bc      	lsls	r4, r7
 8004606:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004608:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800460a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800460c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004610:	684c      	ldr	r4, [r1, #4]
 8004612:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800461a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800461c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800461e:	005e      	lsls	r6, r3, #1
 8004620:	2403      	movs	r4, #3
 8004622:	40b4      	lsls	r4, r6
 8004624:	43e2      	mvns	r2, r4
 8004626:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800462a:	688c      	ldr	r4, [r1, #8]
 800462c:	40b4      	lsls	r4, r6
 800462e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8004630:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004632:	684c      	ldr	r4, [r1, #4]
 8004634:	2c02      	cmp	r4, #2
 8004636:	d001      	beq.n	800463c <HAL_GPIO_Init+0xe8>
 8004638:	2c12      	cmp	r4, #18
 800463a:	d113      	bne.n	8004664 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 800463c:	08df      	lsrs	r7, r3, #3
 800463e:	3708      	adds	r7, #8
 8004640:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004644:	f003 0407 	and.w	r4, r3, #7
 8004648:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800464c:	240f      	movs	r4, #15
 800464e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004652:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004656:	690c      	ldr	r4, [r1, #16]
 8004658:	fa04 f40c 	lsl.w	r4, r4, ip
 800465c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004660:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8004664:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004666:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004668:	684a      	ldr	r2, [r1, #4]
 800466a:	f002 0203 	and.w	r2, r2, #3
 800466e:	40b2      	lsls	r2, r6
 8004670:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004672:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004674:	684a      	ldr	r2, [r1, #4]
 8004676:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800467a:	d0a8      	beq.n	80045ce <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467c:	2200      	movs	r2, #0
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_GPIO_Init+0x1a0>)
 8004682:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004684:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004688:	6454      	str	r4, [r2, #68]	; 0x44
 800468a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800468c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004690:	9201      	str	r2, [sp, #4]
 8004692:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004694:	089c      	lsrs	r4, r3, #2
 8004696:	1ca6      	adds	r6, r4, #2
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <HAL_GPIO_Init+0x198>)
 800469a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	0096      	lsls	r6, r2, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	40b2      	lsls	r2, r6
 80046a8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ac:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <HAL_GPIO_Init+0x1a4>)
 80046ae:	4290      	cmp	r0, r2
 80046b0:	f43f af59 	beq.w	8004566 <HAL_GPIO_Init+0x12>
 80046b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046b8:	4290      	cmp	r0, r2
 80046ba:	d00e      	beq.n	80046da <HAL_GPIO_Init+0x186>
 80046bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c0:	4290      	cmp	r0, r2
 80046c2:	d00c      	beq.n	80046de <HAL_GPIO_Init+0x18a>
 80046c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c8:	4290      	cmp	r0, r2
 80046ca:	d00a      	beq.n	80046e2 <HAL_GPIO_Init+0x18e>
 80046cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d0:	4290      	cmp	r0, r2
 80046d2:	f43f af46 	beq.w	8004562 <HAL_GPIO_Init+0xe>
 80046d6:	2207      	movs	r2, #7
 80046d8:	e746      	b.n	8004568 <HAL_GPIO_Init+0x14>
 80046da:	2201      	movs	r2, #1
 80046dc:	e744      	b.n	8004568 <HAL_GPIO_Init+0x14>
 80046de:	2202      	movs	r2, #2
 80046e0:	e742      	b.n	8004568 <HAL_GPIO_Init+0x14>
 80046e2:	2203      	movs	r2, #3
 80046e4:	e740      	b.n	8004568 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80046e6:	b003      	add	sp, #12
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ea:	4770      	bx	lr
 80046ec:	40013800 	.word	0x40013800
 80046f0:	40013c00 	.word	0x40013c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40020000 	.word	0x40020000

080046fc <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	d87c      	bhi.n	80047fc <HAL_GPIO_DeInit+0x100>
{
 8004702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004704:	e02d      	b.n	8004762 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004706:	2604      	movs	r6, #4
 8004708:	e000      	b.n	800470c <HAL_GPIO_DeInit+0x10>
 800470a:	2600      	movs	r6, #0
 800470c:	fa06 f404 	lsl.w	r4, r6, r4
 8004710:	42ac      	cmp	r4, r5
 8004712:	d057      	beq.n	80047c4 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004714:	6805      	ldr	r5, [r0, #0]
 8004716:	005c      	lsls	r4, r3, #1
 8004718:	2603      	movs	r6, #3
 800471a:	fa06 f404 	lsl.w	r4, r6, r4
 800471e:	ea25 0504 	bic.w	r5, r5, r4
 8004722:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004724:	fa23 f506 	lsr.w	r5, r3, r6
 8004728:	3508      	adds	r5, #8
 800472a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800472e:	f003 0707 	and.w	r7, r3, #7
 8004732:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8004736:	270f      	movs	r7, #15
 8004738:	fa07 f70c 	lsl.w	r7, r7, ip
 800473c:	ea26 0607 	bic.w	r6, r6, r7
 8004740:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004744:	68c5      	ldr	r5, [r0, #12]
 8004746:	ea25 0504 	bic.w	r5, r5, r4
 800474a:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800474c:	6845      	ldr	r5, [r0, #4]
 800474e:	ea25 0202 	bic.w	r2, r5, r2
 8004752:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004754:	6882      	ldr	r2, [r0, #8]
 8004756:	ea22 0404 	bic.w	r4, r2, r4
 800475a:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475c:	3301      	adds	r3, #1
 800475e:	2b0f      	cmp	r3, #15
 8004760:	d84b      	bhi.n	80047fa <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8004762:	2201      	movs	r2, #1
 8004764:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8004766:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 800476a:	ea32 0401 	bics.w	r4, r2, r1
 800476e:	d1f5      	bne.n	800475c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004770:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004774:	f10c 0502 	add.w	r5, ip, #2
 8004778:	4c21      	ldr	r4, [pc, #132]	; (8004800 <HAL_GPIO_DeInit+0x104>)
 800477a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800477e:	f003 0403 	and.w	r4, r3, #3
 8004782:	00a4      	lsls	r4, r4, #2
 8004784:	260f      	movs	r6, #15
 8004786:	fa06 fe04 	lsl.w	lr, r6, r4
 800478a:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800478e:	4e1d      	ldr	r6, [pc, #116]	; (8004804 <HAL_GPIO_DeInit+0x108>)
 8004790:	42b0      	cmp	r0, r6
 8004792:	d0ba      	beq.n	800470a <HAL_GPIO_DeInit+0xe>
 8004794:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004798:	42b0      	cmp	r0, r6
 800479a:	d00d      	beq.n	80047b8 <HAL_GPIO_DeInit+0xbc>
 800479c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047a0:	42b0      	cmp	r0, r6
 80047a2:	d00b      	beq.n	80047bc <HAL_GPIO_DeInit+0xc0>
 80047a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047a8:	42b0      	cmp	r0, r6
 80047aa:	d009      	beq.n	80047c0 <HAL_GPIO_DeInit+0xc4>
 80047ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047b0:	42b0      	cmp	r0, r6
 80047b2:	d0a8      	beq.n	8004706 <HAL_GPIO_DeInit+0xa>
 80047b4:	2607      	movs	r6, #7
 80047b6:	e7a9      	b.n	800470c <HAL_GPIO_DeInit+0x10>
 80047b8:	2601      	movs	r6, #1
 80047ba:	e7a7      	b.n	800470c <HAL_GPIO_DeInit+0x10>
 80047bc:	2602      	movs	r6, #2
 80047be:	e7a5      	b.n	800470c <HAL_GPIO_DeInit+0x10>
 80047c0:	2603      	movs	r6, #3
 80047c2:	e7a3      	b.n	800470c <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80047c4:	4c10      	ldr	r4, [pc, #64]	; (8004808 <HAL_GPIO_DeInit+0x10c>)
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	ea25 0507 	bic.w	r5, r5, r7
 80047cc:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047ce:	6865      	ldr	r5, [r4, #4]
 80047d0:	ea25 0507 	bic.w	r5, r5, r7
 80047d4:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047d6:	68a5      	ldr	r5, [r4, #8]
 80047d8:	ea25 0507 	bic.w	r5, r5, r7
 80047dc:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047de:	68e5      	ldr	r5, [r4, #12]
 80047e0:	ea25 0707 	bic.w	r7, r5, r7
 80047e4:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047e6:	4d06      	ldr	r5, [pc, #24]	; (8004800 <HAL_GPIO_DeInit+0x104>)
 80047e8:	f10c 0402 	add.w	r4, ip, #2
 80047ec:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80047f0:	ea26 060e 	bic.w	r6, r6, lr
 80047f4:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 80047f8:	e78c      	b.n	8004714 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 80047fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40013800 	.word	0x40013800
 8004804:	40020000 	.word	0x40020000
 8004808:	40013c00 	.word	0x40013c00

0800480c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800480c:	b10a      	cbz	r2, 8004812 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	6181      	str	r1, [r0, #24]
 8004810:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004812:	0409      	lsls	r1, r1, #16
 8004814:	6181      	str	r1, [r0, #24]
  }
}
 8004816:	4770      	bx	lr

08004818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004818:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4203      	tst	r3, r0
 8004820:	d100      	bne.n	8004824 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004822:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004824:	4b02      	ldr	r3, [pc, #8]	; (8004830 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004826:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004828:	f001 ff8e 	bl	8006748 <HAL_GPIO_EXTI_Callback>
}
 800482c:	e7f9      	b.n	8004822 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800482e:	bf00      	nop
 8004830:	40013c00 	.word	0x40013c00

08004834 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004834:	6803      	ldr	r3, [r0, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800483c:	d101      	bne.n	8004842 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800483e:	2000      	movs	r0, #0
}
 8004840:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004846:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004848:	2300      	movs	r3, #0
 800484a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800484c:	2220      	movs	r2, #32
 800484e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004852:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004856:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004858:	f042 0204 	orr.w	r2, r2, #4
 800485c:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800485e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8004862:	2001      	movs	r0, #1
 8004864:	4770      	bx	lr

08004866 <I2C_WaitOnFlagUntilTimeout>:
{
 8004866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	4607      	mov	r7, r0
 800486c:	460d      	mov	r5, r1
 800486e:	4690      	mov	r8, r2
 8004870:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004872:	e022      	b.n	80048ba <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004874:	f7ff fc5c 	bl	8004130 <HAL_GetTick>
 8004878:	9b06      	ldr	r3, [sp, #24]
 800487a:	1ac0      	subs	r0, r0, r3
 800487c:	42b0      	cmp	r0, r6
 800487e:	d800      	bhi.n	8004882 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8004880:	b9de      	cbnz	r6, 80048ba <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004882:	2300      	movs	r3, #0
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004886:	2220      	movs	r2, #32
 8004888:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800488c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004892:	f042 0220 	orr.w	r2, r2, #32
 8004896:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004898:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 800489c:	2001      	movs	r0, #1
 800489e:	e01a      	b.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699c      	ldr	r4, [r3, #24]
 80048a4:	ea25 0404 	bic.w	r4, r5, r4
 80048a8:	b2a4      	uxth	r4, r4
 80048aa:	fab4 f484 	clz	r4, r4
 80048ae:	0964      	lsrs	r4, r4, #5
 80048b0:	45a0      	cmp	r8, r4
 80048b2:	d10f      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80048b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80048b8:	d1dc      	bne.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ba:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d1ee      	bne.n	80048a0 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695c      	ldr	r4, [r3, #20]
 80048c6:	ea25 0404 	bic.w	r4, r5, r4
 80048ca:	b2a4      	uxth	r4, r4
 80048cc:	fab4 f484 	clz	r4, r4
 80048d0:	0964      	lsrs	r4, r4, #5
 80048d2:	e7ed      	b.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80048d4:	2000      	movs	r0, #0
}
 80048d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80048da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048de:	4605      	mov	r5, r0
 80048e0:	460e      	mov	r6, r1
 80048e2:	4617      	mov	r7, r2
 80048e4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048e6:	e03d      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048f6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048fc:	2220      	movs	r2, #32
 80048fe:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004902:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004906:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004908:	f042 0204 	orr.w	r2, r2, #4
 800490c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800490e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	e034      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7ff fc0b 	bl	8004130 <HAL_GetTick>
 800491a:	eba0 0008 	sub.w	r0, r0, r8
 800491e:	42b8      	cmp	r0, r7
 8004920:	d800      	bhi.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8004922:	b9ff      	cbnz	r7, 8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004924:	2300      	movs	r3, #0
 8004926:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	2220      	movs	r2, #32
 800492a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800493a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800493e:	2001      	movs	r0, #1
 8004940:	e01e      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	699c      	ldr	r4, [r3, #24]
 8004946:	ea26 0404 	bic.w	r4, r6, r4
 800494a:	b2a4      	uxth	r4, r4
 800494c:	3c00      	subs	r4, #0
 800494e:	bf18      	it	ne
 8004950:	2401      	movne	r4, #1
 8004952:	b1a4      	cbz	r4, 800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800495c:	d1c4      	bne.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800495e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004962:	d1d8      	bne.n	8004916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004964:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8004968:	2b01      	cmp	r3, #1
 800496a:	d1ea      	bne.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	695c      	ldr	r4, [r3, #20]
 8004970:	ea26 0404 	bic.w	r4, r6, r4
 8004974:	b2a4      	uxth	r4, r4
 8004976:	3c00      	subs	r4, #0
 8004978:	bf18      	it	ne
 800497a:	2401      	movne	r4, #1
 800497c:	e7e9      	b.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800497e:	2000      	movs	r0, #0
}
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004984 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	4604      	mov	r4, r0
 8004988:	460d      	mov	r5, r1
 800498a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004994:	d11c      	bne.n	80049d0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff ff4c 	bl	8004834 <I2C_IsAcknowledgeFailed>
 800499c:	b9d0      	cbnz	r0, 80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800499e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80049a2:	d0f3      	beq.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a4:	f7ff fbc4 	bl	8004130 <HAL_GetTick>
 80049a8:	1b80      	subs	r0, r0, r6
 80049aa:	42a8      	cmp	r0, r5
 80049ac:	d801      	bhi.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	d1ec      	bne.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	2220      	movs	r2, #32
 80049b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049c2:	f042 0220 	orr.w	r2, r2, #32
 80049c6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80049cc:	2001      	movs	r0, #1
 80049ce:	e000      	b.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80049d0:	2000      	movs	r0, #0
}
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80049d4:	2001      	movs	r0, #1
 80049d6:	e7fc      	b.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080049d8 <I2C_RequestMemoryWrite>:
{
 80049d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049dc:	b085      	sub	sp, #20
 80049de:	4604      	mov	r4, r0
 80049e0:	460d      	mov	r5, r1
 80049e2:	4691      	mov	r9, r2
 80049e4:	461f      	mov	r7, r3
 80049e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80049ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ec:	6803      	ldr	r3, [r0, #0]
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80049f4:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	9600      	str	r6, [sp, #0]
 80049f8:	4643      	mov	r3, r8
 80049fa:	2200      	movs	r2, #0
 80049fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a00:	f7ff ff31 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 8004a04:	b960      	cbnz	r0, 8004a20 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004a0c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a0e:	4633      	mov	r3, r6
 8004a10:	4642      	mov	r2, r8
 8004a12:	4926      	ldr	r1, [pc, #152]	; (8004aac <I2C_RequestMemoryWrite+0xd4>)
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7ff ff60 	bl	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1a:	b168      	cbz	r0, 8004a38 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	e008      	b.n	8004a32 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a28:	d002      	beq.n	8004a30 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a2e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004a30:	2003      	movs	r0, #3
}
 8004a32:	b005      	add	sp, #20
 8004a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9303      	str	r3, [sp, #12]
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	9203      	str	r2, [sp, #12]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f7ff ff99 	bl	8004984 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a52:	b930      	cbnz	r0, 8004a62 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a54:	2f01      	cmp	r7, #1
 8004a56:	d10f      	bne.n	8004a78 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	fa5f f689 	uxtb.w	r6, r9
 8004a5e:	611e      	str	r6, [r3, #16]
 8004a60:	e7e7      	b.n	8004a32 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d001      	beq.n	8004a6c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8004a68:	2001      	movs	r0, #1
 8004a6a:	e7e2      	b.n	8004a32 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e7f7      	b.n	8004a68 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004a7e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a80:	4632      	mov	r2, r6
 8004a82:	4641      	mov	r1, r8
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff ff7d 	bl	8004984 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a8a:	b920      	cbnz	r0, 8004a96 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	fa5f f689 	uxtb.w	r6, r9
 8004a92:	611e      	str	r6, [r3, #16]
 8004a94:	e7cd      	b.n	8004a32 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	e7c8      	b.n	8004a32 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e7f7      	b.n	8004a9c <I2C_RequestMemoryWrite+0xc4>
 8004aac:	00010002 	.word	0x00010002

08004ab0 <I2C_RequestMemoryRead>:
{
 8004ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	460d      	mov	r5, r1
 8004aba:	4616      	mov	r6, r2
 8004abc:	4699      	mov	r9, r3
 8004abe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004ac0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac4:	6802      	ldr	r2, [r0, #0]
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004acc:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ace:	6803      	ldr	r3, [r0, #0]
 8004ad0:	6819      	ldr	r1, [r3, #0]
 8004ad2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004ad6:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	f8cd 8000 	str.w	r8, [sp]
 8004adc:	463b      	mov	r3, r7
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae4:	f7ff febf 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	b970      	cbnz	r0, 8004b08 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aea:	fa5f fa85 	uxtb.w	sl, r5
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004af4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af6:	4643      	mov	r3, r8
 8004af8:	463a      	mov	r2, r7
 8004afa:	4941      	ldr	r1, [pc, #260]	; (8004c00 <I2C_RequestMemoryRead+0x150>)
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff feec 	bl	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b02:	b168      	cbz	r0, 8004b20 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8004b04:	2001      	movs	r0, #1
 8004b06:	e008      	b.n	8004b1a <I2C_RequestMemoryRead+0x6a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b10:	d002      	beq.n	8004b18 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b16:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004b18:	2003      	movs	r0, #3
}
 8004b1a:	b004      	add	sp, #16
 8004b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b20:	2300      	movs	r3, #0
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	9203      	str	r2, [sp, #12]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	9303      	str	r3, [sp, #12]
 8004b2e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b30:	4642      	mov	r2, r8
 8004b32:	4639      	mov	r1, r7
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff ff25 	bl	8004984 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3a:	b980      	cbnz	r0, 8004b5e <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b3c:	f1b9 0f01 	cmp.w	r9, #1
 8004b40:	d118      	bne.n	8004b74 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	b2f6      	uxtb	r6, r6
 8004b46:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b48:	4642      	mov	r2, r8
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff ff19 	bl	8004984 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b52:	b368      	cbz	r0, 8004bb0 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d024      	beq.n	8004ba4 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	e7dd      	b.n	8004b1a <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d001      	beq.n	8004b68 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8004b64:	2001      	movs	r0, #1
 8004b66:	e7d8      	b.n	8004b1a <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e7f7      	b.n	8004b64 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	0a32      	lsrs	r2, r6, #8
 8004b78:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	4642      	mov	r2, r8
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff ff00 	bl	8004984 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	b918      	cbnz	r0, 8004b8e <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	b2f6      	uxtb	r6, r6
 8004b8a:	611e      	str	r6, [r3, #16]
 8004b8c:	e7dc      	b.n	8004b48 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d001      	beq.n	8004b98 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1
 8004b96:	e7c0      	b.n	8004b1a <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e7f7      	b.n	8004b94 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	6822      	ldr	r2, [r4, #0]
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e7d4      	b.n	8004b5a <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bba:	f8cd 8000 	str.w	r8, [sp]
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff fe4d 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	b968      	cbnz	r0, 8004bea <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	f04a 0301 	orr.w	r3, sl, #1
 8004bd4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd6:	4643      	mov	r3, r8
 8004bd8:	463a      	mov	r2, r7
 8004bda:	4909      	ldr	r1, [pc, #36]	; (8004c00 <I2C_RequestMemoryRead+0x150>)
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff fe7c 	bl	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d099      	beq.n	8004b1a <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8004be6:	2001      	movs	r0, #1
 8004be8:	e797      	b.n	8004b1a <I2C_RequestMemoryRead+0x6a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004bf2:	d002      	beq.n	8004bfa <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
 8004bfc:	e78d      	b.n	8004b1a <I2C_RequestMemoryRead+0x6a>
 8004bfe:	bf00      	nop
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4604      	mov	r4, r0
 8004c08:	460d      	mov	r5, r1
 8004c0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f013 0f04 	tst.w	r3, #4
 8004c14:	d11c      	bne.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff fe0c 	bl	8004834 <I2C_IsAcknowledgeFailed>
 8004c1c:	b9d0      	cbnz	r0, 8004c54 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c22:	d0f3      	beq.n	8004c0c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c24:	f7ff fa84 	bl	8004130 <HAL_GetTick>
 8004c28:	1b80      	subs	r0, r0, r6
 8004c2a:	42a8      	cmp	r0, r5
 8004c2c:	d801      	bhi.n	8004c32 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	d1ec      	bne.n	8004c0c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	2220      	movs	r2, #32
 8004c38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c42:	f042 0220 	orr.w	r2, r2, #32
 8004c46:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e000      	b.n	8004c52 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004c50:	2000      	movs	r0, #0
}
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
 8004c56:	e7fc      	b.n	8004c52 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08004c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	6959      	ldr	r1, [r3, #20]
 8004c64:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004c68:	d129      	bne.n	8004cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c6a:	6959      	ldr	r1, [r3, #20]
 8004c6c:	f011 0f10 	tst.w	r1, #16
 8004c70:	d115      	bne.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7ff fa5d 	bl	8004130 <HAL_GetTick>
 8004c76:	1b80      	subs	r0, r0, r6
 8004c78:	42a0      	cmp	r0, r4
 8004c7a:	d801      	bhi.n	8004c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d1ef      	bne.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c84:	2220      	movs	r2, #32
 8004c86:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c8e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004c90:	f042 0220 	orr.w	r2, r2, #32
 8004c94:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004c96:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004c9a:	2001      	movs	r0, #1
}
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9e:	f06f 0210 	mvn.w	r2, #16
 8004ca2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cae:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cb2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004cb4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004cb6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
 8004cbc:	e7ee      	b.n	8004c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e7ec      	b.n	8004c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

08004cc2 <HAL_I2C_MspInit>:
}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f000 80cc 	beq.w	8004e62 <HAL_I2C_Init+0x19e>
{
 8004cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ccc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d077      	beq.n	8004dc6 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd6:	2324      	movs	r3, #36	; 0x24
 8004cd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cee:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cf8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cfa:	f000 fe17 	bl	800592c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <HAL_I2C_Init+0x1a8>)
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d864      	bhi.n	8004dd0 <HAL_I2C_Init+0x10c>
 8004d06:	4b5a      	ldr	r3, [pc, #360]	; (8004e70 <HAL_I2C_Init+0x1ac>)
 8004d08:	4298      	cmp	r0, r3
 8004d0a:	bf8c      	ite	hi
 8004d0c:	2300      	movhi	r3, #0
 8004d0e:	2301      	movls	r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 80a8 	bne.w	8004e66 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8004d16:	4d57      	ldr	r5, [pc, #348]	; (8004e74 <HAL_I2C_Init+0x1b0>)
 8004d18:	fba5 3500 	umull	r3, r5, r5, r0
 8004d1c:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d1e:	6826      	ldr	r6, [r4, #0]
 8004d20:	6871      	ldr	r1, [r6, #4]
 8004d22:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004d26:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8004d2a:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	6a0b      	ldr	r3, [r1, #32]
 8004d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d34:	6865      	ldr	r5, [r4, #4]
 8004d36:	4a4d      	ldr	r2, [pc, #308]	; (8004e6c <HAL_I2C_Init+0x1a8>)
 8004d38:	4295      	cmp	r5, r2
 8004d3a:	d84f      	bhi.n	8004ddc <HAL_I2C_Init+0x118>
 8004d3c:	1c7a      	adds	r2, r7, #1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d42:	6825      	ldr	r5, [r4, #0]
 8004d44:	69e9      	ldr	r1, [r5, #28]
 8004d46:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004d4a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	4a46      	ldr	r2, [pc, #280]	; (8004e6c <HAL_I2C_Init+0x1a8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d84c      	bhi.n	8004df0 <HAL_I2C_Init+0x12c>
 8004d56:	3801      	subs	r0, #1
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d64:	4218      	tst	r0, r3
 8004d66:	d078      	beq.n	8004e5a <HAL_I2C_Init+0x196>
 8004d68:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d70:	6821      	ldr	r1, [r4, #0]
 8004d72:	680b      	ldr	r3, [r1, #0]
 8004d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d78:	69e2      	ldr	r2, [r4, #28]
 8004d7a:	6a20      	ldr	r0, [r4, #32]
 8004d7c:	4302      	orrs	r2, r0
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d82:	6821      	ldr	r1, [r4, #0]
 8004d84:	688b      	ldr	r3, [r1, #8]
 8004d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8e:	6922      	ldr	r2, [r4, #16]
 8004d90:	68e0      	ldr	r0, [r4, #12]
 8004d92:	4302      	orrs	r2, r0
 8004d94:	4313      	orrs	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	68cb      	ldr	r3, [r1, #12]
 8004d9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004da0:	6962      	ldr	r2, [r4, #20]
 8004da2:	69a0      	ldr	r0, [r4, #24]
 8004da4:	4302      	orrs	r2, r0
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db4:	2000      	movs	r0, #0
 8004db6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	2320      	movs	r3, #32
 8004dba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004dc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004dca:	f7ff ff7a 	bl	8004cc2 <HAL_I2C_MspInit>
 8004dce:	e782      	b.n	8004cd6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dd0:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_I2C_Init+0x1b4>)
 8004dd2:	4298      	cmp	r0, r3
 8004dd4:	bf8c      	ite	hi
 8004dd6:	2300      	movhi	r3, #0
 8004dd8:	2301      	movls	r3, #1
 8004dda:	e799      	b.n	8004d10 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ddc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004de0:	fb02 f207 	mul.w	r2, r2, r7
 8004de4:	4d25      	ldr	r5, [pc, #148]	; (8004e7c <HAL_I2C_Init+0x1b8>)
 8004de6:	fba5 5202 	umull	r5, r2, r5, r2
 8004dea:	0992      	lsrs	r2, r2, #6
 8004dec:	3201      	adds	r2, #1
 8004dee:	e7a6      	b.n	8004d3e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004df0:	68a2      	ldr	r2, [r4, #8]
 8004df2:	b9ba      	cbnz	r2, 8004e24 <HAL_I2C_Init+0x160>
 8004df4:	1e46      	subs	r6, r0, #1
 8004df6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8004dfa:	fbb6 f6f7 	udiv	r6, r6, r7
 8004dfe:	3601      	adds	r6, #1
 8004e00:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8004e04:	fab6 f686 	clz	r6, r6
 8004e08:	0976      	lsrs	r6, r6, #5
 8004e0a:	bb46      	cbnz	r6, 8004e5e <HAL_I2C_Init+0x19a>
 8004e0c:	b9c2      	cbnz	r2, 8004e40 <HAL_I2C_Init+0x17c>
 8004e0e:	1e42      	subs	r2, r0, #1
 8004e10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e18:	3201      	adds	r2, #1
 8004e1a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004e1e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8004e22:	e7a3      	b.n	8004d6c <HAL_I2C_Init+0xa8>
 8004e24:	1e46      	subs	r6, r0, #1
 8004e26:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8004e2a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004e2e:	fbb6 f6f7 	udiv	r6, r6, r7
 8004e32:	3601      	adds	r6, #1
 8004e34:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8004e38:	fab6 f686 	clz	r6, r6
 8004e3c:	0976      	lsrs	r6, r6, #5
 8004e3e:	e7e4      	b.n	8004e0a <HAL_I2C_Init+0x146>
 8004e40:	1e42      	subs	r2, r0, #1
 8004e42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e4e:	3201      	adds	r2, #1
 8004e50:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004e54:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8004e58:	e788      	b.n	8004d6c <HAL_I2C_Init+0xa8>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	e786      	b.n	8004d6c <HAL_I2C_Init+0xa8>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e784      	b.n	8004d6c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
}
 8004e64:	4770      	bx	lr
    return HAL_ERROR;
 8004e66:	2001      	movs	r0, #1
 8004e68:	e7ac      	b.n	8004dc4 <HAL_I2C_Init+0x100>
 8004e6a:	bf00      	nop
 8004e6c:	000186a0 	.word	0x000186a0
 8004e70:	001e847f 	.word	0x001e847f
 8004e74:	431bde83 	.word	0x431bde83
 8004e78:	003d08ff 	.word	0x003d08ff
 8004e7c:	10624dd3 	.word	0x10624dd3

08004e80 <HAL_I2C_MspDeInit>:
}
 8004e80:	4770      	bx	lr

08004e82 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8004e82:	b1a8      	cbz	r0, 8004eb0 <HAL_I2C_DeInit+0x2e>
{
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e88:	2324      	movs	r3, #36	; 0x24
 8004e8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004e8e:	6802      	ldr	r2, [r0, #0]
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004e98:	f7ff fff2 	bl	8004e80 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ea0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ea4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ea6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8004eaa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004eae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004eb0:	2001      	movs	r0, #1
}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_I2C_Mem_Write>:
{
 8004eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	4604      	mov	r4, r0
 8004ebc:	460f      	mov	r7, r1
 8004ebe:	4690      	mov	r8, r2
 8004ec0:	4699      	mov	r9, r3
 8004ec2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004ec4:	f7ff f934 	bl	8004130 <HAL_GetTick>
 8004ec8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eca:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004ece:	b2c0      	uxtb	r0, r0
 8004ed0:	2820      	cmp	r0, #32
 8004ed2:	d003      	beq.n	8004edc <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004ed4:	2002      	movs	r0, #2
}
 8004ed6:	b003      	add	sp, #12
 8004ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004edc:	9500      	str	r5, [sp, #0]
 8004ede:	2319      	movs	r3, #25
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	494b      	ldr	r1, [pc, #300]	; (8005010 <HAL_I2C_Mem_Write+0x15c>)
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fcbe 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f040 8089 	bne.w	8005002 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8004ef0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	f000 8086 	beq.w	8005006 <HAL_I2C_Mem_Write+0x152>
 8004efa:	2301      	movs	r3, #1
 8004efc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	f012 0f01 	tst.w	r2, #1
 8004f08:	d103      	bne.n	8004f12 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6813      	ldr	r3, [r2, #0]
 8004f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f1a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f1c:	2321      	movs	r3, #33	; 0x21
 8004f1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f30:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8004f34:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f38:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <HAL_I2C_Mem_Write+0x160>)
 8004f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f3e:	9501      	str	r5, [sp, #4]
 8004f40:	9600      	str	r6, [sp, #0]
 8004f42:	464b      	mov	r3, r9
 8004f44:	4642      	mov	r2, r8
 8004f46:	4639      	mov	r1, r7
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7ff fd45 	bl	80049d8 <I2C_RequestMemoryWrite>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d15b      	bne.n	800500a <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8004f52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d035      	beq.n	8004fc4 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f58:	462a      	mov	r2, r5
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff fd11 	bl	8004984 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f62:	bb20      	cbnz	r0, 8004fae <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	7812      	ldrb	r2, [r2, #0]
 8004f6a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f6e:	1c4b      	adds	r3, r1, #1
 8004f70:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004f72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004f74:	3a01      	subs	r2, #1
 8004f76:	b292      	uxth	r2, r2
 8004f78:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004f7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	6958      	ldr	r0, [r3, #20]
 8004f88:	f010 0f04 	tst.w	r0, #4
 8004f8c:	d0e1      	beq.n	8004f52 <HAL_I2C_Mem_Write+0x9e>
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d0df      	beq.n	8004f52 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f92:	784a      	ldrb	r2, [r1, #1]
 8004f94:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f98:	3301      	adds	r3, #1
 8004f9a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004f9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004fa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004fac:	e7d1      	b.n	8004f52 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d001      	beq.n	8004fb8 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	e78e      	b.n	8004ed6 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e7f7      	b.n	8004fb4 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc4:	462a      	mov	r2, r5
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff fe1b 	bl	8004c04 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fce:	b150      	cbz	r0, 8004fe6 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e77d      	b.n	8004ed6 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	6813      	ldr	r3, [r2, #0]
 8004fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e7f7      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	6813      	ldr	r3, [r2, #0]
 8004fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004ffc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005000:	e769      	b.n	8004ed6 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8005002:	2002      	movs	r0, #2
 8005004:	e767      	b.n	8004ed6 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8005006:	2002      	movs	r0, #2
 8005008:	e765      	b.n	8004ed6 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800500a:	2001      	movs	r0, #1
 800500c:	e763      	b.n	8004ed6 <HAL_I2C_Mem_Write+0x22>
 800500e:	bf00      	nop
 8005010:	00100002 	.word	0x00100002
 8005014:	ffff0000 	.word	0xffff0000

08005018 <HAL_I2C_Mem_Read>:
{
 8005018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800501c:	b087      	sub	sp, #28
 800501e:	4604      	mov	r4, r0
 8005020:	460f      	mov	r7, r1
 8005022:	4690      	mov	r8, r2
 8005024:	4699      	mov	r9, r3
 8005026:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005028:	f7ff f882 	bl	8004130 <HAL_GetTick>
 800502c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800502e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8005032:	b2c0      	uxtb	r0, r0
 8005034:	2820      	cmp	r0, #32
 8005036:	d004      	beq.n	8005042 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8005038:	2702      	movs	r7, #2
}
 800503a:	4638      	mov	r0, r7
 800503c:	b007      	add	sp, #28
 800503e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005042:	9500      	str	r5, [sp, #0]
 8005044:	2319      	movs	r3, #25
 8005046:	2201      	movs	r2, #1
 8005048:	499d      	ldr	r1, [pc, #628]	; (80052c0 <HAL_I2C_Mem_Read+0x2a8>)
 800504a:	4620      	mov	r0, r4
 800504c:	f7ff fc0b 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 8144 	bne.w	80052de <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 8005056:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	f000 8141 	beq.w	80052e2 <HAL_I2C_Mem_Read+0x2ca>
 8005060:	2301      	movs	r3, #1
 8005062:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f012 0f01 	tst.w	r2, #1
 800506e:	d103      	bne.n	8005078 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005078:	6822      	ldr	r2, [r4, #0]
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005080:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005082:	2322      	movs	r3, #34	; 0x22
 8005084:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005088:	2340      	movs	r3, #64	; 0x40
 800508a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508e:	2300      	movs	r3, #0
 8005090:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005094:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005096:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800509a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800509c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800509e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a0:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <HAL_I2C_Mem_Read+0x2ac>)
 80050a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050a4:	9501      	str	r5, [sp, #4]
 80050a6:	9600      	str	r6, [sp, #0]
 80050a8:	464b      	mov	r3, r9
 80050aa:	4642      	mov	r2, r8
 80050ac:	4639      	mov	r1, r7
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff fcfe 	bl	8004ab0 <I2C_RequestMemoryRead>
 80050b4:	4607      	mov	r7, r0
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f040 8115 	bne.w	80052e6 <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 80050bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050be:	b95b      	cbnz	r3, 80050d8 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c0:	9302      	str	r3, [sp, #8]
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	9202      	str	r2, [sp, #8]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	9202      	str	r2, [sp, #8]
 80050cc:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e098      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d00a      	beq.n	80050f2 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d01a      	beq.n	8005116 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e0:	2300      	movs	r3, #0
 80050e2:	9305      	str	r3, [sp, #20]
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	9205      	str	r2, [sp, #20]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	9305      	str	r3, [sp, #20]
 80050ee:	9b05      	ldr	r3, [sp, #20]
 80050f0:	e08b      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050fa:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fc:	2300      	movs	r3, #0
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	695a      	ldr	r2, [r3, #20]
 8005104:	9203      	str	r2, [sp, #12]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	9203      	str	r2, [sp, #12]
 800510a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e079      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005128:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	9204      	str	r2, [sp, #16]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	9b04      	ldr	r3, [sp, #16]
 800513a:	e066      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513c:	462a      	mov	r2, r5
 800513e:	4631      	mov	r1, r6
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff fd89 	bl	8004c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005146:	2800      	cmp	r0, #0
 8005148:	f040 80cf 	bne.w	80052ea <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005152:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800515a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800515c:	3b01      	subs	r3, #1
 800515e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	8563      	strh	r3, [r4, #42]	; 0x2a
 800516a:	e04e      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800516c:	9500      	str	r5, [sp, #0]
 800516e:	4633      	mov	r3, r6
 8005170:	2200      	movs	r2, #0
 8005172:	4955      	ldr	r1, [pc, #340]	; (80052c8 <HAL_I2C_Mem_Read+0x2b0>)
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff fb76 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 800517a:	2800      	cmp	r0, #0
 800517c:	f040 80b7 	bne.w	80052ee <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	6822      	ldr	r2, [r4, #0]
 8005182:	6813      	ldr	r3, [r2, #0]
 8005184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005188:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005190:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005192:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005194:	1c53      	adds	r3, r2, #1
 8005196:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005198:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800519e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80051ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b0:	3301      	adds	r3, #1
 80051b2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80051b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80051ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80051c4:	e021      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	6813      	ldr	r3, [r2, #0]
 80051ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ce:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80051d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051da:	1c53      	adds	r3, r2, #1
 80051dc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80051de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80051e0:	3b01      	subs	r3, #1
 80051e2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80051e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80051f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f6:	3301      	adds	r3, #1
 80051f8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80051fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005200:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800520a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05d      	beq.n	80052cc <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 8005210:	2b03      	cmp	r3, #3
 8005212:	d82b      	bhi.n	800526c <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 8005214:	2b01      	cmp	r3, #1
 8005216:	d091      	beq.n	800513c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8005218:	2b02      	cmp	r3, #2
 800521a:	d0a7      	beq.n	800516c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800521c:	9500      	str	r5, [sp, #0]
 800521e:	4633      	mov	r3, r6
 8005220:	2200      	movs	r2, #0
 8005222:	4929      	ldr	r1, [pc, #164]	; (80052c8 <HAL_I2C_Mem_Read+0x2b0>)
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff fb1e 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 800522a:	2800      	cmp	r0, #0
 800522c:	d161      	bne.n	80052f2 <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	6813      	ldr	r3, [r2, #0]
 8005232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005236:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005242:	3301      	adds	r3, #1
 8005244:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005246:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005248:	3b01      	subs	r3, #1
 800524a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800524c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29b      	uxth	r3, r3
 8005254:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005256:	9500      	str	r5, [sp, #0]
 8005258:	4633      	mov	r3, r6
 800525a:	2200      	movs	r2, #0
 800525c:	491a      	ldr	r1, [pc, #104]	; (80052c8 <HAL_I2C_Mem_Read+0x2b0>)
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff fb01 	bl	8004866 <I2C_WaitOnFlagUntilTimeout>
 8005264:	2800      	cmp	r0, #0
 8005266:	d0ae      	beq.n	80051c6 <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 8005268:	2701      	movs	r7, #1
 800526a:	e6e6      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526c:	462a      	mov	r2, r5
 800526e:	4631      	mov	r1, r6
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff fcf1 	bl	8004c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005276:	2800      	cmp	r0, #0
 8005278:	d13d      	bne.n	80052f6 <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005280:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005282:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005284:	1c53      	adds	r3, r2, #1
 8005286:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005288:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800528e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	6959      	ldr	r1, [r3, #20]
 800529c:	f011 0f04 	tst.w	r1, #4
 80052a0:	d0b3      	beq.n	800520a <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80052a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a8:	3301      	adds	r3, #1
 80052aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80052ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052ae:	3b01      	subs	r3, #1
 80052b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80052b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8563      	strh	r3, [r4, #42]	; 0x2a
 80052bc:	e7a5      	b.n	800520a <HAL_I2C_Mem_Read+0x1f2>
 80052be:	bf00      	nop
 80052c0:	00100002 	.word	0x00100002
 80052c4:	ffff0000 	.word	0xffff0000
 80052c8:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	2320      	movs	r3, #32
 80052ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80052d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80052dc:	e6ad      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80052de:	2702      	movs	r7, #2
 80052e0:	e6ab      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80052e2:	2702      	movs	r7, #2
 80052e4:	e6a9      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80052e6:	2701      	movs	r7, #1
 80052e8:	e6a7      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80052ea:	2701      	movs	r7, #1
 80052ec:	e6a5      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80052ee:	2701      	movs	r7, #1
 80052f0:	e6a3      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80052f2:	2701      	movs	r7, #1
 80052f4:	e6a1      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80052f6:	2701      	movs	r7, #1
 80052f8:	e69f      	b.n	800503a <HAL_I2C_Mem_Read+0x22>
 80052fa:	bf00      	nop

080052fc <HAL_I2C_GetState>:
  return hi2c->State;
 80052fc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005300:	4770      	bx	lr

08005302 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005302:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005304:	4770      	bx	lr
	...

08005308 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005308:	2800      	cmp	r0, #0
 800530a:	f000 81d9 	beq.w	80056c0 <HAL_RCC_OscConfig+0x3b8>
{
 800530e:	b570      	push	{r4, r5, r6, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005314:	6803      	ldr	r3, [r0, #0]
 8005316:	f013 0f01 	tst.w	r3, #1
 800531a:	d03b      	beq.n	8005394 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800531c:	4ba6      	ldr	r3, [pc, #664]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b04      	cmp	r3, #4
 8005326:	d02c      	beq.n	8005382 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005328:	4ba3      	ldr	r3, [pc, #652]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005330:	2b08      	cmp	r3, #8
 8005332:	d021      	beq.n	8005378 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005334:	6863      	ldr	r3, [r4, #4]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d04f      	beq.n	80053dc <HAL_RCC_OscConfig+0xd4>
 800533c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005340:	d052      	beq.n	80053e8 <HAL_RCC_OscConfig+0xe0>
 8005342:	4b9d      	ldr	r3, [pc, #628]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005352:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d050      	beq.n	80053fc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535a:	f7fe fee9 	bl	8004130 <HAL_GetTick>
 800535e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005360:	4b95      	ldr	r3, [pc, #596]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005368:	d114      	bne.n	8005394 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800536a:	f7fe fee1 	bl	8004130 <HAL_GetTick>
 800536e:	1b40      	subs	r0, r0, r5
 8005370:	2864      	cmp	r0, #100	; 0x64
 8005372:	d9f5      	bls.n	8005360 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8005374:	2003      	movs	r0, #3
 8005376:	e1aa      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005378:	4b8f      	ldr	r3, [pc, #572]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005380:	d0d8      	beq.n	8005334 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005382:	4b8d      	ldr	r3, [pc, #564]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800538a:	d003      	beq.n	8005394 <HAL_RCC_OscConfig+0x8c>
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8198 	beq.w	80056c4 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	f013 0f02 	tst.w	r3, #2
 800539a:	d054      	beq.n	8005446 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800539c:	4b86      	ldr	r3, [pc, #536]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f013 0f0c 	tst.w	r3, #12
 80053a4:	d03e      	beq.n	8005424 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a6:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d033      	beq.n	800541a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053b2:	68e3      	ldr	r3, [r4, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d067      	beq.n	8005488 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b8:	4b80      	ldr	r3, [pc, #512]	; (80055bc <HAL_RCC_OscConfig+0x2b4>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fe feb7 	bl	8004130 <HAL_GetTick>
 80053c2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c4:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f013 0f02 	tst.w	r3, #2
 80053cc:	d153      	bne.n	8005476 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ce:	f7fe feaf 	bl	8004130 <HAL_GetTick>
 80053d2:	1b40      	subs	r0, r0, r5
 80053d4:	2802      	cmp	r0, #2
 80053d6:	d9f5      	bls.n	80053c4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80053d8:	2003      	movs	r0, #3
 80053da:	e178      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	4a76      	ldr	r2, [pc, #472]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e7b5      	b.n	8005354 <HAL_RCC_OscConfig+0x4c>
 80053e8:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e7ab      	b.n	8005354 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80053fc:	f7fe fe98 	bl	8004130 <HAL_GetTick>
 8005400:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	4b6d      	ldr	r3, [pc, #436]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800540a:	d0c3      	beq.n	8005394 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800540c:	f7fe fe90 	bl	8004130 <HAL_GetTick>
 8005410:	1b40      	subs	r0, r0, r5
 8005412:	2864      	cmp	r0, #100	; 0x64
 8005414:	d9f5      	bls.n	8005402 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8005416:	2003      	movs	r0, #3
 8005418:	e159      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541a:	4b67      	ldr	r3, [pc, #412]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005422:	d1c6      	bne.n	80053b2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005424:	4b64      	ldr	r3, [pc, #400]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f013 0f02 	tst.w	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_OscConfig+0x12e>
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	f040 8149 	bne.w	80056c8 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005436:	4a60      	ldr	r2, [pc, #384]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800543e:	6921      	ldr	r1, [r4, #16]
 8005440:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005444:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f013 0f08 	tst.w	r3, #8
 800544c:	d040      	beq.n	80054d0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800544e:	6963      	ldr	r3, [r4, #20]
 8005450:	b363      	cbz	r3, 80054ac <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005452:	4b5b      	ldr	r3, [pc, #364]	; (80055c0 <HAL_RCC_OscConfig+0x2b8>)
 8005454:	2201      	movs	r2, #1
 8005456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fe fe6a 	bl	8004130 <HAL_GetTick>
 800545c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545e:	4b56      	ldr	r3, [pc, #344]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005462:	f013 0f02 	tst.w	r3, #2
 8005466:	d133      	bne.n	80054d0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005468:	f7fe fe62 	bl	8004130 <HAL_GetTick>
 800546c:	1b40      	subs	r0, r0, r5
 800546e:	2802      	cmp	r0, #2
 8005470:	d9f5      	bls.n	800545e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8005472:	2003      	movs	r0, #3
 8005474:	e12b      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	4a50      	ldr	r2, [pc, #320]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005478:	6813      	ldr	r3, [r2, #0]
 800547a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800547e:	6921      	ldr	r1, [r4, #16]
 8005480:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e7de      	b.n	8005446 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8005488:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <HAL_RCC_OscConfig+0x2b4>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800548e:	f7fe fe4f 	bl	8004130 <HAL_GetTick>
 8005492:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005494:	4b48      	ldr	r3, [pc, #288]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f013 0f02 	tst.w	r3, #2
 800549c:	d0d3      	beq.n	8005446 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fe fe47 	bl	8004130 <HAL_GetTick>
 80054a2:	1b40      	subs	r0, r0, r5
 80054a4:	2802      	cmp	r0, #2
 80054a6:	d9f5      	bls.n	8005494 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80054a8:	2003      	movs	r0, #3
 80054aa:	e110      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ac:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_RCC_OscConfig+0x2b8>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b2:	f7fe fe3d 	bl	8004130 <HAL_GetTick>
 80054b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054bc:	f013 0f02 	tst.w	r3, #2
 80054c0:	d006      	beq.n	80054d0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c2:	f7fe fe35 	bl	8004130 <HAL_GetTick>
 80054c6:	1b40      	subs	r0, r0, r5
 80054c8:	2802      	cmp	r0, #2
 80054ca:	d9f5      	bls.n	80054b8 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80054cc:	2003      	movs	r0, #3
 80054ce:	e0fe      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	f013 0f04 	tst.w	r3, #4
 80054d6:	d078      	beq.n	80055ca <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d8:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80054e0:	d10d      	bne.n	80054fe <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	4b34      	ldr	r3, [pc, #208]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80054e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80054fa:	2501      	movs	r5, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 80054fe:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <HAL_RCC_OscConfig+0x2bc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005508:	d021      	beq.n	800554e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d032      	beq.n	8005576 <HAL_RCC_OscConfig+0x26e>
 8005510:	2b05      	cmp	r3, #5
 8005512:	d036      	beq.n	8005582 <HAL_RCC_OscConfig+0x27a>
 8005514:	4b28      	ldr	r3, [pc, #160]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	671a      	str	r2, [r3, #112]	; 0x70
 800551e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005520:	f022 0204 	bic.w	r2, r2, #4
 8005524:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d034      	beq.n	8005596 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fe fe00 	bl	8004130 <HAL_GetTick>
 8005530:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005532:	4b21      	ldr	r3, [pc, #132]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	f013 0f02 	tst.w	r3, #2
 800553a:	d145      	bne.n	80055c8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553c:	f7fe fdf8 	bl	8004130 <HAL_GetTick>
 8005540:	1b80      	subs	r0, r0, r6
 8005542:	f241 3388 	movw	r3, #5000	; 0x1388
 8005546:	4298      	cmp	r0, r3
 8005548:	d9f3      	bls.n	8005532 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800554a:	2003      	movs	r0, #3
 800554c:	e0bf      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800554e:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <HAL_RCC_OscConfig+0x2bc>)
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005556:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005558:	f7fe fdea 	bl	8004130 <HAL_GetTick>
 800555c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555e:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <HAL_RCC_OscConfig+0x2bc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005566:	d1d0      	bne.n	800550a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005568:	f7fe fde2 	bl	8004130 <HAL_GetTick>
 800556c:	1b80      	subs	r0, r0, r6
 800556e:	2802      	cmp	r0, #2
 8005570:	d9f5      	bls.n	800555e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8005572:	2003      	movs	r0, #3
 8005574:	e0ab      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005578:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
 8005580:	e7d1      	b.n	8005526 <HAL_RCC_OscConfig+0x21e>
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 8005584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005586:	f042 0204 	orr.w	r2, r2, #4
 800558a:	671a      	str	r2, [r3, #112]	; 0x70
 800558c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	671a      	str	r2, [r3, #112]	; 0x70
 8005594:	e7c7      	b.n	8005526 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005596:	f7fe fdcb 	bl	8004130 <HAL_GetTick>
 800559a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	f013 0f02 	tst.w	r3, #2
 80055a4:	d010      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a6:	f7fe fdc3 	bl	8004130 <HAL_GetTick>
 80055aa:	1b80      	subs	r0, r0, r6
 80055ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80055b0:	4298      	cmp	r0, r3
 80055b2:	d9f3      	bls.n	800559c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80055b4:	2003      	movs	r0, #3
 80055b6:	e08a      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 80055b8:	40023800 	.word	0x40023800
 80055bc:	42470000 	.word	0x42470000
 80055c0:	42470e80 	.word	0x42470e80
 80055c4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c8:	b9e5      	cbnz	r5, 8005604 <HAL_RCC_OscConfig+0x2fc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ca:	69a3      	ldr	r3, [r4, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d07d      	beq.n	80056cc <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055d0:	4a46      	ldr	r2, [pc, #280]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 80055d2:	6892      	ldr	r2, [r2, #8]
 80055d4:	f002 020c 	and.w	r2, r2, #12
 80055d8:	2a08      	cmp	r2, #8
 80055da:	d051      	beq.n	8005680 <HAL_RCC_OscConfig+0x378>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d017      	beq.n	8005610 <HAL_RCC_OscConfig+0x308>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e0:	4b43      	ldr	r3, [pc, #268]	; (80056f0 <HAL_RCC_OscConfig+0x3e8>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fda3 	bl	8004130 <HAL_GetTick>
 80055ea:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ec:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80055f4:	d042      	beq.n	800567c <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fe fd9b 	bl	8004130 <HAL_GetTick>
 80055fa:	1b00      	subs	r0, r0, r4
 80055fc:	2802      	cmp	r0, #2
 80055fe:	d9f5      	bls.n	80055ec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005600:	2003      	movs	r0, #3
 8005602:	e064      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005604:	4a39      	ldr	r2, [pc, #228]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 8005606:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560c:	6413      	str	r3, [r2, #64]	; 0x40
 800560e:	e7dc      	b.n	80055ca <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8005610:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCC_OscConfig+0x3e8>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005616:	f7fe fd8b 	bl	8004130 <HAL_GetTick>
 800561a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005624:	d006      	beq.n	8005634 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005626:	f7fe fd83 	bl	8004130 <HAL_GetTick>
 800562a:	1b40      	subs	r0, r0, r5
 800562c:	2802      	cmp	r0, #2
 800562e:	d9f5      	bls.n	800561c <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8005630:	2003      	movs	r0, #3
 8005632:	e04c      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005634:	69e3      	ldr	r3, [r4, #28]
 8005636:	6a22      	ldr	r2, [r4, #32]
 8005638:	4313      	orrs	r3, r2
 800563a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800563c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005640:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005642:	0852      	lsrs	r2, r2, #1
 8005644:	3a01      	subs	r2, #1
 8005646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800564a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800564c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005650:	4a26      	ldr	r2, [pc, #152]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 8005652:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005654:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <HAL_RCC_OscConfig+0x3e8>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800565a:	f7fe fd69 	bl	8004130 <HAL_GetTick>
 800565e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005660:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005668:	d106      	bne.n	8005678 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566a:	f7fe fd61 	bl	8004130 <HAL_GetTick>
 800566e:	1b00      	subs	r0, r0, r4
 8005670:	2802      	cmp	r0, #2
 8005672:	d9f5      	bls.n	8005660 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8005674:	2003      	movs	r0, #3
 8005676:	e02a      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005678:	2000      	movs	r0, #0
 800567a:	e028      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 800567c:	2000      	movs	r0, #0
 800567e:	e026      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005680:	2b01      	cmp	r3, #1
 8005682:	d026      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3ca>
        pll_config = RCC->PLLCFGR;
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_RCC_OscConfig+0x3e4>)
 8005686:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005688:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800568c:	69e2      	ldr	r2, [r4, #28]
 800568e:	4291      	cmp	r1, r2
 8005690:	d121      	bne.n	80056d6 <HAL_RCC_OscConfig+0x3ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005696:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005698:	428a      	cmp	r2, r1
 800569a:	d11e      	bne.n	80056da <HAL_RCC_OscConfig+0x3d2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800569c:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800569e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80056a2:	401a      	ands	r2, r3
 80056a4:	428a      	cmp	r2, r1
 80056a6:	d11a      	bne.n	80056de <HAL_RCC_OscConfig+0x3d6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80056ae:	428a      	cmp	r2, r1
 80056b0:	d117      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3da>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80056b2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80056b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d114      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3de>
  return HAL_OK;
 80056bc:	2000      	movs	r0, #0
 80056be:	e006      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 80056c0:	2001      	movs	r0, #1
}
 80056c2:	4770      	bx	lr
        return HAL_ERROR;
 80056c4:	2001      	movs	r0, #1
 80056c6:	e002      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
        return HAL_ERROR;
 80056c8:	2001      	movs	r0, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 80056cc:	2000      	movs	r0, #0
}
 80056ce:	b002      	add	sp, #8
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80056d2:	2001      	movs	r0, #1
 80056d4:	e7fb      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
 80056d6:	2001      	movs	r0, #1
 80056d8:	e7f9      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 80056da:	2001      	movs	r0, #1
 80056dc:	e7f7      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 80056de:	2001      	movs	r0, #1
 80056e0:	e7f5      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 80056e2:	2001      	movs	r0, #1
 80056e4:	e7f3      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 80056e6:	2001      	movs	r0, #1
 80056e8:	e7f1      	b.n	80056ce <HAL_RCC_OscConfig+0x3c6>
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	42470060 	.word	0x42470060

080056f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f6:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d053      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0xb6>
 8005702:	2b08      	cmp	r3, #8
 8005704:	d153      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005706:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005714:	d028      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005716:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800571e:	0158      	lsls	r0, r3, #5
 8005720:	2100      	movs	r1, #0
 8005722:	1ac0      	subs	r0, r0, r3
 8005724:	f161 0100 	sbc.w	r1, r1, #0
 8005728:	018e      	lsls	r6, r1, #6
 800572a:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 800572e:	0187      	lsls	r7, r0, #6
 8005730:	1a3c      	subs	r4, r7, r0
 8005732:	eb66 0501 	sbc.w	r5, r6, r1
 8005736:	00e9      	lsls	r1, r5, #3
 8005738:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 800573c:	00e0      	lsls	r0, r4, #3
 800573e:	18c0      	adds	r0, r0, r3
 8005740:	f141 0100 	adc.w	r1, r1, #0
 8005744:	024b      	lsls	r3, r1, #9
 8005746:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800574a:	0244      	lsls	r4, r0, #9
 800574c:	4620      	mov	r0, r4
 800574e:	4619      	mov	r1, r3
 8005750:	2300      	movs	r3, #0
 8005752:	f7fb fa31 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005756:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800575e:	3301      	adds	r3, #1
 8005760:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005762:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005766:	e023      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005768:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005770:	015c      	lsls	r4, r3, #5
 8005772:	2500      	movs	r5, #0
 8005774:	1ae4      	subs	r4, r4, r3
 8005776:	f165 0500 	sbc.w	r5, r5, #0
 800577a:	01ae      	lsls	r6, r5, #6
 800577c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8005780:	01a7      	lsls	r7, r4, #6
 8005782:	1b38      	subs	r0, r7, r4
 8005784:	eb66 0105 	sbc.w	r1, r6, r5
 8005788:	00cc      	lsls	r4, r1, #3
 800578a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800578e:	00c5      	lsls	r5, r0, #3
 8005790:	18e8      	adds	r0, r5, r3
 8005792:	f144 0100 	adc.w	r1, r4, #0
 8005796:	028b      	lsls	r3, r1, #10
 8005798:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800579c:	0284      	lsls	r4, r0, #10
 800579e:	4620      	mov	r0, r4
 80057a0:	4619      	mov	r1, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	f7fb fa08 	bl	8000bb8 <__aeabi_uldivmod>
 80057a8:	e7d5      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80057aa:	4803      	ldr	r0, [pc, #12]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057ac:	e000      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ae:	4803      	ldr	r0, [pc, #12]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80057b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800
 80057b8:	007a1200 	.word	0x007a1200
 80057bc:	00f42400 	.word	0x00f42400

080057c0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f000 809b 	beq.w	80058fc <HAL_RCC_ClockConfig+0x13c>
{
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	460d      	mov	r5, r1
 80057ca:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057cc:	4b4f      	ldr	r3, [pc, #316]	; (800590c <HAL_RCC_ClockConfig+0x14c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	428b      	cmp	r3, r1
 80057d6:	d208      	bcs.n	80057ea <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d8:	b2cb      	uxtb	r3, r1
 80057da:	4a4c      	ldr	r2, [pc, #304]	; (800590c <HAL_RCC_ClockConfig+0x14c>)
 80057dc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	428b      	cmp	r3, r1
 80057e6:	f040 808b 	bne.w	8005900 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	f013 0f02 	tst.w	r3, #2
 80057f0:	d017      	beq.n	8005822 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f2:	f013 0f04 	tst.w	r3, #4
 80057f6:	d004      	beq.n	8005802 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f8:	4a45      	ldr	r2, [pc, #276]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 80057fa:	6893      	ldr	r3, [r2, #8]
 80057fc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005800:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	f013 0f08 	tst.w	r3, #8
 8005808:	d004      	beq.n	8005814 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800580a:	4a41      	ldr	r2, [pc, #260]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 800580c:	6893      	ldr	r3, [r2, #8]
 800580e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005812:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005814:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 8005816:	6893      	ldr	r3, [r2, #8]
 8005818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581c:	68a1      	ldr	r1, [r4, #8]
 800581e:	430b      	orrs	r3, r1
 8005820:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	f013 0f01 	tst.w	r3, #1
 8005828:	d032      	beq.n	8005890 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d021      	beq.n	8005874 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005830:	1e9a      	subs	r2, r3, #2
 8005832:	2a01      	cmp	r2, #1
 8005834:	d925      	bls.n	8005882 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005836:	4a36      	ldr	r2, [pc, #216]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	f012 0f02 	tst.w	r2, #2
 800583e:	d061      	beq.n	8005904 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005840:	4933      	ldr	r1, [pc, #204]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 8005842:	688a      	ldr	r2, [r1, #8]
 8005844:	f022 0203 	bic.w	r2, r2, #3
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800584c:	f7fe fc70 	bl	8004130 <HAL_GetTick>
 8005850:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	4b2f      	ldr	r3, [pc, #188]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005860:	d016      	beq.n	8005890 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005862:	f7fe fc65 	bl	8004130 <HAL_GetTick>
 8005866:	1b80      	subs	r0, r0, r6
 8005868:	f241 3388 	movw	r3, #5000	; 0x1388
 800586c:	4298      	cmp	r0, r3
 800586e:	d9f0      	bls.n	8005852 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005870:	2003      	movs	r0, #3
 8005872:	e042      	b.n	80058fa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005874:	4a26      	ldr	r2, [pc, #152]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800587c:	d1e0      	bne.n	8005840 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800587e:	2001      	movs	r0, #1
 8005880:	e03b      	b.n	80058fa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	4a23      	ldr	r2, [pc, #140]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800588a:	d1d9      	bne.n	8005840 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800588c:	2001      	movs	r0, #1
 800588e:	e034      	b.n	80058fa <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_RCC_ClockConfig+0x14c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	42ab      	cmp	r3, r5
 800589a:	d907      	bls.n	80058ac <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589c:	b2ea      	uxtb	r2, r5
 800589e:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_RCC_ClockConfig+0x14c>)
 80058a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	d12d      	bne.n	8005908 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	f013 0f04 	tst.w	r3, #4
 80058b2:	d006      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 80058b6:	6893      	ldr	r3, [r2, #8]
 80058b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80058bc:	68e1      	ldr	r1, [r4, #12]
 80058be:	430b      	orrs	r3, r1
 80058c0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	f013 0f08 	tst.w	r3, #8
 80058c8:	d007      	beq.n	80058da <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ca:	4a11      	ldr	r2, [pc, #68]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 80058cc:	6893      	ldr	r3, [r2, #8]
 80058ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80058d2:	6921      	ldr	r1, [r4, #16]
 80058d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80058d8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058da:	f7ff ff0b 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <HAL_RCC_ClockConfig+0x150>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <HAL_RCC_ClockConfig+0x154>)
 80058e8:	5cd3      	ldrb	r3, [r2, r3]
 80058ea:	40d8      	lsrs	r0, r3
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <HAL_RCC_ClockConfig+0x158>)
 80058ee:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <HAL_RCC_ClockConfig+0x15c>)
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	f7fe fbd2 	bl	800409c <HAL_InitTick>
  return HAL_OK;
 80058f8:	2000      	movs	r0, #0
}
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80058fc:	2001      	movs	r0, #1
}
 80058fe:	4770      	bx	lr
      return HAL_ERROR;
 8005900:	2001      	movs	r0, #1
 8005902:	e7fa      	b.n	80058fa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005904:	2001      	movs	r0, #1
 8005906:	e7f8      	b.n	80058fa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8005908:	2001      	movs	r0, #1
 800590a:	e7f6      	b.n	80058fa <HAL_RCC_ClockConfig+0x13a>
 800590c:	40023c00 	.word	0x40023c00
 8005910:	40023800 	.word	0x40023800
 8005914:	08009b28 	.word	0x08009b28
 8005918:	20000274 	.word	0x20000274
 800591c:	20000134 	.word	0x20000134

08005920 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005920:	4b01      	ldr	r3, [pc, #4]	; (8005928 <HAL_RCC_GetHCLKFreq+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000274 	.word	0x20000274

0800592c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800592c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800592e:	f7ff fff7 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005932:	4b04      	ldr	r3, [pc, #16]	; (8005944 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800593a:	4a03      	ldr	r2, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800593c:	5cd3      	ldrb	r3, [r2, r3]
}
 800593e:	40d8      	lsrs	r0, r3
 8005940:	bd08      	pop	{r3, pc}
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800
 8005948:	08009b38 	.word	0x08009b38

0800594c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800594c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800594e:	f7ff ffe7 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005952:	4b04      	ldr	r3, [pc, #16]	; (8005964 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800595a:	4a03      	ldr	r2, [pc, #12]	; (8005968 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800595c:	5cd3      	ldrb	r3, [r2, r3]
}
 800595e:	40d8      	lsrs	r0, r3
 8005960:	bd08      	pop	{r3, pc}
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
 8005968:	08009b38 	.word	0x08009b38

0800596c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800596c:	6802      	ldr	r2, [r0, #0]
 800596e:	68d3      	ldr	r3, [r2, #12]
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005976:	6802      	ldr	r2, [r0, #0]
 8005978:	6893      	ldr	r3, [r2, #8]
 800597a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	2b06      	cmp	r3, #6
 8005980:	d003      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800598a:	2000      	movs	r0, #0
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005990:	4770      	bx	lr

08005992 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005994:	4770      	bx	lr

08005996 <HAL_TIM_IRQHandler>:
{
 8005996:	b510      	push	{r4, lr}
 8005998:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800599a:	6803      	ldr	r3, [r0, #0]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	f012 0f02 	tst.w	r2, #2
 80059a2:	d011      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	f012 0f02 	tst.w	r2, #2
 80059aa:	d00d      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ac:	f06f 0202 	mvn.w	r2, #2
 80059b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f013 0f03 	tst.w	r3, #3
 80059be:	d070      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80059c0:	f7ff ffe6 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	2300      	movs	r3, #0
 80059c6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	f012 0f04 	tst.w	r2, #4
 80059d0:	d012      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	f012 0f04 	tst.w	r2, #4
 80059d8:	d00e      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059da:	f06f 0204 	mvn.w	r2, #4
 80059de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059e0:	2302      	movs	r3, #2
 80059e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80059ec:	d05f      	beq.n	8005aae <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff ffce 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f4:	2300      	movs	r3, #0
 80059f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	f012 0f08 	tst.w	r2, #8
 8005a00:	d012      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	f012 0f08 	tst.w	r2, #8
 8005a08:	d00e      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a0a:	f06f 0208 	mvn.w	r2, #8
 8005a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a10:	2304      	movs	r3, #4
 8005a12:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f013 0f03 	tst.w	r3, #3
 8005a1c:	d04e      	beq.n	8005abc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff ffb6 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a24:	2300      	movs	r3, #0
 8005a26:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	f012 0f10 	tst.w	r2, #16
 8005a30:	d012      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	f012 0f10 	tst.w	r2, #16
 8005a38:	d00e      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a3a:	f06f 0210 	mvn.w	r2, #16
 8005a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a40:	2308      	movs	r3, #8
 8005a42:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a4c:	d03d      	beq.n	8005aca <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff ff9e 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a54:	2300      	movs	r3, #0
 8005a56:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	f012 0f01 	tst.w	r2, #1
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	f012 0f01 	tst.w	r2, #1
 8005a68:	d136      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a72:	d003      	beq.n	8005a7c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a7a:	d134      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a8c:	d132      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	f012 0f20 	tst.w	r2, #32
 8005a96:	d003      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	f012 0f20 	tst.w	r2, #32
 8005a9e:	d130      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x16c>
}
 8005aa0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	f7ff ff74 	bl	800598e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7ff ff73 	bl	8005992 <HAL_TIM_PWM_PulseFinishedCallback>
 8005aac:	e78a      	b.n	80059c4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff ff6d 	bl	800598e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f7ff ff6c 	bl	8005992 <HAL_TIM_PWM_PulseFinishedCallback>
 8005aba:	e79b      	b.n	80059f4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff ff66 	bl	800598e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff ff65 	bl	8005992 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ac8:	e7ac      	b.n	8005a24 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	4620      	mov	r0, r4
 8005acc:	f7ff ff5f 	bl	800598e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7ff ff5e 	bl	8005992 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ad6:	e7bd      	b.n	8005a54 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ad8:	f06f 0201 	mvn.w	r2, #1
 8005adc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 fe7c 	bl	80067dc <HAL_TIM_PeriodElapsedCallback>
 8005ae4:	e7c1      	b.n	8005a6a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f878 	bl	8005be2 <HAL_TIMEx_BreakCallback>
 8005af2:	e7c3      	b.n	8005a7c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005af8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff ff4a 	bl	8005994 <HAL_TIM_TriggerCallback>
 8005b00:	e7c5      	b.n	8005a8e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b02:	f06f 0220 	mvn.w	r2, #32
 8005b06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 f869 	bl	8005be0 <HAL_TIMEx_CommutCallback>
}
 8005b0e:	e7c7      	b.n	8005aa0 <HAL_TIM_IRQHandler+0x10a>

08005b10 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b10:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b12:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <TIM_Base_SetConfig+0x98>)
 8005b14:	4290      	cmp	r0, r2
 8005b16:	d00e      	beq.n	8005b36 <TIM_Base_SetConfig+0x26>
 8005b18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b1c:	d00b      	beq.n	8005b36 <TIM_Base_SetConfig+0x26>
 8005b1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005b22:	4290      	cmp	r0, r2
 8005b24:	d007      	beq.n	8005b36 <TIM_Base_SetConfig+0x26>
 8005b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b2a:	4290      	cmp	r0, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_Base_SetConfig+0x26>
 8005b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b32:	4290      	cmp	r0, r2
 8005b34:	d103      	bne.n	8005b3e <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b3a:	684a      	ldr	r2, [r1, #4]
 8005b3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <TIM_Base_SetConfig+0x98>)
 8005b40:	4290      	cmp	r0, r2
 8005b42:	d01a      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b48:	d017      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005b4e:	4290      	cmp	r0, r2
 8005b50:	d013      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b56:	4290      	cmp	r0, r2
 8005b58:	d00f      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b5e:	4290      	cmp	r0, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b62:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005b66:	4290      	cmp	r0, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b6e:	4290      	cmp	r0, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0x6a>
 8005b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b76:	4290      	cmp	r0, r2
 8005b78:	d103      	bne.n	8005b82 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7e:	68ca      	ldr	r2, [r1, #12]
 8005b80:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b86:	694a      	ldr	r2, [r1, #20]
 8005b88:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005b8a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b8c:	688b      	ldr	r3, [r1, #8]
 8005b8e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b90:	680b      	ldr	r3, [r1, #0]
 8005b92:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b94:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <TIM_Base_SetConfig+0x98>)
 8005b96:	4298      	cmp	r0, r3
 8005b98:	d002      	beq.n	8005ba0 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	6143      	str	r3, [r0, #20]
}
 8005b9e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba0:	690b      	ldr	r3, [r1, #16]
 8005ba2:	6303      	str	r3, [r0, #48]	; 0x30
 8005ba4:	e7f9      	b.n	8005b9a <TIM_Base_SetConfig+0x8a>
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000

08005bac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005bac:	b1b0      	cbz	r0, 8005bdc <HAL_TIM_Base_Init+0x30>
{
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005bb6:	b163      	cbz	r3, 8005bd2 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	f851 0b04 	ldr.w	r0, [r1], #4
 8005bc4:	f7ff ffa4 	bl	8005b10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005bce:	2000      	movs	r0, #0
}
 8005bd0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005bd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005bd6:	f000 fea9 	bl	800692c <HAL_TIM_Base_MspInit>
 8005bda:	e7ed      	b.n	8005bb8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005bdc:	2001      	movs	r0, #1
}
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be2:	4770      	bx	lr

08005be4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be4:	6802      	ldr	r2, [r0, #0]
 8005be6:	68d3      	ldr	r3, [r2, #12]
 8005be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bec:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	6802      	ldr	r2, [r0, #0]
 8005bf0:	6953      	ldr	r3, [r2, #20]
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8005bfe:	4770      	bx	lr

08005c00 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c00:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b21      	cmp	r3, #33	; 0x21
 8005c08:	d001      	beq.n	8005c0e <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005c0a:	2002      	movs	r0, #2
  }
}
 8005c0c:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c0e:	6883      	ldr	r3, [r0, #8]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c14:	d017      	beq.n	8005c46 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c16:	6a03      	ldr	r3, [r0, #32]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	6202      	str	r2, [r0, #32]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	6803      	ldr	r3, [r0, #0]
 8005c20:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8005c22:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	84c3      	strh	r3, [r0, #38]	; 0x26
 8005c2c:	b94b      	cbnz	r3, 8005c42 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c2e:	6802      	ldr	r2, [r0, #0]
 8005c30:	68d3      	ldr	r3, [r2, #12]
 8005c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c36:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c38:	6802      	ldr	r2, [r0, #0]
 8005c3a:	68d3      	ldr	r3, [r2, #12]
 8005c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c40:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8005c42:	2000      	movs	r0, #0
 8005c44:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c46:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	6802      	ldr	r2, [r0, #0]
 8005c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c50:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c52:	6903      	ldr	r3, [r0, #16]
 8005c54:	b91b      	cbnz	r3, 8005c5e <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8005c56:	6a03      	ldr	r3, [r0, #32]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	6203      	str	r3, [r0, #32]
 8005c5c:	e7e1      	b.n	8005c22 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8005c5e:	6a03      	ldr	r3, [r0, #32]
 8005c60:	3301      	adds	r3, #1
 8005c62:	6203      	str	r3, [r0, #32]
 8005c64:	e7dd      	b.n	8005c22 <UART_Transmit_IT+0x22>
	...

08005c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c6c:	6802      	ldr	r2, [r0, #0]
 8005c6e:	6913      	ldr	r3, [r2, #16]
 8005c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c74:	68c1      	ldr	r1, [r0, #12]
 8005c76:	430b      	orrs	r3, r1
 8005c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c7a:	6883      	ldr	r3, [r0, #8]
 8005c7c:	6902      	ldr	r2, [r0, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	6942      	ldr	r2, [r0, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	69c2      	ldr	r2, [r0, #28]
 8005c86:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005c88:	6801      	ldr	r1, [r0, #0]
 8005c8a:	68cb      	ldr	r3, [r1, #12]
 8005c8c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c90:	f023 030c 	bic.w	r3, r3, #12
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c98:	6802      	ldr	r2, [r0, #0]
 8005c9a:	6953      	ldr	r3, [r2, #20]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	6981      	ldr	r1, [r0, #24]
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca6:	69c3      	ldr	r3, [r0, #28]
 8005ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cac:	d036      	beq.n	8005d1c <UART_SetConfig+0xb4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cae:	6803      	ldr	r3, [r0, #0]
 8005cb0:	4a65      	ldr	r2, [pc, #404]	; (8005e48 <UART_SetConfig+0x1e0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	f000 809a 	beq.w	8005dec <UART_SetConfig+0x184>
 8005cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f000 8095 	beq.w	8005dec <UART_SetConfig+0x184>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7ff fe33 	bl	800592c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	1805      	adds	r5, r0, r0
 8005cca:	eb46 0106 	adc.w	r1, r6, r6
 8005cce:	182d      	adds	r5, r5, r0
 8005cd0:	eb46 0101 	adc.w	r1, r6, r1
 8005cd4:	00cb      	lsls	r3, r1, #3
 8005cd6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005cda:	00ea      	lsls	r2, r5, #3
 8005cdc:	4615      	mov	r5, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	009a      	lsls	r2, r3, #2
 8005ce4:	0f9b      	lsrs	r3, r3, #30
 8005ce6:	1828      	adds	r0, r5, r0
 8005ce8:	eb46 0101 	adc.w	r1, r6, r1
 8005cec:	f7fa ff64 	bl	8000bb8 <__aeabi_uldivmod>
 8005cf0:	4d56      	ldr	r5, [pc, #344]	; (8005e4c <UART_SetConfig+0x1e4>)
 8005cf2:	fba5 3200 	umull	r3, r2, r5, r0
 8005cf6:	0951      	lsrs	r1, r2, #5
 8005cf8:	2364      	movs	r3, #100	; 0x64
 8005cfa:	fb03 0311 	mls	r3, r3, r1, r0
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	3332      	adds	r3, #50	; 0x32
 8005d02:	fba5 2303 	umull	r2, r3, r5, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	6821      	ldr	r1, [r4, #0]
 8005d16:	4413      	add	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
    }
  }
}
 8005d1a:	e093      	b.n	8005e44 <UART_SetConfig+0x1dc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d1c:	6803      	ldr	r3, [r0, #0]
 8005d1e:	4a4a      	ldr	r2, [pc, #296]	; (8005e48 <UART_SetConfig+0x1e0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d033      	beq.n	8005d8c <UART_SetConfig+0x124>
 8005d24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02f      	beq.n	8005d8c <UART_SetConfig+0x124>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7ff fdfe 	bl	800592c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d30:	2600      	movs	r6, #0
 8005d32:	1805      	adds	r5, r0, r0
 8005d34:	eb46 0106 	adc.w	r1, r6, r6
 8005d38:	182d      	adds	r5, r5, r0
 8005d3a:	eb46 0101 	adc.w	r1, r6, r1
 8005d3e:	00cb      	lsls	r3, r1, #3
 8005d40:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005d44:	00ea      	lsls	r2, r5, #3
 8005d46:	4615      	mov	r5, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	4633      	mov	r3, r6
 8005d4e:	1892      	adds	r2, r2, r2
 8005d50:	eb46 0303 	adc.w	r3, r6, r3
 8005d54:	1828      	adds	r0, r5, r0
 8005d56:	eb46 0101 	adc.w	r1, r6, r1
 8005d5a:	f7fa ff2d 	bl	8000bb8 <__aeabi_uldivmod>
 8005d5e:	4d3b      	ldr	r5, [pc, #236]	; (8005e4c <UART_SetConfig+0x1e4>)
 8005d60:	fba5 3200 	umull	r3, r2, r5, r0
 8005d64:	0951      	lsrs	r1, r2, #5
 8005d66:	2364      	movs	r3, #100	; 0x64
 8005d68:	fb03 0311 	mls	r3, r3, r1, r0
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	fba5 2303 	umull	r2, r3, r5, r3
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	005a      	lsls	r2, r3, #1
 8005d78:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005d7c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	6821      	ldr	r1, [r4, #0]
 8005d86:	4413      	add	r3, r2
 8005d88:	608b      	str	r3, [r1, #8]
 8005d8a:	e05b      	b.n	8005e44 <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d8c:	f7ff fdde 	bl	800594c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d90:	2600      	movs	r6, #0
 8005d92:	1805      	adds	r5, r0, r0
 8005d94:	eb46 0106 	adc.w	r1, r6, r6
 8005d98:	182d      	adds	r5, r5, r0
 8005d9a:	eb46 0101 	adc.w	r1, r6, r1
 8005d9e:	00cb      	lsls	r3, r1, #3
 8005da0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005da4:	00ea      	lsls	r2, r5, #3
 8005da6:	4615      	mov	r5, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	6862      	ldr	r2, [r4, #4]
 8005dac:	4633      	mov	r3, r6
 8005dae:	1892      	adds	r2, r2, r2
 8005db0:	eb46 0303 	adc.w	r3, r6, r3
 8005db4:	1828      	adds	r0, r5, r0
 8005db6:	eb46 0101 	adc.w	r1, r6, r1
 8005dba:	f7fa fefd 	bl	8000bb8 <__aeabi_uldivmod>
 8005dbe:	4d23      	ldr	r5, [pc, #140]	; (8005e4c <UART_SetConfig+0x1e4>)
 8005dc0:	fba5 3200 	umull	r3, r2, r5, r0
 8005dc4:	0951      	lsrs	r1, r2, #5
 8005dc6:	2364      	movs	r3, #100	; 0x64
 8005dc8:	fb03 0311 	mls	r3, r3, r1, r0
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	3332      	adds	r3, #50	; 0x32
 8005dd0:	fba5 2303 	umull	r2, r3, r5, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	005a      	lsls	r2, r3, #1
 8005dd8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005ddc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
 8005dea:	e02b      	b.n	8005e44 <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dec:	f7ff fdae 	bl	800594c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005df0:	2600      	movs	r6, #0
 8005df2:	1805      	adds	r5, r0, r0
 8005df4:	eb46 0106 	adc.w	r1, r6, r6
 8005df8:	182d      	adds	r5, r5, r0
 8005dfa:	eb46 0101 	adc.w	r1, r6, r1
 8005dfe:	00cb      	lsls	r3, r1, #3
 8005e00:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005e04:	00ea      	lsls	r2, r5, #3
 8005e06:	4615      	mov	r5, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	009a      	lsls	r2, r3, #2
 8005e0e:	0f9b      	lsrs	r3, r3, #30
 8005e10:	1828      	adds	r0, r5, r0
 8005e12:	eb46 0101 	adc.w	r1, r6, r1
 8005e16:	f7fa fecf 	bl	8000bb8 <__aeabi_uldivmod>
 8005e1a:	4d0c      	ldr	r5, [pc, #48]	; (8005e4c <UART_SetConfig+0x1e4>)
 8005e1c:	fba5 3200 	umull	r3, r2, r5, r0
 8005e20:	0951      	lsrs	r1, r2, #5
 8005e22:	2364      	movs	r3, #100	; 0x64
 8005e24:	fb03 0311 	mls	r3, r3, r1, r0
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	3332      	adds	r3, #50	; 0x32
 8005e2c:	fba5 2303 	umull	r2, r3, r5, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e36:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	4413      	add	r3, r2
 8005e42:	608b      	str	r3, [r1, #8]
}
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	bf00      	nop
 8005e48:	40011000 	.word	0x40011000
 8005e4c:	51eb851f 	.word	0x51eb851f

08005e50 <UART_WaitOnFlagUntilTimeout>:
{
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4605      	mov	r5, r0
 8005e56:	460f      	mov	r7, r1
 8005e58:	4616      	mov	r6, r2
 8005e5a:	4699      	mov	r9, r3
 8005e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e60:	682c      	ldr	r4, [r5, #0]
 8005e62:	6824      	ldr	r4, [r4, #0]
 8005e64:	ea37 0304 	bics.w	r3, r7, r4
 8005e68:	bf0c      	ite	eq
 8005e6a:	2401      	moveq	r4, #1
 8005e6c:	2400      	movne	r4, #0
 8005e6e:	42b4      	cmp	r4, r6
 8005e70:	d11f      	bne.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8005e72:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005e76:	d0f3      	beq.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e78:	f1b8 0f00 	cmp.w	r8, #0
 8005e7c:	d005      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e7e:	f7fe f957 	bl	8004130 <HAL_GetTick>
 8005e82:	eba0 0009 	sub.w	r0, r0, r9
 8005e86:	4540      	cmp	r0, r8
 8005e88:	d9ea      	bls.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e8a:	682a      	ldr	r2, [r5, #0]
 8005e8c:	68d3      	ldr	r3, [r2, #12]
 8005e8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e92:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	682a      	ldr	r2, [r5, #0]
 8005e96:	6953      	ldr	r3, [r2, #20]
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005e9e:	2320      	movs	r3, #32
 8005ea0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8005eae:	2003      	movs	r0, #3
 8005eb0:	e000      	b.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8005eb2:	2000      	movs	r0, #0
}
 8005eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005eb8 <HAL_UART_Init>:
  if (huart == NULL)
 8005eb8:	b358      	cbz	r0, 8005f12 <HAL_UART_Init+0x5a>
{
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ebe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005ec2:	b30b      	cbz	r3, 8005f08 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	2324      	movs	r3, #36	; 0x24
 8005ec6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	68d3      	ldr	r3, [r2, #12]
 8005ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7ff fec7 	bl	8005c68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	6913      	ldr	r3, [r2, #16]
 8005ede:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005ee2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	6953      	ldr	r3, [r2, #20]
 8005ee8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005eec:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	68d3      	ldr	r3, [r2, #12]
 8005ef2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ef6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	2000      	movs	r0, #0
 8005efa:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005efc:	2320      	movs	r3, #32
 8005efe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005f06:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005f08:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005f0c:	f000 fd2e 	bl	800696c <HAL_UART_MspInit>
 8005f10:	e7d8      	b.n	8005ec4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005f12:	2001      	movs	r0, #1
}
 8005f14:	4770      	bx	lr

08005f16 <HAL_UART_Transmit>:
{
 8005f16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d159      	bne.n	8005fdc <HAL_UART_Transmit+0xc6>
 8005f28:	4604      	mov	r4, r0
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	d058      	beq.n	8005fe4 <HAL_UART_Transmit+0xce>
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	d058      	beq.n	8005fe8 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8005f36:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d056      	beq.n	8005fec <HAL_UART_Transmit+0xd6>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	f04f 0900 	mov.w	r9, #0
 8005f48:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4c:	2321      	movs	r3, #33	; 0x21
 8005f4e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005f52:	f7fe f8ed 	bl	8004130 <HAL_GetTick>
 8005f56:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005f58:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f5c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8005f60:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8005f64:	e017      	b.n	8005f96 <HAL_UART_Transmit+0x80>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f66:	9600      	str	r6, [sp, #0]
 8005f68:	463b      	mov	r3, r7
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff ff6e 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d13b      	bne.n	8005ff0 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f78:	882b      	ldrh	r3, [r5, #0]
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	b90b      	cbnz	r3, 8005f8a <HAL_UART_Transmit+0x74>
          pData += 2U;
 8005f86:	3502      	adds	r5, #2
 8005f88:	e005      	b.n	8005f96 <HAL_UART_Transmit+0x80>
          pData += 1U;
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	e003      	b.n	8005f96 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005f8e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005f96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b19b      	cbz	r3, 8005fc4 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8005f9c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005f9e:	b292      	uxth	r2, r2
 8005fa0:	3a01      	subs	r2, #1
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fa6:	68a3      	ldr	r3, [r4, #8]
 8005fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fac:	d0db      	beq.n	8005f66 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	9600      	str	r6, [sp, #0]
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff ff4a 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d0e6      	beq.n	8005f8e <HAL_UART_Transmit+0x78>
          return HAL_TIMEOUT;
 8005fc0:	2003      	movs	r0, #3
 8005fc2:	e00c      	b.n	8005fde <HAL_UART_Transmit+0xc8>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc4:	9600      	str	r6, [sp, #0]
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2140      	movs	r1, #64	; 0x40
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f7ff ff3f 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 8005fd2:	b978      	cbnz	r0, 8005ff4 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8005fda:	e000      	b.n	8005fde <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 8005fdc:	2002      	movs	r0, #2
}
 8005fde:	b003      	add	sp, #12
 8005fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	e7fa      	b.n	8005fde <HAL_UART_Transmit+0xc8>
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e7f8      	b.n	8005fde <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8005fec:	2002      	movs	r0, #2
 8005fee:	e7f6      	b.n	8005fde <HAL_UART_Transmit+0xc8>
          return HAL_TIMEOUT;
 8005ff0:	2003      	movs	r0, #3
 8005ff2:	e7f4      	b.n	8005fde <HAL_UART_Transmit+0xc8>
      return HAL_TIMEOUT;
 8005ff4:	2003      	movs	r0, #3
 8005ff6:	e7f2      	b.n	8005fde <HAL_UART_Transmit+0xc8>

08005ff8 <HAL_UART_Receive>:
{
 8005ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8006000:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b20      	cmp	r3, #32
 8006008:	d15d      	bne.n	80060c6 <HAL_UART_Receive+0xce>
 800600a:	4604      	mov	r4, r0
 800600c:	460d      	mov	r5, r1
 800600e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006010:	2900      	cmp	r1, #0
 8006012:	d05c      	beq.n	80060ce <HAL_UART_Receive+0xd6>
 8006014:	2a00      	cmp	r2, #0
 8006016:	d05c      	beq.n	80060d2 <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8006018:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800601c:	2b01      	cmp	r3, #1
 800601e:	d05a      	beq.n	80060d6 <HAL_UART_Receive+0xde>
 8006020:	2301      	movs	r3, #1
 8006022:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800602e:	2322      	movs	r3, #34	; 0x22
 8006030:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8006034:	f7fe f87c 	bl	8004130 <HAL_GetTick>
 8006038:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800603a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800603e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8006042:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8006046:	e01d      	b.n	8006084 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	9600      	str	r6, [sp, #0]
 800604a:	463b      	mov	r3, r7
 800604c:	2200      	movs	r2, #0
 800604e:	2120      	movs	r1, #32
 8006050:	4620      	mov	r0, r4
 8006052:	f7ff fefd 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 8006056:	2800      	cmp	r0, #0
 8006058:	d13f      	bne.n	80060da <HAL_UART_Receive+0xe2>
        if (huart->Init.Parity == UART_PARITY_NONE)
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	b933      	cbnz	r3, 800606c <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	f825 3b02 	strh.w	r3, [r5], #2
          pData += 2U;
 800606a:	e00b      	b.n	8006084 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	f825 3b01 	strh.w	r3, [r5], #1
          pData += 1U;
 8006076:	e005      	b.n	8006084 <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006080:	f805 3b01 	strb.w	r3, [r5], #1
    while (huart->RxXferCount > 0U)
 8006084:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006086:	b29b      	uxth	r3, r3
 8006088:	b1c3      	cbz	r3, 80060bc <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 800608a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800608c:	b292      	uxth	r2, r2
 800608e:	3a01      	subs	r2, #1
 8006090:	b292      	uxth	r2, r2
 8006092:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d0d5      	beq.n	8006048 <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800609c:	9600      	str	r6, [sp, #0]
 800609e:	463b      	mov	r3, r7
 80060a0:	2200      	movs	r2, #0
 80060a2:	2120      	movs	r1, #32
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff fed3 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 80060aa:	b9c0      	cbnz	r0, 80060de <HAL_UART_Receive+0xe6>
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e2      	bne.n	8006078 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f805 3b01 	strb.w	r3, [r5], #1
 80060ba:	e7e3      	b.n	8006084 <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 80060bc:	2320      	movs	r3, #32
 80060be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80060c2:	2000      	movs	r0, #0
 80060c4:	e000      	b.n	80060c8 <HAL_UART_Receive+0xd0>
    return HAL_BUSY;
 80060c6:	2002      	movs	r0, #2
}
 80060c8:	b003      	add	sp, #12
 80060ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80060ce:	2001      	movs	r0, #1
 80060d0:	e7fa      	b.n	80060c8 <HAL_UART_Receive+0xd0>
 80060d2:	2001      	movs	r0, #1
 80060d4:	e7f8      	b.n	80060c8 <HAL_UART_Receive+0xd0>
    __HAL_LOCK(huart);
 80060d6:	2002      	movs	r0, #2
 80060d8:	e7f6      	b.n	80060c8 <HAL_UART_Receive+0xd0>
          return HAL_TIMEOUT;
 80060da:	2003      	movs	r0, #3
 80060dc:	e7f4      	b.n	80060c8 <HAL_UART_Receive+0xd0>
          return HAL_TIMEOUT;
 80060de:	2003      	movs	r0, #3
 80060e0:	e7f2      	b.n	80060c8 <HAL_UART_Receive+0xd0>

080060e2 <HAL_UART_TxCpltCallback>:
}
 80060e2:	4770      	bx	lr

080060e4 <UART_EndTransmit_IT>:
{
 80060e4:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060e6:	6801      	ldr	r1, [r0, #0]
 80060e8:	68ca      	ldr	r2, [r1, #12]
 80060ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ee:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	2220      	movs	r2, #32
 80060f2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80060f6:	f7ff fff4 	bl	80060e2 <HAL_UART_TxCpltCallback>
}
 80060fa:	2000      	movs	r0, #0
 80060fc:	bd08      	pop	{r3, pc}

080060fe <HAL_UART_RxCpltCallback>:
}
 80060fe:	4770      	bx	lr

08006100 <UART_Receive_IT>:
{
 8006100:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006102:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b22      	cmp	r3, #34	; 0x22
 800610a:	d146      	bne.n	800619a <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800610c:	6883      	ldr	r3, [r0, #8]
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d00f      	beq.n	8006134 <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006114:	6903      	ldr	r3, [r0, #16]
 8006116:	bb0b      	cbnz	r3, 800615c <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006118:	6803      	ldr	r3, [r0, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	6281      	str	r1, [r0, #40]	; 0x28
 8006122:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8006124:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800612e:	b1f3      	cbz	r3, 800616e <UART_Receive_IT+0x6e>
    return HAL_OK;
 8006130:	2000      	movs	r0, #0
}
 8006132:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006134:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006136:	6903      	ldr	r3, [r0, #16]
 8006138:	b943      	cbnz	r3, 800614c <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800613a:	6803      	ldr	r3, [r0, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8006144:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006146:	3302      	adds	r3, #2
 8006148:	6283      	str	r3, [r0, #40]	; 0x28
 800614a:	e7eb      	b.n	8006124 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800614c:	6803      	ldr	r3, [r0, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8006154:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006156:	3301      	adds	r3, #1
 8006158:	6283      	str	r3, [r0, #40]	; 0x28
 800615a:	e7e3      	b.n	8006124 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800615c:	6803      	ldr	r3, [r0, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006162:	1c51      	adds	r1, r2, #1
 8006164:	6281      	str	r1, [r0, #40]	; 0x28
 8006166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616a:	7013      	strb	r3, [r2, #0]
 800616c:	e7da      	b.n	8006124 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800616e:	6802      	ldr	r2, [r0, #0]
 8006170:	68d3      	ldr	r3, [r2, #12]
 8006172:	f023 0320 	bic.w	r3, r3, #32
 8006176:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006178:	6802      	ldr	r2, [r0, #0]
 800617a:	68d3      	ldr	r3, [r2, #12]
 800617c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006180:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006182:	6802      	ldr	r2, [r0, #0]
 8006184:	6953      	ldr	r3, [r2, #20]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800618c:	2320      	movs	r3, #32
 800618e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8006192:	f7ff ffb4 	bl	80060fe <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8006196:	2000      	movs	r0, #0
 8006198:	e7cb      	b.n	8006132 <UART_Receive_IT+0x32>
    return HAL_BUSY;
 800619a:	2002      	movs	r0, #2
 800619c:	e7c9      	b.n	8006132 <UART_Receive_IT+0x32>

0800619e <HAL_UART_ErrorCallback>:
}
 800619e:	4770      	bx	lr

080061a0 <HAL_UART_IRQHandler>:
{
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061a4:	6802      	ldr	r2, [r0, #0]
 80061a6:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061a8:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061aa:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80061ac:	f013 000f 	ands.w	r0, r3, #15
 80061b0:	d105      	bne.n	80061be <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061b2:	f013 0f20 	tst.w	r3, #32
 80061b6:	d002      	beq.n	80061be <HAL_UART_IRQHandler+0x1e>
 80061b8:	f011 0f20 	tst.w	r1, #32
 80061bc:	d113      	bne.n	80061e6 <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061be:	b128      	cbz	r0, 80061cc <HAL_UART_IRQHandler+0x2c>
 80061c0:	f012 0201 	ands.w	r2, r2, #1
 80061c4:	d113      	bne.n	80061ee <HAL_UART_IRQHandler+0x4e>
 80061c6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80061ca:	d110      	bne.n	80061ee <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061d0:	d002      	beq.n	80061d8 <HAL_UART_IRQHandler+0x38>
 80061d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80061d6:	d16c      	bne.n	80062b2 <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061dc:	d002      	beq.n	80061e4 <HAL_UART_IRQHandler+0x44>
 80061de:	f011 0f40 	tst.w	r1, #64	; 0x40
 80061e2:	d16a      	bne.n	80062ba <HAL_UART_IRQHandler+0x11a>
}
 80061e4:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff ff8a 	bl	8006100 <UART_Receive_IT>
      return;
 80061ec:	e7fa      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061ee:	f013 0f01 	tst.w	r3, #1
 80061f2:	d006      	beq.n	8006202 <HAL_UART_IRQHandler+0x62>
 80061f4:	f411 7f80 	tst.w	r1, #256	; 0x100
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80061fc:	f040 0001 	orr.w	r0, r0, #1
 8006200:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006202:	f013 0f04 	tst.w	r3, #4
 8006206:	d004      	beq.n	8006212 <HAL_UART_IRQHandler+0x72>
 8006208:	b11a      	cbz	r2, 8006212 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800620a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800620c:	f040 0002 	orr.w	r0, r0, #2
 8006210:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006212:	f013 0f02 	tst.w	r3, #2
 8006216:	d004      	beq.n	8006222 <HAL_UART_IRQHandler+0x82>
 8006218:	b11a      	cbz	r2, 8006222 <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800621a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800621c:	f040 0004 	orr.w	r0, r0, #4
 8006220:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006222:	f013 0f08 	tst.w	r3, #8
 8006226:	d007      	beq.n	8006238 <HAL_UART_IRQHandler+0x98>
 8006228:	f011 0f20 	tst.w	r1, #32
 800622c:	d100      	bne.n	8006230 <HAL_UART_IRQHandler+0x90>
 800622e:	b11a      	cbz	r2, 8006238 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006230:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006232:	f042 0208 	orr.w	r2, r2, #8
 8006236:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006238:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800623a:	2a00      	cmp	r2, #0
 800623c:	d0d2      	beq.n	80061e4 <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800623e:	f013 0f20 	tst.w	r3, #32
 8006242:	d002      	beq.n	800624a <HAL_UART_IRQHandler+0xaa>
 8006244:	f011 0f20 	tst.w	r1, #32
 8006248:	d121      	bne.n	800628e <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006252:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006254:	f012 0f08 	tst.w	r2, #8
 8006258:	d100      	bne.n	800625c <HAL_UART_IRQHandler+0xbc>
 800625a:	b323      	cbz	r3, 80062a6 <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 800625c:	4620      	mov	r0, r4
 800625e:	f7ff fcc1 	bl	8005be4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	f012 0f40 	tst.w	r2, #64	; 0x40
 800626a:	d018      	beq.n	800629e <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006272:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006276:	b173      	cbz	r3, 8006296 <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006278:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <HAL_UART_IRQHandler+0x124>)
 800627a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800627c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800627e:	f7fe f955 	bl	800452c <HAL_DMA_Abort_IT>
 8006282:	2800      	cmp	r0, #0
 8006284:	d0ae      	beq.n	80061e4 <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006286:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006288:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800628a:	4798      	blx	r3
 800628c:	e7aa      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff ff36 	bl	8006100 <UART_Receive_IT>
 8006294:	e7d9      	b.n	800624a <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff ff81 	bl	800619e <HAL_UART_ErrorCallback>
 800629c:	e7a2      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 800629e:	4620      	mov	r0, r4
 80062a0:	f7ff ff7d 	bl	800619e <HAL_UART_ErrorCallback>
 80062a4:	e79e      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7ff ff79 	bl	800619e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 80062b0:	e798      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7ff fca4 	bl	8005c00 <UART_Transmit_IT>
    return;
 80062b8:	e794      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff ff12 	bl	80060e4 <UART_EndTransmit_IT>
    return;
 80062c0:	e790      	b.n	80061e4 <HAL_UART_IRQHandler+0x44>
 80062c2:	bf00      	nop
 80062c4:	080062c9 	.word	0x080062c9

080062c8 <UART_DMAAbortOnError>:
{
 80062c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062d0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80062d2:	f7ff ff64 	bl	800619e <HAL_UART_ErrorCallback>
}
 80062d6:	bd08      	pop	{r3, pc}

080062d8 <HAL_UART_GetState>:
  temp1 = huart->gState;
 80062d8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 80062dc:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 80062e0:	4318      	orrs	r0, r3
 80062e2:	4770      	bx	lr

080062e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e8:	2400      	movs	r4, #0
 80062ea:	9405      	str	r4, [sp, #20]
 80062ec:	9406      	str	r4, [sp, #24]
 80062ee:	9407      	str	r4, [sp, #28]
 80062f0:	9408      	str	r4, [sp, #32]
 80062f2:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062f4:	9400      	str	r4, [sp, #0]
 80062f6:	4b3d      	ldr	r3, [pc, #244]	; (80063ec <MX_GPIO_Init+0x108>)
 80062f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fa:	f042 0204 	orr.w	r2, r2, #4
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006302:	f002 0204 	and.w	r2, r2, #4
 8006306:	9200      	str	r2, [sp, #0]
 8006308:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800630a:	9401      	str	r4, [sp, #4]
 800630c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
 8006314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006316:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800631e:	9402      	str	r4, [sp, #8]
 8006320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
 8006328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632a:	f002 0201 	and.w	r2, r2, #1
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006332:	9403      	str	r4, [sp, #12]
 8006334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006336:	f042 0202 	orr.w	r2, r2, #2
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
 800633c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633e:	f002 0202 	and.w	r2, r2, #2
 8006342:	9203      	str	r2, [sp, #12]
 8006344:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006346:	9404      	str	r4, [sp, #16]
 8006348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634a:	f042 0208 	orr.w	r2, r2, #8
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800635a:	4e25      	ldr	r6, [pc, #148]	; (80063f0 <MX_GPIO_Init+0x10c>)
 800635c:	4622      	mov	r2, r4
 800635e:	2120      	movs	r1, #32
 8006360:	4630      	mov	r0, r6
 8006362:	f7fe fa53 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800636a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <MX_GPIO_Init+0x110>)
 800636e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006370:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006372:	4f21      	ldr	r7, [pc, #132]	; (80063f8 <MX_GPIO_Init+0x114>)
 8006374:	a905      	add	r1, sp, #20
 8006376:	4638      	mov	r0, r7
 8006378:	f7fe f8ec 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800637c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006380:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006382:	2503      	movs	r5, #3
 8006384:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006386:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006388:	a905      	add	r1, sp, #20
 800638a:	4638      	mov	r0, r7
 800638c:	f7fe f8e2 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8006390:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 8006394:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006396:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006398:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800639a:	a905      	add	r1, sp, #20
 800639c:	4630      	mov	r0, r6
 800639e:	f7fe f8d9 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80063a2:	2320      	movs	r3, #32
 80063a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063a6:	2301      	movs	r3, #1
 80063a8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80063ae:	a905      	add	r1, sp, #20
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7fe f8cf 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80063b6:	f24f 43f7 	movw	r3, #62711	; 0xf4f7
 80063ba:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063bc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063be:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063c0:	a905      	add	r1, sp, #20
 80063c2:	480e      	ldr	r0, [pc, #56]	; (80063fc <MX_GPIO_Init+0x118>)
 80063c4:	f7fe f8c6 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80063c8:	2304      	movs	r3, #4
 80063ca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063cc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063d0:	a905      	add	r1, sp, #20
 80063d2:	480b      	ldr	r0, [pc, #44]	; (8006400 <MX_GPIO_Init+0x11c>)
 80063d4:	f7fe f8be 	bl	8004554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80063d8:	4622      	mov	r2, r4
 80063da:	4621      	mov	r1, r4
 80063dc:	2028      	movs	r0, #40	; 0x28
 80063de:	f7fe f84d 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80063e2:	2028      	movs	r0, #40	; 0x28
 80063e4:	f7fe f87e 	bl	80044e4 <HAL_NVIC_EnableIRQ>

}
 80063e8:	b00b      	add	sp, #44	; 0x2c
 80063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40020000 	.word	0x40020000
 80063f4:	10210000 	.word	0x10210000
 80063f8:	40020800 	.word	0x40020800
 80063fc:	40020400 	.word	0x40020400
 8006400:	40020c00 	.word	0x40020c00

08006404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8006406:	2201      	movs	r2, #1
 8006408:	2120      	movs	r1, #32
 800640a:	4802      	ldr	r0, [pc, #8]	; (8006414 <Error_Handler+0x10>)
 800640c:	f7fe f9fe 	bl	800480c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8006410:	bd08      	pop	{r3, pc}
 8006412:	bf00      	nop
 8006414:	40020000 	.word	0x40020000

08006418 <MX_USART2_UART_Init>:
{
 8006418:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800641a:	480a      	ldr	r0, [pc, #40]	; (8006444 <MX_USART2_UART_Init+0x2c>)
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <MX_USART2_UART_Init+0x30>)
 800641e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8006420:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006424:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006426:	2300      	movs	r3, #0
 8006428:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800642a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800642c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800642e:	220c      	movs	r2, #12
 8006430:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006432:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006434:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006436:	f7ff fd3f 	bl	8005eb8 <HAL_UART_Init>
 800643a:	b900      	cbnz	r0, 800643e <MX_USART2_UART_Init+0x26>
}
 800643c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800643e:	f7ff ffe1 	bl	8006404 <Error_Handler>
}
 8006442:	e7fb      	b.n	800643c <MX_USART2_UART_Init+0x24>
 8006444:	20000884 	.word	0x20000884
 8006448:	40004400 	.word	0x40004400

0800644c <MX_TIM10_Init>:
{
 800644c:	b508      	push	{r3, lr}
  htim10.Instance = TIM10;
 800644e:	4809      	ldr	r0, [pc, #36]	; (8006474 <MX_TIM10_Init+0x28>)
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <MX_TIM10_Init+0x2c>)
 8006452:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 8400;
 8006454:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8006458:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800645a:	2300      	movs	r3, #0
 800645c:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 100;
 800645e:	2264      	movs	r2, #100	; 0x64
 8006460:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006462:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006464:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006466:	f7ff fba1 	bl	8005bac <HAL_TIM_Base_Init>
 800646a:	b900      	cbnz	r0, 800646e <MX_TIM10_Init+0x22>
}
 800646c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800646e:	f7ff ffc9 	bl	8006404 <Error_Handler>
}
 8006472:	e7fb      	b.n	800646c <MX_TIM10_Init+0x20>
 8006474:	200006e4 	.word	0x200006e4
 8006478:	40014400 	.word	0x40014400

0800647c <MX_ADC1_Init>:
{
 800647c:	b500      	push	{lr}
 800647e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006480:	2300      	movs	r3, #0
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800648a:	4815      	ldr	r0, [pc, #84]	; (80064e0 <MX_ADC1_Init+0x64>)
 800648c:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <MX_ADC1_Init+0x68>)
 800648e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006494:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006496:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006498:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800649a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800649c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80064a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80064a2:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <MX_ADC1_Init+0x6c>)
 80064a4:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80064a6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80064a8:	2201      	movs	r2, #1
 80064aa:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80064ac:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80064b0:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064b2:	f7fd fedd 	bl	8004270 <HAL_ADC_Init>
 80064b6:	b968      	cbnz	r0, 80064d4 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80064b8:	2310      	movs	r3, #16
 80064ba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80064bc:	2301      	movs	r3, #1
 80064be:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80064c0:	2300      	movs	r3, #0
 80064c2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064c4:	4669      	mov	r1, sp
 80064c6:	4806      	ldr	r0, [pc, #24]	; (80064e0 <MX_ADC1_Init+0x64>)
 80064c8:	f7fd fefe 	bl	80042c8 <HAL_ADC_ConfigChannel>
 80064cc:	b928      	cbnz	r0, 80064da <MX_ADC1_Init+0x5e>
}
 80064ce:	b005      	add	sp, #20
 80064d0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80064d4:	f7ff ff96 	bl	8006404 <Error_Handler>
 80064d8:	e7ee      	b.n	80064b8 <MX_ADC1_Init+0x3c>
    Error_Handler();
 80064da:	f7ff ff93 	bl	8006404 <Error_Handler>
}
 80064de:	e7f6      	b.n	80064ce <MX_ADC1_Init+0x52>
 80064e0:	20000734 	.word	0x20000734
 80064e4:	40012000 	.word	0x40012000
 80064e8:	0f000001 	.word	0x0f000001

080064ec <SystemClock_Config>:
{
 80064ec:	b500      	push	{lr}
 80064ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064f0:	2230      	movs	r2, #48	; 0x30
 80064f2:	2100      	movs	r1, #0
 80064f4:	a808      	add	r0, sp, #32
 80064f6:	f000 fc45 	bl	8006d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064fa:	2300      	movs	r3, #0
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	4a20      	ldr	r2, [pc, #128]	; (800658c <SystemClock_Config+0xa0>)
 800650a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800650c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006510:	6411      	str	r1, [r2, #64]	; 0x40
 8006512:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006514:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006518:	9201      	str	r2, [sp, #4]
 800651a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	491c      	ldr	r1, [pc, #112]	; (8006590 <SystemClock_Config+0xa4>)
 8006520:	680a      	ldr	r2, [r1, #0]
 8006522:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800652a:	600a      	str	r2, [r1, #0]
 800652c:	680a      	ldr	r2, [r1, #0]
 800652e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8006532:	9202      	str	r2, [sp, #8]
 8006534:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006536:	2102      	movs	r1, #2
 8006538:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800653a:	2201      	movs	r2, #1
 800653c:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800653e:	2210      	movs	r2, #16
 8006540:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006542:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006544:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006546:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006548:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800654c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800654e:	2304      	movs	r3, #4
 8006550:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006552:	2307      	movs	r3, #7
 8006554:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006556:	a808      	add	r0, sp, #32
 8006558:	f7fe fed6 	bl	8005308 <HAL_RCC_OscConfig>
 800655c:	b980      	cbnz	r0, 8006580 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800655e:	230f      	movs	r3, #15
 8006560:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006562:	2102      	movs	r1, #2
 8006564:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006566:	2300      	movs	r3, #0
 8006568:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800656a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800656e:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006570:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006572:	a803      	add	r0, sp, #12
 8006574:	f7ff f924 	bl	80057c0 <HAL_RCC_ClockConfig>
 8006578:	b928      	cbnz	r0, 8006586 <SystemClock_Config+0x9a>
}
 800657a:	b015      	add	sp, #84	; 0x54
 800657c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006580:	f7ff ff40 	bl	8006404 <Error_Handler>
 8006584:	e7eb      	b.n	800655e <SystemClock_Config+0x72>
    Error_Handler();
 8006586:	f7ff ff3d 	bl	8006404 <Error_Handler>
}
 800658a:	e7f6      	b.n	800657a <SystemClock_Config+0x8e>
 800658c:	40023800 	.word	0x40023800
 8006590:	40007000 	.word	0x40007000

08006594 <main>:
{
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800659a:	f7fd fda3 	bl	80040e4 <HAL_Init>
  SystemClock_Config();
 800659e:	f7ff ffa5 	bl	80064ec <SystemClock_Config>
  MX_GPIO_Init();
 80065a2:	f7ff fe9f 	bl	80062e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80065a6:	f7ff ff37 	bl	8006418 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80065aa:	f7ff ff4f 	bl	800644c <MX_TIM10_Init>
  MX_ADC1_Init();
 80065ae:	f7ff ff65 	bl	800647c <MX_ADC1_Init>
  int init_acc = IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0 , MOTION_ACCELERO );
 80065b2:	2102      	movs	r1, #2
 80065b4:	2000      	movs	r0, #0
 80065b6:	f7fd fbd5 	bl	8003d64 <IKS01A2_MOTION_SENSOR_Init>
 80065ba:	4606      	mov	r6, r0
  int init_temperature = IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 80065bc:	2101      	movs	r1, #1
 80065be:	2000      	movs	r0, #0
 80065c0:	f7fd f94a 	bl	8003858 <IKS01A2_ENV_SENSOR_Init>
 80065c4:	4605      	mov	r5, r0
  int init_humidity = IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 80065c6:	2104      	movs	r1, #4
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7fd f945 	bl	8003858 <IKS01A2_ENV_SENSOR_Init>
 80065ce:	4604      	mov	r4, r0
  int init_pressure = IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 80065d0:	2102      	movs	r1, #2
 80065d2:	2001      	movs	r0, #1
 80065d4:	f7fd f940 	bl	8003858 <IKS01A2_ENV_SENSOR_Init>
  if (init_acc == 0 && init_temperature ==0 && init_humidity ==0 && init_pressure ==0){
 80065d8:	b91e      	cbnz	r6, 80065e2 <main+0x4e>
 80065da:	b915      	cbnz	r5, 80065e2 <main+0x4e>
 80065dc:	b90c      	cbnz	r4, 80065e2 <main+0x4e>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d073      	beq.n	80066ca <main+0x136>
  int enable_acc = IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO );
 80065e2:	2102      	movs	r1, #2
 80065e4:	2000      	movs	r0, #0
 80065e6:	f7fd fc7f 	bl	8003ee8 <IKS01A2_MOTION_SENSOR_Enable>
 80065ea:	4606      	mov	r6, r0
  int enable_temperature = IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 80065ec:	2101      	movs	r1, #1
 80065ee:	2000      	movs	r0, #0
 80065f0:	f7fd f9c2 	bl	8003978 <IKS01A2_ENV_SENSOR_Enable>
 80065f4:	4605      	mov	r5, r0
  int enable_humidity = IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 80065f6:	2104      	movs	r1, #4
 80065f8:	2000      	movs	r0, #0
 80065fa:	f7fd f9bd 	bl	8003978 <IKS01A2_ENV_SENSOR_Enable>
 80065fe:	4604      	mov	r4, r0
  int enable_pressure = IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8006600:	2102      	movs	r1, #2
 8006602:	2001      	movs	r0, #1
 8006604:	f7fd f9b8 	bl	8003978 <IKS01A2_ENV_SENSOR_Enable>
  if ( enable_acc == 0 && enable_temperature == 0 && enable_humidity == 0 && enable_pressure == 0){
 8006608:	b91e      	cbnz	r6, 8006612 <main+0x7e>
 800660a:	b915      	cbnz	r5, 8006612 <main+0x7e>
 800660c:	b90c      	cbnz	r4, 8006612 <main+0x7e>
 800660e:	2800      	cmp	r0, #0
 8006610:	d06c      	beq.n	80066ec <main+0x158>
  IKS01A2_MOTION_SENSOR_GetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_odr);
 8006612:	4d40      	ldr	r5, [pc, #256]	; (8006714 <main+0x180>)
 8006614:	462a      	mov	r2, r5
 8006616:	2102      	movs	r1, #2
 8006618:	2000      	movs	r0, #0
 800661a:	f7fd fce7 	bl	8003fec <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
  IKS01A2_MOTION_SENSOR_GetSensitivity(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_sens);
 800661e:	4e3e      	ldr	r6, [pc, #248]	; (8006718 <main+0x184>)
 8006620:	4632      	mov	r2, r6
 8006622:	2102      	movs	r1, #2
 8006624:	2000      	movs	r0, #0
 8006626:	f7fd fcb5 	bl	8003f94 <IKS01A2_MOTION_SENSOR_GetSensitivity>
  IKS01A2_MOTION_SENSOR_GetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelerometer_fs);
 800662a:	4f3c      	ldr	r7, [pc, #240]	; (800671c <main+0x188>)
 800662c:	463a      	mov	r2, r7
 800662e:	2102      	movs	r1, #2
 8006630:	2000      	movs	r0, #0
 8006632:	f7fd fd07 	bl	8004044 <IKS01A2_MOTION_SENSOR_GetFullScale>
  IKS01A2_ENV_SENSOR_GetOutputDataRate(IKS01A2_HTS221_0, ENV_TEMPERATURE, &temperature_odr);
 8006636:	4a3a      	ldr	r2, [pc, #232]	; (8006720 <main+0x18c>)
 8006638:	2101      	movs	r1, #1
 800663a:	2000      	movs	r0, #0
 800663c:	f7fd f9c6 	bl	80039cc <IKS01A2_ENV_SENSOR_GetOutputDataRate>
  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, &temperature_gv);
 8006640:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800673c <main+0x1a8>
 8006644:	4642      	mov	r2, r8
 8006646:	2101      	movs	r1, #1
 8006648:	2000      	movs	r0, #0
 800664a:	f7fd f9eb 	bl	8003a24 <IKS01A2_ENV_SENSOR_GetValue>
  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, &pressure_gv);
 800664e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8006740 <main+0x1ac>
 8006652:	4652      	mov	r2, sl
 8006654:	2102      	movs	r1, #2
 8006656:	2001      	movs	r0, #1
 8006658:	f7fd f9e4 	bl	8003a24 <IKS01A2_ENV_SENSOR_GetValue>
  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, &humidity_gv);
 800665c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8006744 <main+0x1b0>
 8006660:	464a      	mov	r2, r9
 8006662:	2104      	movs	r1, #4
 8006664:	2000      	movs	r0, #0
 8006666:	f7fd f9dd 	bl	8003a24 <IKS01A2_ENV_SENSOR_GetValue>
  snprintf(parameterMessage, MAX_BUF_SIZE, "> Output rate:%f Hz	Sensitivity:%f g FullScale:%ld g\r\n TEMP is %.3f, HUMIDITY %.3f%%, PRESSURE %.3f mBar",accelerometer_odr, accelerometer_sens, accelerometer_fs, temperature_gv, humidity_gv, pressure_gv);
 800666a:	4c2e      	ldr	r4, [pc, #184]	; (8006724 <main+0x190>)
 800666c:	f8da 0000 	ldr.w	r0, [sl]
 8006670:	f7f9 ff72 	bl	8000558 <__aeabi_f2d>
 8006674:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006678:	f8d9 0000 	ldr.w	r0, [r9]
 800667c:	f7f9 ff6c 	bl	8000558 <__aeabi_f2d>
 8006680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006684:	f8d8 0000 	ldr.w	r0, [r8]
 8006688:	f7f9 ff66 	bl	8000558 <__aeabi_f2d>
 800668c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	6830      	ldr	r0, [r6, #0]
 8006696:	f7f9 ff5f 	bl	8000558 <__aeabi_f2d>
 800669a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669e:	6828      	ldr	r0, [r5, #0]
 80066a0:	f7f9 ff5a 	bl	8000558 <__aeabi_f2d>
 80066a4:	e9cd 0100 	strd	r0, r1, [sp]
 80066a8:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <main+0x194>)
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 ffdb 	bl	8007668 <sniprintf>
  if(HAL_UART_Transmit(&huart2, (uint8_t*)parameterMessage, MAX_BUF_SIZE, 1000) != HAL_OK){Error_Handler();}
 80066b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066b6:	2280      	movs	r2, #128	; 0x80
 80066b8:	4621      	mov	r1, r4
 80066ba:	481c      	ldr	r0, [pc, #112]	; (800672c <main+0x198>)
 80066bc:	f7ff fc2b 	bl	8005f16 <HAL_UART_Transmit>
 80066c0:	bb28      	cbnz	r0, 800670e <main+0x17a>
  HAL_TIM_Base_Start_IT(&htim10);
 80066c2:	481b      	ldr	r0, [pc, #108]	; (8006730 <main+0x19c>)
 80066c4:	f7ff f952 	bl	800596c <HAL_TIM_Base_Start_IT>
  while (1)
 80066c8:	e7fe      	b.n	80066c8 <main+0x134>
  	  if(HAL_UART_Transmit(&huart2, (uint8_t*)initMessage, MAX_BUF_SIZE, 1000) != HAL_OK){Error_Handler();}
 80066ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066ce:	2280      	movs	r2, #128	; 0x80
 80066d0:	4918      	ldr	r1, [pc, #96]	; (8006734 <main+0x1a0>)
 80066d2:	4816      	ldr	r0, [pc, #88]	; (800672c <main+0x198>)
 80066d4:	f7ff fc1f 	bl	8005f16 <HAL_UART_Transmit>
 80066d8:	b928      	cbnz	r0, 80066e6 <main+0x152>
  	  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 80066da:	4814      	ldr	r0, [pc, #80]	; (800672c <main+0x198>)
 80066dc:	f7ff fdfc 	bl	80062d8 <HAL_UART_GetState>
 80066e0:	2820      	cmp	r0, #32
 80066e2:	d1fa      	bne.n	80066da <main+0x146>
 80066e4:	e77d      	b.n	80065e2 <main+0x4e>
  	  if(HAL_UART_Transmit(&huart2, (uint8_t*)initMessage, MAX_BUF_SIZE, 1000) != HAL_OK){Error_Handler();}
 80066e6:	f7ff fe8d 	bl	8006404 <Error_Handler>
 80066ea:	e7f6      	b.n	80066da <main+0x146>
  	  if(HAL_UART_Transmit(&huart2, (uint8_t*)enablingMessage, MAX_BUF_SIZE, 1000) != HAL_OK){Error_Handler();}
 80066ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	4911      	ldr	r1, [pc, #68]	; (8006738 <main+0x1a4>)
 80066f4:	480d      	ldr	r0, [pc, #52]	; (800672c <main+0x198>)
 80066f6:	f7ff fc0e 	bl	8005f16 <HAL_UART_Transmit>
 80066fa:	b928      	cbnz	r0, 8006708 <main+0x174>
  	  while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 80066fc:	480b      	ldr	r0, [pc, #44]	; (800672c <main+0x198>)
 80066fe:	f7ff fdeb 	bl	80062d8 <HAL_UART_GetState>
 8006702:	2820      	cmp	r0, #32
 8006704:	d1fa      	bne.n	80066fc <main+0x168>
 8006706:	e784      	b.n	8006612 <main+0x7e>
  	  if(HAL_UART_Transmit(&huart2, (uint8_t*)enablingMessage, MAX_BUF_SIZE, 1000) != HAL_OK){Error_Handler();}
 8006708:	f7ff fe7c 	bl	8006404 <Error_Handler>
 800670c:	e7f6      	b.n	80066fc <main+0x168>
  if(HAL_UART_Transmit(&huart2, (uint8_t*)parameterMessage, MAX_BUF_SIZE, 1000) != HAL_OK){Error_Handler();}
 800670e:	f7ff fe79 	bl	8006404 <Error_Handler>
 8006712:	e7d6      	b.n	80066c2 <main+0x12e>
 8006714:	200008e0 	.word	0x200008e0
 8006718:	20000724 	.word	0x20000724
 800671c:	20000728 	.word	0x20000728
 8006720:	20000730 	.word	0x20000730
 8006724:	200005e4 	.word	0x200005e4
 8006728:	08009b40 	.word	0x08009b40
 800672c:	20000884 	.word	0x20000884
 8006730:	200006e4 	.word	0x200006e4
 8006734:	20000138 	.word	0x20000138
 8006738:	200001b8 	.word	0x200001b8
 800673c:	2000072c 	.word	0x2000072c
 8006740:	200007fc 	.word	0x200007fc
 8006744:	200005e0 	.word	0x200005e0

08006748 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006748:	b510      	push	{r4, lr}
	counter = counter + 1;
 800674a:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	3201      	adds	r2, #1
 8006750:	601a      	str	r2, [r3, #0]
	data_counter=0;
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t*)askMessage, sizeof(askMessage),1000) != HAL_OK){Error_Handler();}
 8006756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800675a:	2235      	movs	r2, #53	; 0x35
 800675c:	491a      	ldr	r1, [pc, #104]	; (80067c8 <HAL_GPIO_EXTI_Callback+0x80>)
 800675e:	481b      	ldr	r0, [pc, #108]	; (80067cc <HAL_GPIO_EXTI_Callback+0x84>)
 8006760:	f7ff fbd9 	bl	8005f16 <HAL_UART_Transmit>
 8006764:	bb20      	cbnz	r0, 80067b0 <HAL_GPIO_EXTI_Callback+0x68>
	if (HAL_UART_Receive(&huart2, (uint8_t *)aRxBuffer, INPUT_BUFFER_SIZE ,1000) != HAL_OK){Error_Handler();}
 8006766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676a:	2201      	movs	r2, #1
 800676c:	4918      	ldr	r1, [pc, #96]	; (80067d0 <HAL_GPIO_EXTI_Callback+0x88>)
 800676e:	4817      	ldr	r0, [pc, #92]	; (80067cc <HAL_GPIO_EXTI_Callback+0x84>)
 8006770:	f7ff fc42 	bl	8005ff8 <HAL_UART_Receive>
 8006774:	b9f8      	cbnz	r0, 80067b6 <HAL_GPIO_EXTI_Callback+0x6e>
	while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 8006776:	4815      	ldr	r0, [pc, #84]	; (80067cc <HAL_GPIO_EXTI_Callback+0x84>)
 8006778:	f7ff fdae 	bl	80062d8 <HAL_UART_GetState>
 800677c:	2820      	cmp	r0, #32
 800677e:	d1fa      	bne.n	8006776 <HAL_GPIO_EXTI_Callback+0x2e>
	snprintf(letterEndMessage, MAX_BUF_SIZE, ">Acquisition of [%s] letter \r\n", (char*)aRxBuffer);
 8006780:	4c14      	ldr	r4, [pc, #80]	; (80067d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_GPIO_EXTI_Callback+0x88>)
 8006784:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <HAL_GPIO_EXTI_Callback+0x90>)
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	4620      	mov	r0, r4
 800678a:	f000 ff6d 	bl	8007668 <sniprintf>
	if(HAL_UART_Transmit(&huart2, (uint8_t*)letterEndMessage, MAX_BUF_SIZE ,1000) != HAL_OK){Error_Handler();}
 800678e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	4621      	mov	r1, r4
 8006796:	480d      	ldr	r0, [pc, #52]	; (80067cc <HAL_GPIO_EXTI_Callback+0x84>)
 8006798:	f7ff fbbd 	bl	8005f16 <HAL_UART_Transmit>
 800679c:	b970      	cbnz	r0, 80067bc <HAL_GPIO_EXTI_Callback+0x74>
	while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 800679e:	480b      	ldr	r0, [pc, #44]	; (80067cc <HAL_GPIO_EXTI_Callback+0x84>)
 80067a0:	f7ff fd9a 	bl	80062d8 <HAL_UART_GetState>
 80067a4:	2820      	cmp	r0, #32
 80067a6:	d1fa      	bne.n	800679e <HAL_GPIO_EXTI_Callback+0x56>
	start_acquisition=1;
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	609a      	str	r2, [r3, #8]
}
 80067ae:	bd10      	pop	{r4, pc}
	if(HAL_UART_Transmit(&huart2, (uint8_t*)askMessage, sizeof(askMessage),1000) != HAL_OK){Error_Handler();}
 80067b0:	f7ff fe28 	bl	8006404 <Error_Handler>
 80067b4:	e7d7      	b.n	8006766 <HAL_GPIO_EXTI_Callback+0x1e>
	if (HAL_UART_Receive(&huart2, (uint8_t *)aRxBuffer, INPUT_BUFFER_SIZE ,1000) != HAL_OK){Error_Handler();}
 80067b6:	f7ff fe25 	bl	8006404 <Error_Handler>
 80067ba:	e7dc      	b.n	8006776 <HAL_GPIO_EXTI_Callback+0x2e>
	if(HAL_UART_Transmit(&huart2, (uint8_t*)letterEndMessage, MAX_BUF_SIZE ,1000) != HAL_OK){Error_Handler();}
 80067bc:	f7ff fe22 	bl	8006404 <Error_Handler>
 80067c0:	e7ed      	b.n	800679e <HAL_GPIO_EXTI_Callback+0x56>
 80067c2:	bf00      	nop
 80067c4:	200005a8 	.word	0x200005a8
 80067c8:	20000238 	.word	0x20000238
 80067cc:	20000884 	.word	0x20000884
 80067d0:	20000880 	.word	0x20000880
 80067d4:	2000077c 	.word	0x2000077c
 80067d8:	08009bac 	.word	0x08009bac

080067dc <HAL_TIM_PeriodElapsedCallback>:
	if(data_counter == sample_n){
 80067dc:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80067e2:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <HAL_TIM_PeriodElapsedCallback+0x26>
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim ){
 80067ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	b088      	sub	sp, #32
	}else if(start_acquisition == 1){
 80067f0:	4a28      	ldr	r2, [pc, #160]	; (8006894 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80067f2:	6892      	ldr	r2, [r2, #8]
 80067f4:	2a01      	cmp	r2, #1
 80067f6:	d008      	beq.n	800680a <HAL_TIM_PeriodElapsedCallback+0x2e>
		Error_Handler();
 80067f8:	f7ff fe04 	bl	8006404 <Error_Handler>
}
 80067fc:	b008      	add	sp, #32
 80067fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		start_acquisition=0;
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8006804:	2200      	movs	r2, #0
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	4770      	bx	lr
		data_counter ++;
 800680a:	4d22      	ldr	r5, [pc, #136]	; (8006894 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800680c:	3301      	adds	r3, #1
 800680e:	606b      	str	r3, [r5, #4]
		IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &acceleration);
 8006810:	4c22      	ldr	r4, [pc, #136]	; (800689c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8006812:	4622      	mov	r2, r4
 8006814:	2102      	movs	r1, #2
 8006816:	2000      	movs	r0, #0
 8006818:	f7fd fb90 	bl	8003f3c <IKS01A2_MOTION_SENSOR_GetAxes>
		IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LSM6DSL_0, ENV_TEMPERATURE, &temperature_gv);
 800681c:	4e20      	ldr	r6, [pc, #128]	; (80068a0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800681e:	4632      	mov	r2, r6
 8006820:	2101      	movs	r1, #1
 8006822:	2000      	movs	r0, #0
 8006824:	f7fd f8fe 	bl	8003a24 <IKS01A2_ENV_SENSOR_GetValue>
		IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LSM6DSL_0, ENV_HUMIDITY, &humidity_gv);
 8006828:	4f1e      	ldr	r7, [pc, #120]	; (80068a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800682a:	463a      	mov	r2, r7
 800682c:	2104      	movs	r1, #4
 800682e:	2000      	movs	r0, #0
 8006830:	f7fd f8f8 	bl	8003a24 <IKS01A2_ENV_SENSOR_GetValue>
		IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, &pressure_gv);
 8006834:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80068b8 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8006838:	4642      	mov	r2, r8
 800683a:	2102      	movs	r1, #2
 800683c:	2001      	movs	r0, #1
 800683e:	f7fd f8f1 	bl	8003a24 <IKS01A2_ENV_SENSOR_GetValue>
	    		counter, (char*)aRxBuffer,(int32_t)acceleration.x, (int32_t)acceleration.y, (int32_t)acceleration.z,
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	6862      	ldr	r2, [r4, #4]
 8006846:	68a1      	ldr	r1, [r4, #8]
	    snprintf(dataOut, MAX_BUF_SIZE, "%d,%s,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8006848:	4c17      	ldr	r4, [pc, #92]	; (80068a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800684a:	edd8 7a00 	vldr	s15, [r8]
 800684e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006852:	edcd 7a06 	vstr	s15, [sp, #24]
 8006856:	edd7 7a00 	vldr	s15, [r7]
 800685a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800685e:	edcd 7a05 	vstr	s15, [sp, #20]
 8006862:	edd6 7a00 	vldr	s15, [r6]
 8006866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800686a:	edcd 7a04 	vstr	s15, [sp, #16]
 800686e:	9103      	str	r1, [sp, #12]
 8006870:	9202      	str	r2, [sp, #8]
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fef2 	bl	8007668 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)dataOut, MAX_BUF_SIZE, 1);
 8006884:	2301      	movs	r3, #1
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	4621      	mov	r1, r4
 800688a:	480a      	ldr	r0, [pc, #40]	; (80068b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800688c:	f7ff fb43 	bl	8005f16 <HAL_UART_Transmit>
 8006890:	e7b4      	b.n	80067fc <HAL_TIM_PeriodElapsedCallback+0x20>
 8006892:	bf00      	nop
 8006894:	200005a8 	.word	0x200005a8
 8006898:	20000138 	.word	0x20000138
 800689c:	200008d4 	.word	0x200008d4
 80068a0:	2000072c 	.word	0x2000072c
 80068a4:	200005e0 	.word	0x200005e0
 80068a8:	20000800 	.word	0x20000800
 80068ac:	20000880 	.word	0x20000880
 80068b0:	08009bcc 	.word	0x08009bcc
 80068b4:	20000884 	.word	0x20000884
 80068b8:	200007fc 	.word	0x200007fc

080068bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068bc:	b500      	push	{lr}
 80068be:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068c0:	2100      	movs	r1, #0
 80068c2:	9100      	str	r1, [sp, #0]
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <HAL_MspInit+0x3c>)
 80068c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44
 80068ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80068d4:	9200      	str	r2, [sp, #0]
 80068d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068d8:	9101      	str	r1, [sp, #4]
 80068da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80068ec:	2007      	movs	r0, #7
 80068ee:	f7fd fdb3 	bl	8004458 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068f2:	b003      	add	sp, #12
 80068f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80068f8:	40023800 	.word	0x40023800

080068fc <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80068fc:	6802      	ldr	r2, [r0, #0]
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_ADC_MspInit+0x28>)
 8006900:	429a      	cmp	r2, r3
 8006902:	d000      	beq.n	8006906 <HAL_ADC_MspInit+0xa>
 8006904:	4770      	bx	lr
{
 8006906:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006908:	2300      	movs	r3, #0
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <HAL_ADC_MspInit+0x2c>)
 800690e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006914:	645a      	str	r2, [r3, #68]	; 0x44
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006920:	b002      	add	sp, #8
 8006922:	4770      	bx	lr
 8006924:	40012000 	.word	0x40012000
 8006928:	40023800 	.word	0x40023800

0800692c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM10)
 800692c:	6802      	ldr	r2, [r0, #0]
 800692e:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <HAL_TIM_Base_MspInit+0x3c>)
 8006930:	429a      	cmp	r2, r3
 8006932:	d000      	beq.n	8006936 <HAL_TIM_Base_MspInit+0xa>
 8006934:	4770      	bx	lr
{
 8006936:	b500      	push	{lr}
 8006938:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800693a:	2100      	movs	r1, #0
 800693c:	9101      	str	r1, [sp, #4]
 800693e:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8006942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006944:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	9b01      	ldr	r3, [sp, #4]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006954:	460a      	mov	r2, r1
 8006956:	2019      	movs	r0, #25
 8006958:	f7fd fd90 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800695c:	2019      	movs	r0, #25
 800695e:	f7fd fdc1 	bl	80044e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006962:	b003      	add	sp, #12
 8006964:	f85d fb04 	ldr.w	pc, [sp], #4
 8006968:	40014400 	.word	0x40014400

0800696c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800696c:	b510      	push	{r4, lr}
 800696e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006970:	2300      	movs	r3, #0
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800697c:	6802      	ldr	r2, [r0, #0]
 800697e:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <HAL_UART_MspInit+0x74>)
 8006980:	429a      	cmp	r2, r3
 8006982:	d001      	beq.n	8006988 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006984:	b008      	add	sp, #32
 8006986:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8006988:	2400      	movs	r4, #0
 800698a:	9401      	str	r4, [sp, #4]
 800698c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8006990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006992:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
 8006998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800699a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069a2:	9402      	str	r4, [sp, #8]
 80069a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	9302      	str	r3, [sp, #8]
 80069b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80069b6:	230c      	movs	r3, #12
 80069b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ba:	2302      	movs	r3, #2
 80069bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069be:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069c2:	2307      	movs	r3, #7
 80069c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c6:	a903      	add	r1, sp, #12
 80069c8:	4806      	ldr	r0, [pc, #24]	; (80069e4 <HAL_UART_MspInit+0x78>)
 80069ca:	f7fd fdc3 	bl	8004554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80069ce:	4622      	mov	r2, r4
 80069d0:	4621      	mov	r1, r4
 80069d2:	2026      	movs	r0, #38	; 0x26
 80069d4:	f7fd fd52 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80069d8:	2026      	movs	r0, #38	; 0x26
 80069da:	f7fd fd83 	bl	80044e4 <HAL_NVIC_EnableIRQ>
}
 80069de:	e7d1      	b.n	8006984 <HAL_UART_MspInit+0x18>
 80069e0:	40004400 	.word	0x40004400
 80069e4:	40020000 	.word	0x40020000

080069e8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069e8:	4770      	bx	lr

080069ea <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069ea:	e7fe      	b.n	80069ea <MemManage_Handler>

080069ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ec:	e7fe      	b.n	80069ec <BusFault_Handler>

080069ee <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069ee:	e7fe      	b.n	80069ee <UsageFault_Handler>

080069f0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069f0:	4770      	bx	lr

080069f2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069f2:	4770      	bx	lr

080069f4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069f4:	4770      	bx	lr

080069f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069f6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069f8:	f7fd fb8e 	bl	8004118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069fc:	bd08      	pop	{r3, pc}
	...

08006a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006a02:	4802      	ldr	r0, [pc, #8]	; (8006a0c <TIM1_UP_TIM10_IRQHandler+0xc>)
 8006a04:	f7fe ffc7 	bl	8005996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006a08:	bd08      	pop	{r3, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200006e4 	.word	0x200006e4

08006a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006a12:	4802      	ldr	r0, [pc, #8]	; (8006a1c <USART2_IRQHandler+0xc>)
 8006a14:	f7ff fbc4 	bl	80061a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006a18:	bd08      	pop	{r3, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000884 	.word	0x20000884

08006a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006a22:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006a26:	f7fd fef7 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a2a:	bd08      	pop	{r3, pc}

08006a2c <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a32:	2500      	movs	r5, #0
 8006a34:	9501      	str	r5, [sp, #4]
 8006a36:	4c1d      	ldr	r4, [pc, #116]	; (8006aac <I2C1_MspInit+0x80>)
 8006a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a3a:	f043 0302 	orr.w	r3, r3, #2
 8006a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8006a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a50:	f04f 0a12 	mov.w	sl, #18
 8006a54:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a58:	f04f 0901 	mov.w	r9, #1
 8006a5c:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a60:	f04f 0803 	mov.w	r8, #3
 8006a64:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8006a68:	2704      	movs	r7, #4
 8006a6a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8006a6c:	4e10      	ldr	r6, [pc, #64]	; (8006ab0 <I2C1_MspInit+0x84>)
 8006a6e:	a903      	add	r1, sp, #12
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7fd fd6f 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8006a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a7c:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a80:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a84:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8006a88:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8006a8a:	a903      	add	r1, sp, #12
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7fd fd61 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a92:	9502      	str	r5, [sp, #8]
 8006a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a9a:	6423      	str	r3, [r4, #64]	; 0x40
 8006a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa2:	9302      	str	r3, [sp, #8]
 8006aa4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8006aa6:	b008      	add	sp, #32
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	40020400 	.word	0x40020400

08006ab4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006ab4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006ab6:	4a08      	ldr	r2, [pc, #32]	; (8006ad8 <I2C1_MspDeInit+0x24>)
 8006ab8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006abe:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8006ac0:	4c06      	ldr	r4, [pc, #24]	; (8006adc <I2C1_MspDeInit+0x28>)
 8006ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7fd fe18 	bl	80046fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8006acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7fd fe13 	bl	80046fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8006ad6:	bd10      	pop	{r4, pc}
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40020400 	.word	0x40020400

08006ae0 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <BSP_I2C1_DeInit+0x30>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	b17b      	cbz	r3, 8006b06 <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <BSP_I2C1_DeInit+0x30>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	b10b      	cbz	r3, 8006af2 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8006aee:	2000      	movs	r0, #0
}
 8006af0:	4770      	bx	lr
{
 8006af2:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 8006af4:	4c07      	ldr	r4, [pc, #28]	; (8006b14 <BSP_I2C1_DeInit+0x34>)
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff ffdc 	bl	8006ab4 <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7fe f9c0 	bl	8004e82 <HAL_I2C_DeInit>
 8006b02:	b910      	cbnz	r0, 8006b0a <BSP_I2C1_DeInit+0x2a>
}
 8006b04:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 8006b06:	2000      	movs	r0, #0
 8006b08:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 8006b0a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006b0e:	e7f9      	b.n	8006b04 <BSP_I2C1_DeInit+0x24>
 8006b10:	200005b4 	.word	0x200005b4
 8006b14:	200008e4 	.word	0x200008e4

08006b18 <BSP_I2C1_WriteReg>:
{
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8006b1c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8006b20:	9402      	str	r4, [sp, #8]
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	9200      	str	r2, [sp, #0]
 8006b26:	2301      	movs	r3, #1
 8006b28:	460a      	mov	r2, r1
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4808      	ldr	r0, [pc, #32]	; (8006b50 <BSP_I2C1_WriteReg+0x38>)
 8006b2e:	f7fe f9c1 	bl	8004eb4 <HAL_I2C_Mem_Write>
 8006b32:	b910      	cbnz	r0, 8006b3a <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8006b34:	2000      	movs	r0, #0
}
 8006b36:	b004      	add	sp, #16
 8006b38:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8006b3a:	4805      	ldr	r0, [pc, #20]	; (8006b50 <BSP_I2C1_WriteReg+0x38>)
 8006b3c:	f7fe fbe1 	bl	8005302 <HAL_I2C_GetError>
 8006b40:	2804      	cmp	r0, #4
 8006b42:	d002      	beq.n	8006b4a <BSP_I2C1_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006b44:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006b48:	e7f5      	b.n	8006b36 <BSP_I2C1_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006b4a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8006b4e:	e7f2      	b.n	8006b36 <BSP_I2C1_WriteReg+0x1e>
 8006b50:	200008e4 	.word	0x200008e4

08006b54 <BSP_I2C1_ReadReg>:
{
 8006b54:	b510      	push	{r4, lr}
 8006b56:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8006b58:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8006b5c:	9402      	str	r4, [sp, #8]
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	9200      	str	r2, [sp, #0]
 8006b62:	2301      	movs	r3, #1
 8006b64:	460a      	mov	r2, r1
 8006b66:	4601      	mov	r1, r0
 8006b68:	4808      	ldr	r0, [pc, #32]	; (8006b8c <BSP_I2C1_ReadReg+0x38>)
 8006b6a:	f7fe fa55 	bl	8005018 <HAL_I2C_Mem_Read>
 8006b6e:	b910      	cbnz	r0, 8006b76 <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8006b70:	2000      	movs	r0, #0
}
 8006b72:	b004      	add	sp, #16
 8006b74:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8006b76:	4805      	ldr	r0, [pc, #20]	; (8006b8c <BSP_I2C1_ReadReg+0x38>)
 8006b78:	f7fe fbc3 	bl	8005302 <HAL_I2C_GetError>
 8006b7c:	2804      	cmp	r0, #4
 8006b7e:	d002      	beq.n	8006b86 <BSP_I2C1_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006b80:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006b84:	e7f5      	b.n	8006b72 <BSP_I2C1_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006b86:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8006b8a:	e7f2      	b.n	8006b72 <BSP_I2C1_ReadReg+0x1e>
 8006b8c:	200008e4 	.word	0x200008e4

08006b90 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8006b90:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8006b92:	f7fd facd 	bl	8004130 <HAL_GetTick>
}
 8006b96:	bd08      	pop	{r3, pc}

08006b98 <MX_I2C1_Init>:
{
 8006b98:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 8006b9a:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <MX_I2C1_Init+0x28>)
 8006b9c:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <MX_I2C1_Init+0x2c>)
 8006ba0:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 8006ba6:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bac:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006bae:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 8006bb0:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006bb2:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006bb4:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006bb6:	f7fe f885 	bl	8004cc4 <HAL_I2C_Init>
 8006bba:	b100      	cbz	r0, 8006bbe <MX_I2C1_Init+0x26>
    ret = HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
}
 8006bbe:	bd08      	pop	{r3, pc}
 8006bc0:	40005400 	.word	0x40005400
 8006bc4:	00061a80 	.word	0x00061a80

08006bc8 <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 8006bc8:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <BSP_I2C1_Init+0x3c>)
 8006bca:	4a0f      	ldr	r2, [pc, #60]	; (8006c08 <BSP_I2C1_Init+0x40>)
 8006bcc:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 8006bce:	4a0f      	ldr	r2, [pc, #60]	; (8006c0c <BSP_I2C1_Init+0x44>)
 8006bd0:	6813      	ldr	r3, [r2, #0]
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	b10b      	cbz	r3, 8006bdc <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8006bd8:	2000      	movs	r0, #0
}
 8006bda:	4770      	bx	lr
{
 8006bdc:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8006bde:	4809      	ldr	r0, [pc, #36]	; (8006c04 <BSP_I2C1_Init+0x3c>)
 8006be0:	f7fe fb8c 	bl	80052fc <HAL_I2C_GetState>
 8006be4:	b108      	cbz	r0, 8006bea <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8006be6:	2000      	movs	r0, #0
}
 8006be8:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 8006bea:	4c06      	ldr	r4, [pc, #24]	; (8006c04 <BSP_I2C1_Init+0x3c>)
 8006bec:	4620      	mov	r0, r4
 8006bee:	f7ff ff1d 	bl	8006a2c <I2C1_MspInit>
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7ff ffd0 	bl	8006b98 <MX_I2C1_Init>
 8006bf8:	b908      	cbnz	r0, 8006bfe <BSP_I2C1_Init+0x36>
      	  ret = BSP_ERROR_NONE;
 8006bfa:	2000      	movs	r0, #0
  return ret;
 8006bfc:	e7f4      	b.n	8006be8 <BSP_I2C1_Init+0x20>
      	  ret = BSP_ERROR_BUS_FAILURE;
 8006bfe:	f06f 0007 	mvn.w	r0, #7
 8006c02:	e7f1      	b.n	8006be8 <BSP_I2C1_Init+0x20>
 8006c04:	200008e4 	.word	0x200008e4
 8006c08:	40005400 	.word	0x40005400
 8006c0c:	200005b4 	.word	0x200005b4

08006c10 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006c10:	2001      	movs	r0, #1
 8006c12:	4770      	bx	lr

08006c14 <_kill>:

int _kill(int pid, int sig)
{
 8006c14:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006c16:	f000 f88b 	bl	8006d30 <__errno>
 8006c1a:	2316      	movs	r3, #22
 8006c1c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8006c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c22:	bd08      	pop	{r3, pc}

08006c24 <_exit>:

void _exit (int status)
{
 8006c24:	b508      	push	{r3, lr}
	_kill(status, -1);
 8006c26:	f04f 31ff 	mov.w	r1, #4294967295
 8006c2a:	f7ff fff3 	bl	8006c14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006c2e:	e7fe      	b.n	8006c2e <_exit+0xa>

08006c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c36:	2500      	movs	r5, #0
 8006c38:	42b5      	cmp	r5, r6
 8006c3a:	da07      	bge.n	8006c4c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8006c3c:	f3af 8000 	nop.w
 8006c40:	4621      	mov	r1, r4
 8006c42:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c46:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8006c48:	460c      	mov	r4, r1
 8006c4a:	e7f5      	b.n	8006c38 <_read+0x8>
	}

return len;
}
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}

08006c50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	460c      	mov	r4, r1
 8006c54:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c56:	2500      	movs	r5, #0
 8006c58:	42b5      	cmp	r5, r6
 8006c5a:	da05      	bge.n	8006c68 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8006c5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006c60:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7f7      	b.n	8006c58 <_write+0x8>
	}
	return len;
}
 8006c68:	4630      	mov	r0, r6
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}

08006c6c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8006c6c:	b508      	push	{r3, lr}
 8006c6e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006c70:	4a0b      	ldr	r2, [pc, #44]	; (8006ca0 <_sbrk+0x34>)
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	b142      	cbz	r2, 8006c88 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8006c76:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <_sbrk+0x34>)
 8006c78:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006c7a:	4403      	add	r3, r0
 8006c7c:	466a      	mov	r2, sp
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d806      	bhi.n	8006c90 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006c82:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <_sbrk+0x34>)
 8006c84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006c86:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006c88:	4a05      	ldr	r2, [pc, #20]	; (8006ca0 <_sbrk+0x34>)
 8006c8a:	4906      	ldr	r1, [pc, #24]	; (8006ca4 <_sbrk+0x38>)
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	e7f2      	b.n	8006c76 <_sbrk+0xa>
		errno = ENOMEM;
 8006c90:	f000 f84e 	bl	8006d30 <__errno>
 8006c94:	230c      	movs	r3, #12
 8006c96:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	e7f3      	b.n	8006c86 <_sbrk+0x1a>
 8006c9e:	bf00      	nop
 8006ca0:	200005b8 	.word	0x200005b8
 8006ca4:	20000948 	.word	0x20000948

08006ca8 <_close>:

int _close(int file)
{
	return -1;
}
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	4770      	bx	lr

08006cae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cb2:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr

08006cb8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006cb8:	2001      	movs	r0, #1
 8006cba:	4770      	bx	lr

08006cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4770      	bx	lr

08006cc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cc0:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <SystemInit+0x18>)
 8006cc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cc6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cd2:	609a      	str	r2, [r3, #8]
#endif
}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ce0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ce2:	e003      	b.n	8006cec <LoopCopyDataInit>

08006ce4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006ce6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ce8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006cea:	3104      	adds	r1, #4

08006cec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006cec:	480b      	ldr	r0, [pc, #44]	; (8006d1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006cf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006cf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006cf4:	d3f6      	bcc.n	8006ce4 <CopyDataInit>
  ldr  r2, =_sbss
 8006cf6:	4a0b      	ldr	r2, [pc, #44]	; (8006d24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006cf8:	e002      	b.n	8006d00 <LoopFillZerobss>

08006cfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006cfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006cfc:	f842 3b04 	str.w	r3, [r2], #4

08006d00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006d02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006d04:	d3f9      	bcc.n	8006cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006d06:	f7ff ffdb 	bl	8006cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d0a:	f000 f817 	bl	8006d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d0e:	f7ff fc41 	bl	8006594 <main>
  bx  lr    
 8006d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d14:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8006d18:	08009fdc 	.word	0x08009fdc
  ldr  r0, =_sdata
 8006d1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d20:	20000448 	.word	0x20000448
  ldr  r2, =_sbss
 8006d24:	20000448 	.word	0x20000448
  ldr  r3, = _ebss
 8006d28:	20000948 	.word	0x20000948

08006d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d2c:	e7fe      	b.n	8006d2c <ADC_IRQHandler>
	...

08006d30 <__errno>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <__errno+0x8>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000278 	.word	0x20000278

08006d3c <__libc_init_array>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4d0d      	ldr	r5, [pc, #52]	; (8006d74 <__libc_init_array+0x38>)
 8006d40:	4c0d      	ldr	r4, [pc, #52]	; (8006d78 <__libc_init_array+0x3c>)
 8006d42:	1b64      	subs	r4, r4, r5
 8006d44:	10a4      	asrs	r4, r4, #2
 8006d46:	2600      	movs	r6, #0
 8006d48:	42a6      	cmp	r6, r4
 8006d4a:	d109      	bne.n	8006d60 <__libc_init_array+0x24>
 8006d4c:	4d0b      	ldr	r5, [pc, #44]	; (8006d7c <__libc_init_array+0x40>)
 8006d4e:	4c0c      	ldr	r4, [pc, #48]	; (8006d80 <__libc_init_array+0x44>)
 8006d50:	f002 fec8 	bl	8009ae4 <_init>
 8006d54:	1b64      	subs	r4, r4, r5
 8006d56:	10a4      	asrs	r4, r4, #2
 8006d58:	2600      	movs	r6, #0
 8006d5a:	42a6      	cmp	r6, r4
 8006d5c:	d105      	bne.n	8006d6a <__libc_init_array+0x2e>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d64:	4798      	blx	r3
 8006d66:	3601      	adds	r6, #1
 8006d68:	e7ee      	b.n	8006d48 <__libc_init_array+0xc>
 8006d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6e:	4798      	blx	r3
 8006d70:	3601      	adds	r6, #1
 8006d72:	e7f2      	b.n	8006d5a <__libc_init_array+0x1e>
 8006d74:	08009fd4 	.word	0x08009fd4
 8006d78:	08009fd4 	.word	0x08009fd4
 8006d7c:	08009fd4 	.word	0x08009fd4
 8006d80:	08009fd8 	.word	0x08009fd8

08006d84 <memset>:
 8006d84:	4402      	add	r2, r0
 8006d86:	4603      	mov	r3, r0
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d100      	bne.n	8006d8e <memset+0xa>
 8006d8c:	4770      	bx	lr
 8006d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d92:	e7f9      	b.n	8006d88 <memset+0x4>

08006d94 <__cvt>:
 8006d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	ec55 4b10 	vmov	r4, r5, d0
 8006d9c:	2d00      	cmp	r5, #0
 8006d9e:	460e      	mov	r6, r1
 8006da0:	4619      	mov	r1, r3
 8006da2:	462b      	mov	r3, r5
 8006da4:	bfbb      	ittet	lt
 8006da6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006daa:	461d      	movlt	r5, r3
 8006dac:	2300      	movge	r3, #0
 8006dae:	232d      	movlt	r3, #45	; 0x2d
 8006db0:	700b      	strb	r3, [r1, #0]
 8006db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006db8:	4691      	mov	r9, r2
 8006dba:	f023 0820 	bic.w	r8, r3, #32
 8006dbe:	bfbc      	itt	lt
 8006dc0:	4622      	movlt	r2, r4
 8006dc2:	4614      	movlt	r4, r2
 8006dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc8:	d005      	beq.n	8006dd6 <__cvt+0x42>
 8006dca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dce:	d100      	bne.n	8006dd2 <__cvt+0x3e>
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	e000      	b.n	8006dd8 <__cvt+0x44>
 8006dd6:	2103      	movs	r1, #3
 8006dd8:	ab03      	add	r3, sp, #12
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	ab02      	add	r3, sp, #8
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	ec45 4b10 	vmov	d0, r4, r5
 8006de4:	4653      	mov	r3, sl
 8006de6:	4632      	mov	r2, r6
 8006de8:	f000 fcfe 	bl	80077e8 <_dtoa_r>
 8006dec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006df0:	4607      	mov	r7, r0
 8006df2:	d102      	bne.n	8006dfa <__cvt+0x66>
 8006df4:	f019 0f01 	tst.w	r9, #1
 8006df8:	d022      	beq.n	8006e40 <__cvt+0xac>
 8006dfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dfe:	eb07 0906 	add.w	r9, r7, r6
 8006e02:	d110      	bne.n	8006e26 <__cvt+0x92>
 8006e04:	783b      	ldrb	r3, [r7, #0]
 8006e06:	2b30      	cmp	r3, #48	; 0x30
 8006e08:	d10a      	bne.n	8006e20 <__cvt+0x8c>
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fe61 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e16:	b918      	cbnz	r0, 8006e20 <__cvt+0x8c>
 8006e18:	f1c6 0601 	rsb	r6, r6, #1
 8006e1c:	f8ca 6000 	str.w	r6, [sl]
 8006e20:	f8da 3000 	ldr.w	r3, [sl]
 8006e24:	4499      	add	r9, r3
 8006e26:	2200      	movs	r2, #0
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e32:	b108      	cbz	r0, 8006e38 <__cvt+0xa4>
 8006e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e38:	2230      	movs	r2, #48	; 0x30
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	454b      	cmp	r3, r9
 8006e3e:	d307      	bcc.n	8006e50 <__cvt+0xbc>
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e44:	1bdb      	subs	r3, r3, r7
 8006e46:	4638      	mov	r0, r7
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	b004      	add	sp, #16
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	9103      	str	r1, [sp, #12]
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	e7f0      	b.n	8006e3a <__cvt+0xa6>

08006e58 <__exponent>:
 8006e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	bfb8      	it	lt
 8006e60:	4249      	neglt	r1, r1
 8006e62:	f803 2b02 	strb.w	r2, [r3], #2
 8006e66:	bfb4      	ite	lt
 8006e68:	222d      	movlt	r2, #45	; 0x2d
 8006e6a:	222b      	movge	r2, #43	; 0x2b
 8006e6c:	2909      	cmp	r1, #9
 8006e6e:	7042      	strb	r2, [r0, #1]
 8006e70:	dd2a      	ble.n	8006ec8 <__exponent+0x70>
 8006e72:	f10d 0407 	add.w	r4, sp, #7
 8006e76:	46a4      	mov	ip, r4
 8006e78:	270a      	movs	r7, #10
 8006e7a:	46a6      	mov	lr, r4
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e82:	fb07 1516 	mls	r5, r7, r6, r1
 8006e86:	3530      	adds	r5, #48	; 0x30
 8006e88:	2a63      	cmp	r2, #99	; 0x63
 8006e8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e92:	4631      	mov	r1, r6
 8006e94:	dcf1      	bgt.n	8006e7a <__exponent+0x22>
 8006e96:	3130      	adds	r1, #48	; 0x30
 8006e98:	f1ae 0502 	sub.w	r5, lr, #2
 8006e9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ea0:	1c44      	adds	r4, r0, #1
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4561      	cmp	r1, ip
 8006ea6:	d30a      	bcc.n	8006ebe <__exponent+0x66>
 8006ea8:	f10d 0209 	add.w	r2, sp, #9
 8006eac:	eba2 020e 	sub.w	r2, r2, lr
 8006eb0:	4565      	cmp	r5, ip
 8006eb2:	bf88      	it	hi
 8006eb4:	2200      	movhi	r2, #0
 8006eb6:	4413      	add	r3, r2
 8006eb8:	1a18      	subs	r0, r3, r0
 8006eba:	b003      	add	sp, #12
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ec2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ec6:	e7ed      	b.n	8006ea4 <__exponent+0x4c>
 8006ec8:	2330      	movs	r3, #48	; 0x30
 8006eca:	3130      	adds	r1, #48	; 0x30
 8006ecc:	7083      	strb	r3, [r0, #2]
 8006ece:	70c1      	strb	r1, [r0, #3]
 8006ed0:	1d03      	adds	r3, r0, #4
 8006ed2:	e7f1      	b.n	8006eb8 <__exponent+0x60>

08006ed4 <_printf_float>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	ed2d 8b02 	vpush	{d8}
 8006edc:	b08d      	sub	sp, #52	; 0x34
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	461f      	mov	r7, r3
 8006ee8:	4605      	mov	r5, r0
 8006eea:	f001 fa69 	bl	80083c0 <_localeconv_r>
 8006eee:	f8d0 a000 	ldr.w	sl, [r0]
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	f7f9 f974 	bl	80001e0 <strlen>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	930a      	str	r3, [sp, #40]	; 0x28
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	f8d8 3000 	ldr.w	r3, [r8]
 8006f04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f08:	3307      	adds	r3, #7
 8006f0a:	f023 0307 	bic.w	r3, r3, #7
 8006f0e:	f103 0208 	add.w	r2, r3, #8
 8006f12:	f8c8 2000 	str.w	r2, [r8]
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f26:	9307      	str	r3, [sp, #28]
 8006f28:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f2c:	ee08 0a10 	vmov	s16, r0
 8006f30:	4b9f      	ldr	r3, [pc, #636]	; (80071b0 <_printf_float+0x2dc>)
 8006f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	f7f9 fdff 	bl	8000b3c <__aeabi_dcmpun>
 8006f3e:	bb88      	cbnz	r0, 8006fa4 <_printf_float+0xd0>
 8006f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f44:	4b9a      	ldr	r3, [pc, #616]	; (80071b0 <_printf_float+0x2dc>)
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	f7f9 fdd9 	bl	8000b00 <__aeabi_dcmple>
 8006f4e:	bb48      	cbnz	r0, 8006fa4 <_printf_float+0xd0>
 8006f50:	2200      	movs	r2, #0
 8006f52:	2300      	movs	r3, #0
 8006f54:	4640      	mov	r0, r8
 8006f56:	4649      	mov	r1, r9
 8006f58:	f7f9 fdc8 	bl	8000aec <__aeabi_dcmplt>
 8006f5c:	b110      	cbz	r0, 8006f64 <_printf_float+0x90>
 8006f5e:	232d      	movs	r3, #45	; 0x2d
 8006f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f64:	4b93      	ldr	r3, [pc, #588]	; (80071b4 <_printf_float+0x2e0>)
 8006f66:	4894      	ldr	r0, [pc, #592]	; (80071b8 <_printf_float+0x2e4>)
 8006f68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f6c:	bf94      	ite	ls
 8006f6e:	4698      	movls	r8, r3
 8006f70:	4680      	movhi	r8, r0
 8006f72:	2303      	movs	r3, #3
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	9b05      	ldr	r3, [sp, #20]
 8006f78:	f023 0204 	bic.w	r2, r3, #4
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	f04f 0900 	mov.w	r9, #0
 8006f82:	9700      	str	r7, [sp, #0]
 8006f84:	4633      	mov	r3, r6
 8006f86:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f000 f9d8 	bl	8007340 <_printf_common>
 8006f90:	3001      	adds	r0, #1
 8006f92:	f040 8090 	bne.w	80070b6 <_printf_float+0x1e2>
 8006f96:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9a:	b00d      	add	sp, #52	; 0x34
 8006f9c:	ecbd 8b02 	vpop	{d8}
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4649      	mov	r1, r9
 8006fac:	f7f9 fdc6 	bl	8000b3c <__aeabi_dcmpun>
 8006fb0:	b140      	cbz	r0, 8006fc4 <_printf_float+0xf0>
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfbc      	itt	lt
 8006fb8:	232d      	movlt	r3, #45	; 0x2d
 8006fba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fbe:	487f      	ldr	r0, [pc, #508]	; (80071bc <_printf_float+0x2e8>)
 8006fc0:	4b7f      	ldr	r3, [pc, #508]	; (80071c0 <_printf_float+0x2ec>)
 8006fc2:	e7d1      	b.n	8006f68 <_printf_float+0x94>
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fca:	9206      	str	r2, [sp, #24]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	d13f      	bne.n	8007050 <_printf_float+0x17c>
 8006fd0:	2306      	movs	r3, #6
 8006fd2:	6063      	str	r3, [r4, #4]
 8006fd4:	9b05      	ldr	r3, [sp, #20]
 8006fd6:	6861      	ldr	r1, [r4, #4]
 8006fd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	ab0a      	add	r3, sp, #40	; 0x28
 8006fe2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fe6:	ab09      	add	r3, sp, #36	; 0x24
 8006fe8:	ec49 8b10 	vmov	d0, r8, r9
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	6022      	str	r2, [r4, #0]
 8006ff0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f7ff fecd 	bl	8006d94 <__cvt>
 8006ffa:	9b06      	ldr	r3, [sp, #24]
 8006ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ffe:	2b47      	cmp	r3, #71	; 0x47
 8007000:	4680      	mov	r8, r0
 8007002:	d108      	bne.n	8007016 <_printf_float+0x142>
 8007004:	1cc8      	adds	r0, r1, #3
 8007006:	db02      	blt.n	800700e <_printf_float+0x13a>
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	4299      	cmp	r1, r3
 800700c:	dd41      	ble.n	8007092 <_printf_float+0x1be>
 800700e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007012:	fa5f fb8b 	uxtb.w	fp, fp
 8007016:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800701a:	d820      	bhi.n	800705e <_printf_float+0x18a>
 800701c:	3901      	subs	r1, #1
 800701e:	465a      	mov	r2, fp
 8007020:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007024:	9109      	str	r1, [sp, #36]	; 0x24
 8007026:	f7ff ff17 	bl	8006e58 <__exponent>
 800702a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800702c:	1813      	adds	r3, r2, r0
 800702e:	2a01      	cmp	r2, #1
 8007030:	4681      	mov	r9, r0
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	dc02      	bgt.n	800703c <_printf_float+0x168>
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	07d2      	lsls	r2, r2, #31
 800703a:	d501      	bpl.n	8007040 <_printf_float+0x16c>
 800703c:	3301      	adds	r3, #1
 800703e:	6123      	str	r3, [r4, #16]
 8007040:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007044:	2b00      	cmp	r3, #0
 8007046:	d09c      	beq.n	8006f82 <_printf_float+0xae>
 8007048:	232d      	movs	r3, #45	; 0x2d
 800704a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800704e:	e798      	b.n	8006f82 <_printf_float+0xae>
 8007050:	9a06      	ldr	r2, [sp, #24]
 8007052:	2a47      	cmp	r2, #71	; 0x47
 8007054:	d1be      	bne.n	8006fd4 <_printf_float+0x100>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1bc      	bne.n	8006fd4 <_printf_float+0x100>
 800705a:	2301      	movs	r3, #1
 800705c:	e7b9      	b.n	8006fd2 <_printf_float+0xfe>
 800705e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007062:	d118      	bne.n	8007096 <_printf_float+0x1c2>
 8007064:	2900      	cmp	r1, #0
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	dd0b      	ble.n	8007082 <_printf_float+0x1ae>
 800706a:	6121      	str	r1, [r4, #16]
 800706c:	b913      	cbnz	r3, 8007074 <_printf_float+0x1a0>
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	07d0      	lsls	r0, r2, #31
 8007072:	d502      	bpl.n	800707a <_printf_float+0x1a6>
 8007074:	3301      	adds	r3, #1
 8007076:	440b      	add	r3, r1
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	65a1      	str	r1, [r4, #88]	; 0x58
 800707c:	f04f 0900 	mov.w	r9, #0
 8007080:	e7de      	b.n	8007040 <_printf_float+0x16c>
 8007082:	b913      	cbnz	r3, 800708a <_printf_float+0x1b6>
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	07d2      	lsls	r2, r2, #31
 8007088:	d501      	bpl.n	800708e <_printf_float+0x1ba>
 800708a:	3302      	adds	r3, #2
 800708c:	e7f4      	b.n	8007078 <_printf_float+0x1a4>
 800708e:	2301      	movs	r3, #1
 8007090:	e7f2      	b.n	8007078 <_printf_float+0x1a4>
 8007092:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007098:	4299      	cmp	r1, r3
 800709a:	db05      	blt.n	80070a8 <_printf_float+0x1d4>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	6121      	str	r1, [r4, #16]
 80070a0:	07d8      	lsls	r0, r3, #31
 80070a2:	d5ea      	bpl.n	800707a <_printf_float+0x1a6>
 80070a4:	1c4b      	adds	r3, r1, #1
 80070a6:	e7e7      	b.n	8007078 <_printf_float+0x1a4>
 80070a8:	2900      	cmp	r1, #0
 80070aa:	bfd4      	ite	le
 80070ac:	f1c1 0202 	rsble	r2, r1, #2
 80070b0:	2201      	movgt	r2, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	e7e0      	b.n	8007078 <_printf_float+0x1a4>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	055a      	lsls	r2, r3, #21
 80070ba:	d407      	bmi.n	80070cc <_printf_float+0x1f8>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	4642      	mov	r2, r8
 80070c0:	4631      	mov	r1, r6
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	d12c      	bne.n	8007124 <_printf_float+0x250>
 80070ca:	e764      	b.n	8006f96 <_printf_float+0xc2>
 80070cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070d0:	f240 80e0 	bls.w	8007294 <_printf_float+0x3c0>
 80070d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	f7f9 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d034      	beq.n	800714e <_printf_float+0x27a>
 80070e4:	4a37      	ldr	r2, [pc, #220]	; (80071c4 <_printf_float+0x2f0>)
 80070e6:	2301      	movs	r3, #1
 80070e8:	4631      	mov	r1, r6
 80070ea:	4628      	mov	r0, r5
 80070ec:	47b8      	blx	r7
 80070ee:	3001      	adds	r0, #1
 80070f0:	f43f af51 	beq.w	8006f96 <_printf_float+0xc2>
 80070f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f8:	429a      	cmp	r2, r3
 80070fa:	db02      	blt.n	8007102 <_printf_float+0x22e>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	07d8      	lsls	r0, r3, #31
 8007100:	d510      	bpl.n	8007124 <_printf_float+0x250>
 8007102:	ee18 3a10 	vmov	r3, s16
 8007106:	4652      	mov	r2, sl
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f af41 	beq.w	8006f96 <_printf_float+0xc2>
 8007114:	f04f 0800 	mov.w	r8, #0
 8007118:	f104 091a 	add.w	r9, r4, #26
 800711c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711e:	3b01      	subs	r3, #1
 8007120:	4543      	cmp	r3, r8
 8007122:	dc09      	bgt.n	8007138 <_printf_float+0x264>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	079b      	lsls	r3, r3, #30
 8007128:	f100 8105 	bmi.w	8007336 <_printf_float+0x462>
 800712c:	68e0      	ldr	r0, [r4, #12]
 800712e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007130:	4298      	cmp	r0, r3
 8007132:	bfb8      	it	lt
 8007134:	4618      	movlt	r0, r3
 8007136:	e730      	b.n	8006f9a <_printf_float+0xc6>
 8007138:	2301      	movs	r3, #1
 800713a:	464a      	mov	r2, r9
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	f43f af27 	beq.w	8006f96 <_printf_float+0xc2>
 8007148:	f108 0801 	add.w	r8, r8, #1
 800714c:	e7e6      	b.n	800711c <_printf_float+0x248>
 800714e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	dc39      	bgt.n	80071c8 <_printf_float+0x2f4>
 8007154:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <_printf_float+0x2f0>)
 8007156:	2301      	movs	r3, #1
 8007158:	4631      	mov	r1, r6
 800715a:	4628      	mov	r0, r5
 800715c:	47b8      	blx	r7
 800715e:	3001      	adds	r0, #1
 8007160:	f43f af19 	beq.w	8006f96 <_printf_float+0xc2>
 8007164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007168:	4313      	orrs	r3, r2
 800716a:	d102      	bne.n	8007172 <_printf_float+0x29e>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	07d9      	lsls	r1, r3, #31
 8007170:	d5d8      	bpl.n	8007124 <_printf_float+0x250>
 8007172:	ee18 3a10 	vmov	r3, s16
 8007176:	4652      	mov	r2, sl
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f af09 	beq.w	8006f96 <_printf_float+0xc2>
 8007184:	f04f 0900 	mov.w	r9, #0
 8007188:	f104 0a1a 	add.w	sl, r4, #26
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	425b      	negs	r3, r3
 8007190:	454b      	cmp	r3, r9
 8007192:	dc01      	bgt.n	8007198 <_printf_float+0x2c4>
 8007194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007196:	e792      	b.n	80070be <_printf_float+0x1ea>
 8007198:	2301      	movs	r3, #1
 800719a:	4652      	mov	r2, sl
 800719c:	4631      	mov	r1, r6
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	f43f aef7 	beq.w	8006f96 <_printf_float+0xc2>
 80071a8:	f109 0901 	add.w	r9, r9, #1
 80071ac:	e7ee      	b.n	800718c <_printf_float+0x2b8>
 80071ae:	bf00      	nop
 80071b0:	7fefffff 	.word	0x7fefffff
 80071b4:	08009bf0 	.word	0x08009bf0
 80071b8:	08009bf4 	.word	0x08009bf4
 80071bc:	08009bfc 	.word	0x08009bfc
 80071c0:	08009bf8 	.word	0x08009bf8
 80071c4:	08009c00 	.word	0x08009c00
 80071c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071cc:	429a      	cmp	r2, r3
 80071ce:	bfa8      	it	ge
 80071d0:	461a      	movge	r2, r3
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	4691      	mov	r9, r2
 80071d6:	dc37      	bgt.n	8007248 <_printf_float+0x374>
 80071d8:	f04f 0b00 	mov.w	fp, #0
 80071dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e0:	f104 021a 	add.w	r2, r4, #26
 80071e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	eba3 0309 	sub.w	r3, r3, r9
 80071ec:	455b      	cmp	r3, fp
 80071ee:	dc33      	bgt.n	8007258 <_printf_float+0x384>
 80071f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f4:	429a      	cmp	r2, r3
 80071f6:	db3b      	blt.n	8007270 <_printf_float+0x39c>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	07da      	lsls	r2, r3, #31
 80071fc:	d438      	bmi.n	8007270 <_printf_float+0x39c>
 80071fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007200:	9b05      	ldr	r3, [sp, #20]
 8007202:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	eba2 0901 	sub.w	r9, r2, r1
 800720a:	4599      	cmp	r9, r3
 800720c:	bfa8      	it	ge
 800720e:	4699      	movge	r9, r3
 8007210:	f1b9 0f00 	cmp.w	r9, #0
 8007214:	dc35      	bgt.n	8007282 <_printf_float+0x3ae>
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800721e:	f104 0a1a 	add.w	sl, r4, #26
 8007222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	eba3 0309 	sub.w	r3, r3, r9
 800722c:	4543      	cmp	r3, r8
 800722e:	f77f af79 	ble.w	8007124 <_printf_float+0x250>
 8007232:	2301      	movs	r3, #1
 8007234:	4652      	mov	r2, sl
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	f43f aeaa 	beq.w	8006f96 <_printf_float+0xc2>
 8007242:	f108 0801 	add.w	r8, r8, #1
 8007246:	e7ec      	b.n	8007222 <_printf_float+0x34e>
 8007248:	4613      	mov	r3, r2
 800724a:	4631      	mov	r1, r6
 800724c:	4642      	mov	r2, r8
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	d1c0      	bne.n	80071d8 <_printf_float+0x304>
 8007256:	e69e      	b.n	8006f96 <_printf_float+0xc2>
 8007258:	2301      	movs	r3, #1
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	9205      	str	r2, [sp, #20]
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f ae97 	beq.w	8006f96 <_printf_float+0xc2>
 8007268:	9a05      	ldr	r2, [sp, #20]
 800726a:	f10b 0b01 	add.w	fp, fp, #1
 800726e:	e7b9      	b.n	80071e4 <_printf_float+0x310>
 8007270:	ee18 3a10 	vmov	r3, s16
 8007274:	4652      	mov	r2, sl
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	d1be      	bne.n	80071fe <_printf_float+0x32a>
 8007280:	e689      	b.n	8006f96 <_printf_float+0xc2>
 8007282:	9a05      	ldr	r2, [sp, #20]
 8007284:	464b      	mov	r3, r9
 8007286:	4442      	add	r2, r8
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	d1c1      	bne.n	8007216 <_printf_float+0x342>
 8007292:	e680      	b.n	8006f96 <_printf_float+0xc2>
 8007294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007296:	2a01      	cmp	r2, #1
 8007298:	dc01      	bgt.n	800729e <_printf_float+0x3ca>
 800729a:	07db      	lsls	r3, r3, #31
 800729c:	d538      	bpl.n	8007310 <_printf_float+0x43c>
 800729e:	2301      	movs	r3, #1
 80072a0:	4642      	mov	r2, r8
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f ae74 	beq.w	8006f96 <_printf_float+0xc2>
 80072ae:	ee18 3a10 	vmov	r3, s16
 80072b2:	4652      	mov	r2, sl
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f ae6b 	beq.w	8006f96 <_printf_float+0xc2>
 80072c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072c4:	2200      	movs	r2, #0
 80072c6:	2300      	movs	r3, #0
 80072c8:	f7f9 fc06 	bl	8000ad8 <__aeabi_dcmpeq>
 80072cc:	b9d8      	cbnz	r0, 8007306 <_printf_float+0x432>
 80072ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d0:	f108 0201 	add.w	r2, r8, #1
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4631      	mov	r1, r6
 80072d8:	4628      	mov	r0, r5
 80072da:	47b8      	blx	r7
 80072dc:	3001      	adds	r0, #1
 80072de:	d10e      	bne.n	80072fe <_printf_float+0x42a>
 80072e0:	e659      	b.n	8006f96 <_printf_float+0xc2>
 80072e2:	2301      	movs	r3, #1
 80072e4:	4652      	mov	r2, sl
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	f43f ae52 	beq.w	8006f96 <_printf_float+0xc2>
 80072f2:	f108 0801 	add.w	r8, r8, #1
 80072f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	4543      	cmp	r3, r8
 80072fc:	dcf1      	bgt.n	80072e2 <_printf_float+0x40e>
 80072fe:	464b      	mov	r3, r9
 8007300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007304:	e6dc      	b.n	80070c0 <_printf_float+0x1ec>
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	f104 0a1a 	add.w	sl, r4, #26
 800730e:	e7f2      	b.n	80072f6 <_printf_float+0x422>
 8007310:	2301      	movs	r3, #1
 8007312:	4642      	mov	r2, r8
 8007314:	e7df      	b.n	80072d6 <_printf_float+0x402>
 8007316:	2301      	movs	r3, #1
 8007318:	464a      	mov	r2, r9
 800731a:	4631      	mov	r1, r6
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	f43f ae38 	beq.w	8006f96 <_printf_float+0xc2>
 8007326:	f108 0801 	add.w	r8, r8, #1
 800732a:	68e3      	ldr	r3, [r4, #12]
 800732c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800732e:	1a5b      	subs	r3, r3, r1
 8007330:	4543      	cmp	r3, r8
 8007332:	dcf0      	bgt.n	8007316 <_printf_float+0x442>
 8007334:	e6fa      	b.n	800712c <_printf_float+0x258>
 8007336:	f04f 0800 	mov.w	r8, #0
 800733a:	f104 0919 	add.w	r9, r4, #25
 800733e:	e7f4      	b.n	800732a <_printf_float+0x456>

08007340 <_printf_common>:
 8007340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	4616      	mov	r6, r2
 8007346:	4699      	mov	r9, r3
 8007348:	688a      	ldr	r2, [r1, #8]
 800734a:	690b      	ldr	r3, [r1, #16]
 800734c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007350:	4293      	cmp	r3, r2
 8007352:	bfb8      	it	lt
 8007354:	4613      	movlt	r3, r2
 8007356:	6033      	str	r3, [r6, #0]
 8007358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800735c:	4607      	mov	r7, r0
 800735e:	460c      	mov	r4, r1
 8007360:	b10a      	cbz	r2, 8007366 <_printf_common+0x26>
 8007362:	3301      	adds	r3, #1
 8007364:	6033      	str	r3, [r6, #0]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	0699      	lsls	r1, r3, #26
 800736a:	bf42      	ittt	mi
 800736c:	6833      	ldrmi	r3, [r6, #0]
 800736e:	3302      	addmi	r3, #2
 8007370:	6033      	strmi	r3, [r6, #0]
 8007372:	6825      	ldr	r5, [r4, #0]
 8007374:	f015 0506 	ands.w	r5, r5, #6
 8007378:	d106      	bne.n	8007388 <_printf_common+0x48>
 800737a:	f104 0a19 	add.w	sl, r4, #25
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	6832      	ldr	r2, [r6, #0]
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	42ab      	cmp	r3, r5
 8007386:	dc26      	bgt.n	80073d6 <_printf_common+0x96>
 8007388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800738c:	1e13      	subs	r3, r2, #0
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	bf18      	it	ne
 8007392:	2301      	movne	r3, #1
 8007394:	0692      	lsls	r2, r2, #26
 8007396:	d42b      	bmi.n	80073f0 <_printf_common+0xb0>
 8007398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800739c:	4649      	mov	r1, r9
 800739e:	4638      	mov	r0, r7
 80073a0:	47c0      	blx	r8
 80073a2:	3001      	adds	r0, #1
 80073a4:	d01e      	beq.n	80073e4 <_printf_common+0xa4>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	68e5      	ldr	r5, [r4, #12]
 80073aa:	6832      	ldr	r2, [r6, #0]
 80073ac:	f003 0306 	and.w	r3, r3, #6
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	bf08      	it	eq
 80073b4:	1aad      	subeq	r5, r5, r2
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	6922      	ldr	r2, [r4, #16]
 80073ba:	bf0c      	ite	eq
 80073bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c0:	2500      	movne	r5, #0
 80073c2:	4293      	cmp	r3, r2
 80073c4:	bfc4      	itt	gt
 80073c6:	1a9b      	subgt	r3, r3, r2
 80073c8:	18ed      	addgt	r5, r5, r3
 80073ca:	2600      	movs	r6, #0
 80073cc:	341a      	adds	r4, #26
 80073ce:	42b5      	cmp	r5, r6
 80073d0:	d11a      	bne.n	8007408 <_printf_common+0xc8>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e008      	b.n	80073e8 <_printf_common+0xa8>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4652      	mov	r2, sl
 80073da:	4649      	mov	r1, r9
 80073dc:	4638      	mov	r0, r7
 80073de:	47c0      	blx	r8
 80073e0:	3001      	adds	r0, #1
 80073e2:	d103      	bne.n	80073ec <_printf_common+0xac>
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ec:	3501      	adds	r5, #1
 80073ee:	e7c6      	b.n	800737e <_printf_common+0x3e>
 80073f0:	18e1      	adds	r1, r4, r3
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	2030      	movs	r0, #48	; 0x30
 80073f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073fa:	4422      	add	r2, r4
 80073fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007404:	3302      	adds	r3, #2
 8007406:	e7c7      	b.n	8007398 <_printf_common+0x58>
 8007408:	2301      	movs	r3, #1
 800740a:	4622      	mov	r2, r4
 800740c:	4649      	mov	r1, r9
 800740e:	4638      	mov	r0, r7
 8007410:	47c0      	blx	r8
 8007412:	3001      	adds	r0, #1
 8007414:	d0e6      	beq.n	80073e4 <_printf_common+0xa4>
 8007416:	3601      	adds	r6, #1
 8007418:	e7d9      	b.n	80073ce <_printf_common+0x8e>
	...

0800741c <_printf_i>:
 800741c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	4691      	mov	r9, r2
 8007424:	7e27      	ldrb	r7, [r4, #24]
 8007426:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007428:	2f78      	cmp	r7, #120	; 0x78
 800742a:	4680      	mov	r8, r0
 800742c:	469a      	mov	sl, r3
 800742e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007432:	d807      	bhi.n	8007444 <_printf_i+0x28>
 8007434:	2f62      	cmp	r7, #98	; 0x62
 8007436:	d80a      	bhi.n	800744e <_printf_i+0x32>
 8007438:	2f00      	cmp	r7, #0
 800743a:	f000 80d8 	beq.w	80075ee <_printf_i+0x1d2>
 800743e:	2f58      	cmp	r7, #88	; 0x58
 8007440:	f000 80a3 	beq.w	800758a <_printf_i+0x16e>
 8007444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800744c:	e03a      	b.n	80074c4 <_printf_i+0xa8>
 800744e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007452:	2b15      	cmp	r3, #21
 8007454:	d8f6      	bhi.n	8007444 <_printf_i+0x28>
 8007456:	a001      	add	r0, pc, #4	; (adr r0, 800745c <_printf_i+0x40>)
 8007458:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800745c:	080074b5 	.word	0x080074b5
 8007460:	080074c9 	.word	0x080074c9
 8007464:	08007445 	.word	0x08007445
 8007468:	08007445 	.word	0x08007445
 800746c:	08007445 	.word	0x08007445
 8007470:	08007445 	.word	0x08007445
 8007474:	080074c9 	.word	0x080074c9
 8007478:	08007445 	.word	0x08007445
 800747c:	08007445 	.word	0x08007445
 8007480:	08007445 	.word	0x08007445
 8007484:	08007445 	.word	0x08007445
 8007488:	080075d5 	.word	0x080075d5
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080075b7 	.word	0x080075b7
 8007494:	08007445 	.word	0x08007445
 8007498:	08007445 	.word	0x08007445
 800749c:	080075f7 	.word	0x080075f7
 80074a0:	08007445 	.word	0x08007445
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	08007445 	.word	0x08007445
 80074ac:	08007445 	.word	0x08007445
 80074b0:	080075bf 	.word	0x080075bf
 80074b4:	680b      	ldr	r3, [r1, #0]
 80074b6:	1d1a      	adds	r2, r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	600a      	str	r2, [r1, #0]
 80074bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0a3      	b.n	8007610 <_printf_i+0x1f4>
 80074c8:	6825      	ldr	r5, [r4, #0]
 80074ca:	6808      	ldr	r0, [r1, #0]
 80074cc:	062e      	lsls	r6, r5, #24
 80074ce:	f100 0304 	add.w	r3, r0, #4
 80074d2:	d50a      	bpl.n	80074ea <_printf_i+0xce>
 80074d4:	6805      	ldr	r5, [r0, #0]
 80074d6:	600b      	str	r3, [r1, #0]
 80074d8:	2d00      	cmp	r5, #0
 80074da:	da03      	bge.n	80074e4 <_printf_i+0xc8>
 80074dc:	232d      	movs	r3, #45	; 0x2d
 80074de:	426d      	negs	r5, r5
 80074e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e4:	485e      	ldr	r0, [pc, #376]	; (8007660 <_printf_i+0x244>)
 80074e6:	230a      	movs	r3, #10
 80074e8:	e019      	b.n	800751e <_printf_i+0x102>
 80074ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074ee:	6805      	ldr	r5, [r0, #0]
 80074f0:	600b      	str	r3, [r1, #0]
 80074f2:	bf18      	it	ne
 80074f4:	b22d      	sxthne	r5, r5
 80074f6:	e7ef      	b.n	80074d8 <_printf_i+0xbc>
 80074f8:	680b      	ldr	r3, [r1, #0]
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	1d18      	adds	r0, r3, #4
 80074fe:	6008      	str	r0, [r1, #0]
 8007500:	0628      	lsls	r0, r5, #24
 8007502:	d501      	bpl.n	8007508 <_printf_i+0xec>
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	e002      	b.n	800750e <_printf_i+0xf2>
 8007508:	0669      	lsls	r1, r5, #25
 800750a:	d5fb      	bpl.n	8007504 <_printf_i+0xe8>
 800750c:	881d      	ldrh	r5, [r3, #0]
 800750e:	4854      	ldr	r0, [pc, #336]	; (8007660 <_printf_i+0x244>)
 8007510:	2f6f      	cmp	r7, #111	; 0x6f
 8007512:	bf0c      	ite	eq
 8007514:	2308      	moveq	r3, #8
 8007516:	230a      	movne	r3, #10
 8007518:	2100      	movs	r1, #0
 800751a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800751e:	6866      	ldr	r6, [r4, #4]
 8007520:	60a6      	str	r6, [r4, #8]
 8007522:	2e00      	cmp	r6, #0
 8007524:	bfa2      	ittt	ge
 8007526:	6821      	ldrge	r1, [r4, #0]
 8007528:	f021 0104 	bicge.w	r1, r1, #4
 800752c:	6021      	strge	r1, [r4, #0]
 800752e:	b90d      	cbnz	r5, 8007534 <_printf_i+0x118>
 8007530:	2e00      	cmp	r6, #0
 8007532:	d04d      	beq.n	80075d0 <_printf_i+0x1b4>
 8007534:	4616      	mov	r6, r2
 8007536:	fbb5 f1f3 	udiv	r1, r5, r3
 800753a:	fb03 5711 	mls	r7, r3, r1, r5
 800753e:	5dc7      	ldrb	r7, [r0, r7]
 8007540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007544:	462f      	mov	r7, r5
 8007546:	42bb      	cmp	r3, r7
 8007548:	460d      	mov	r5, r1
 800754a:	d9f4      	bls.n	8007536 <_printf_i+0x11a>
 800754c:	2b08      	cmp	r3, #8
 800754e:	d10b      	bne.n	8007568 <_printf_i+0x14c>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	07df      	lsls	r7, r3, #31
 8007554:	d508      	bpl.n	8007568 <_printf_i+0x14c>
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	6861      	ldr	r1, [r4, #4]
 800755a:	4299      	cmp	r1, r3
 800755c:	bfde      	ittt	le
 800755e:	2330      	movle	r3, #48	; 0x30
 8007560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007564:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007568:	1b92      	subs	r2, r2, r6
 800756a:	6122      	str	r2, [r4, #16]
 800756c:	f8cd a000 	str.w	sl, [sp]
 8007570:	464b      	mov	r3, r9
 8007572:	aa03      	add	r2, sp, #12
 8007574:	4621      	mov	r1, r4
 8007576:	4640      	mov	r0, r8
 8007578:	f7ff fee2 	bl	8007340 <_printf_common>
 800757c:	3001      	adds	r0, #1
 800757e:	d14c      	bne.n	800761a <_printf_i+0x1fe>
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	b004      	add	sp, #16
 8007586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758a:	4835      	ldr	r0, [pc, #212]	; (8007660 <_printf_i+0x244>)
 800758c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	680e      	ldr	r6, [r1, #0]
 8007594:	061f      	lsls	r7, r3, #24
 8007596:	f856 5b04 	ldr.w	r5, [r6], #4
 800759a:	600e      	str	r6, [r1, #0]
 800759c:	d514      	bpl.n	80075c8 <_printf_i+0x1ac>
 800759e:	07d9      	lsls	r1, r3, #31
 80075a0:	bf44      	itt	mi
 80075a2:	f043 0320 	orrmi.w	r3, r3, #32
 80075a6:	6023      	strmi	r3, [r4, #0]
 80075a8:	b91d      	cbnz	r5, 80075b2 <_printf_i+0x196>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	f023 0320 	bic.w	r3, r3, #32
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	2310      	movs	r3, #16
 80075b4:	e7b0      	b.n	8007518 <_printf_i+0xfc>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	f043 0320 	orr.w	r3, r3, #32
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	2378      	movs	r3, #120	; 0x78
 80075c0:	4828      	ldr	r0, [pc, #160]	; (8007664 <_printf_i+0x248>)
 80075c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075c6:	e7e3      	b.n	8007590 <_printf_i+0x174>
 80075c8:	065e      	lsls	r6, r3, #25
 80075ca:	bf48      	it	mi
 80075cc:	b2ad      	uxthmi	r5, r5
 80075ce:	e7e6      	b.n	800759e <_printf_i+0x182>
 80075d0:	4616      	mov	r6, r2
 80075d2:	e7bb      	b.n	800754c <_printf_i+0x130>
 80075d4:	680b      	ldr	r3, [r1, #0]
 80075d6:	6826      	ldr	r6, [r4, #0]
 80075d8:	6960      	ldr	r0, [r4, #20]
 80075da:	1d1d      	adds	r5, r3, #4
 80075dc:	600d      	str	r5, [r1, #0]
 80075de:	0635      	lsls	r5, r6, #24
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	d501      	bpl.n	80075e8 <_printf_i+0x1cc>
 80075e4:	6018      	str	r0, [r3, #0]
 80075e6:	e002      	b.n	80075ee <_printf_i+0x1d2>
 80075e8:	0671      	lsls	r1, r6, #25
 80075ea:	d5fb      	bpl.n	80075e4 <_printf_i+0x1c8>
 80075ec:	8018      	strh	r0, [r3, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	4616      	mov	r6, r2
 80075f4:	e7ba      	b.n	800756c <_printf_i+0x150>
 80075f6:	680b      	ldr	r3, [r1, #0]
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	600a      	str	r2, [r1, #0]
 80075fc:	681e      	ldr	r6, [r3, #0]
 80075fe:	6862      	ldr	r2, [r4, #4]
 8007600:	2100      	movs	r1, #0
 8007602:	4630      	mov	r0, r6
 8007604:	f7f8 fdf4 	bl	80001f0 <memchr>
 8007608:	b108      	cbz	r0, 800760e <_printf_i+0x1f2>
 800760a:	1b80      	subs	r0, r0, r6
 800760c:	6060      	str	r0, [r4, #4]
 800760e:	6863      	ldr	r3, [r4, #4]
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	2300      	movs	r3, #0
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007618:	e7a8      	b.n	800756c <_printf_i+0x150>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	4632      	mov	r2, r6
 800761e:	4649      	mov	r1, r9
 8007620:	4640      	mov	r0, r8
 8007622:	47d0      	blx	sl
 8007624:	3001      	adds	r0, #1
 8007626:	d0ab      	beq.n	8007580 <_printf_i+0x164>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	079b      	lsls	r3, r3, #30
 800762c:	d413      	bmi.n	8007656 <_printf_i+0x23a>
 800762e:	68e0      	ldr	r0, [r4, #12]
 8007630:	9b03      	ldr	r3, [sp, #12]
 8007632:	4298      	cmp	r0, r3
 8007634:	bfb8      	it	lt
 8007636:	4618      	movlt	r0, r3
 8007638:	e7a4      	b.n	8007584 <_printf_i+0x168>
 800763a:	2301      	movs	r3, #1
 800763c:	4632      	mov	r2, r6
 800763e:	4649      	mov	r1, r9
 8007640:	4640      	mov	r0, r8
 8007642:	47d0      	blx	sl
 8007644:	3001      	adds	r0, #1
 8007646:	d09b      	beq.n	8007580 <_printf_i+0x164>
 8007648:	3501      	adds	r5, #1
 800764a:	68e3      	ldr	r3, [r4, #12]
 800764c:	9903      	ldr	r1, [sp, #12]
 800764e:	1a5b      	subs	r3, r3, r1
 8007650:	42ab      	cmp	r3, r5
 8007652:	dcf2      	bgt.n	800763a <_printf_i+0x21e>
 8007654:	e7eb      	b.n	800762e <_printf_i+0x212>
 8007656:	2500      	movs	r5, #0
 8007658:	f104 0619 	add.w	r6, r4, #25
 800765c:	e7f5      	b.n	800764a <_printf_i+0x22e>
 800765e:	bf00      	nop
 8007660:	08009c02 	.word	0x08009c02
 8007664:	08009c13 	.word	0x08009c13

08007668 <sniprintf>:
 8007668:	b40c      	push	{r2, r3}
 800766a:	b530      	push	{r4, r5, lr}
 800766c:	4b17      	ldr	r3, [pc, #92]	; (80076cc <sniprintf+0x64>)
 800766e:	1e0c      	subs	r4, r1, #0
 8007670:	681d      	ldr	r5, [r3, #0]
 8007672:	b09d      	sub	sp, #116	; 0x74
 8007674:	da08      	bge.n	8007688 <sniprintf+0x20>
 8007676:	238b      	movs	r3, #139	; 0x8b
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	b01d      	add	sp, #116	; 0x74
 8007680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007684:	b002      	add	sp, #8
 8007686:	4770      	bx	lr
 8007688:	f44f 7302 	mov.w	r3, #520	; 0x208
 800768c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007690:	bf14      	ite	ne
 8007692:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007696:	4623      	moveq	r3, r4
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076a0:	9002      	str	r0, [sp, #8]
 80076a2:	9006      	str	r0, [sp, #24]
 80076a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076aa:	ab21      	add	r3, sp, #132	; 0x84
 80076ac:	a902      	add	r1, sp, #8
 80076ae:	4628      	mov	r0, r5
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	f001 fb33 	bl	8008d1c <_svfiprintf_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	bfbc      	itt	lt
 80076ba:	238b      	movlt	r3, #139	; 0x8b
 80076bc:	602b      	strlt	r3, [r5, #0]
 80076be:	2c00      	cmp	r4, #0
 80076c0:	d0dd      	beq.n	800767e <sniprintf+0x16>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e7d9      	b.n	800767e <sniprintf+0x16>
 80076ca:	bf00      	nop
 80076cc:	20000278 	.word	0x20000278

080076d0 <quorem>:
 80076d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	6903      	ldr	r3, [r0, #16]
 80076d6:	690c      	ldr	r4, [r1, #16]
 80076d8:	42a3      	cmp	r3, r4
 80076da:	4607      	mov	r7, r0
 80076dc:	f2c0 8081 	blt.w	80077e2 <quorem+0x112>
 80076e0:	3c01      	subs	r4, #1
 80076e2:	f101 0814 	add.w	r8, r1, #20
 80076e6:	f100 0514 	add.w	r5, r0, #20
 80076ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076f8:	3301      	adds	r3, #1
 80076fa:	429a      	cmp	r2, r3
 80076fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007704:	fbb2 f6f3 	udiv	r6, r2, r3
 8007708:	d331      	bcc.n	800776e <quorem+0x9e>
 800770a:	f04f 0e00 	mov.w	lr, #0
 800770e:	4640      	mov	r0, r8
 8007710:	46ac      	mov	ip, r5
 8007712:	46f2      	mov	sl, lr
 8007714:	f850 2b04 	ldr.w	r2, [r0], #4
 8007718:	b293      	uxth	r3, r2
 800771a:	fb06 e303 	mla	r3, r6, r3, lr
 800771e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007722:	b29b      	uxth	r3, r3
 8007724:	ebaa 0303 	sub.w	r3, sl, r3
 8007728:	0c12      	lsrs	r2, r2, #16
 800772a:	f8dc a000 	ldr.w	sl, [ip]
 800772e:	fb06 e202 	mla	r2, r6, r2, lr
 8007732:	fa13 f38a 	uxtah	r3, r3, sl
 8007736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800773a:	fa1f fa82 	uxth.w	sl, r2
 800773e:	f8dc 2000 	ldr.w	r2, [ip]
 8007742:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007750:	4581      	cmp	r9, r0
 8007752:	f84c 3b04 	str.w	r3, [ip], #4
 8007756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800775a:	d2db      	bcs.n	8007714 <quorem+0x44>
 800775c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007760:	b92b      	cbnz	r3, 800776e <quorem+0x9e>
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	3b04      	subs	r3, #4
 8007766:	429d      	cmp	r5, r3
 8007768:	461a      	mov	r2, r3
 800776a:	d32e      	bcc.n	80077ca <quorem+0xfa>
 800776c:	613c      	str	r4, [r7, #16]
 800776e:	4638      	mov	r0, r7
 8007770:	f001 f8be 	bl	80088f0 <__mcmp>
 8007774:	2800      	cmp	r0, #0
 8007776:	db24      	blt.n	80077c2 <quorem+0xf2>
 8007778:	3601      	adds	r6, #1
 800777a:	4628      	mov	r0, r5
 800777c:	f04f 0c00 	mov.w	ip, #0
 8007780:	f858 2b04 	ldr.w	r2, [r8], #4
 8007784:	f8d0 e000 	ldr.w	lr, [r0]
 8007788:	b293      	uxth	r3, r2
 800778a:	ebac 0303 	sub.w	r3, ip, r3
 800778e:	0c12      	lsrs	r2, r2, #16
 8007790:	fa13 f38e 	uxtah	r3, r3, lr
 8007794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800779c:	b29b      	uxth	r3, r3
 800779e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a2:	45c1      	cmp	r9, r8
 80077a4:	f840 3b04 	str.w	r3, [r0], #4
 80077a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077ac:	d2e8      	bcs.n	8007780 <quorem+0xb0>
 80077ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b6:	b922      	cbnz	r2, 80077c2 <quorem+0xf2>
 80077b8:	3b04      	subs	r3, #4
 80077ba:	429d      	cmp	r5, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	d30a      	bcc.n	80077d6 <quorem+0x106>
 80077c0:	613c      	str	r4, [r7, #16]
 80077c2:	4630      	mov	r0, r6
 80077c4:	b003      	add	sp, #12
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d1cc      	bne.n	800776c <quorem+0x9c>
 80077d2:	3c01      	subs	r4, #1
 80077d4:	e7c7      	b.n	8007766 <quorem+0x96>
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	3b04      	subs	r3, #4
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d1f0      	bne.n	80077c0 <quorem+0xf0>
 80077de:	3c01      	subs	r4, #1
 80077e0:	e7eb      	b.n	80077ba <quorem+0xea>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e7ee      	b.n	80077c4 <quorem+0xf4>
	...

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ed2d 8b02 	vpush	{d8}
 80077f0:	ec57 6b10 	vmov	r6, r7, d0
 80077f4:	b095      	sub	sp, #84	; 0x54
 80077f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077fc:	9105      	str	r1, [sp, #20]
 80077fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007802:	4604      	mov	r4, r0
 8007804:	9209      	str	r2, [sp, #36]	; 0x24
 8007806:	930f      	str	r3, [sp, #60]	; 0x3c
 8007808:	b975      	cbnz	r5, 8007828 <_dtoa_r+0x40>
 800780a:	2010      	movs	r0, #16
 800780c:	f000 fddc 	bl	80083c8 <malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	6260      	str	r0, [r4, #36]	; 0x24
 8007814:	b920      	cbnz	r0, 8007820 <_dtoa_r+0x38>
 8007816:	4bb2      	ldr	r3, [pc, #712]	; (8007ae0 <_dtoa_r+0x2f8>)
 8007818:	21ea      	movs	r1, #234	; 0xea
 800781a:	48b2      	ldr	r0, [pc, #712]	; (8007ae4 <_dtoa_r+0x2fc>)
 800781c:	f001 fb8e 	bl	8008f3c <__assert_func>
 8007820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007824:	6005      	str	r5, [r0, #0]
 8007826:	60c5      	str	r5, [r0, #12]
 8007828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800782a:	6819      	ldr	r1, [r3, #0]
 800782c:	b151      	cbz	r1, 8007844 <_dtoa_r+0x5c>
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	604a      	str	r2, [r1, #4]
 8007832:	2301      	movs	r3, #1
 8007834:	4093      	lsls	r3, r2
 8007836:	608b      	str	r3, [r1, #8]
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fe1b 	bl	8008474 <_Bfree>
 800783e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	1e3b      	subs	r3, r7, #0
 8007846:	bfb9      	ittee	lt
 8007848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800784c:	9303      	strlt	r3, [sp, #12]
 800784e:	2300      	movge	r3, #0
 8007850:	f8c8 3000 	strge.w	r3, [r8]
 8007854:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007858:	4ba3      	ldr	r3, [pc, #652]	; (8007ae8 <_dtoa_r+0x300>)
 800785a:	bfbc      	itt	lt
 800785c:	2201      	movlt	r2, #1
 800785e:	f8c8 2000 	strlt.w	r2, [r8]
 8007862:	ea33 0309 	bics.w	r3, r3, r9
 8007866:	d11b      	bne.n	80078a0 <_dtoa_r+0xb8>
 8007868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800786a:	f242 730f 	movw	r3, #9999	; 0x270f
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007874:	4333      	orrs	r3, r6
 8007876:	f000 857a 	beq.w	800836e <_dtoa_r+0xb86>
 800787a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800787c:	b963      	cbnz	r3, 8007898 <_dtoa_r+0xb0>
 800787e:	4b9b      	ldr	r3, [pc, #620]	; (8007aec <_dtoa_r+0x304>)
 8007880:	e024      	b.n	80078cc <_dtoa_r+0xe4>
 8007882:	4b9b      	ldr	r3, [pc, #620]	; (8007af0 <_dtoa_r+0x308>)
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	9800      	ldr	r0, [sp, #0]
 800788e:	b015      	add	sp, #84	; 0x54
 8007890:	ecbd 8b02 	vpop	{d8}
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	4b94      	ldr	r3, [pc, #592]	; (8007aec <_dtoa_r+0x304>)
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	3303      	adds	r3, #3
 800789e:	e7f3      	b.n	8007888 <_dtoa_r+0xa0>
 80078a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	ec51 0b17 	vmov	r0, r1, d7
 80078aa:	2300      	movs	r3, #0
 80078ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80078b0:	f7f9 f912 	bl	8000ad8 <__aeabi_dcmpeq>
 80078b4:	4680      	mov	r8, r0
 80078b6:	b158      	cbz	r0, 80078d0 <_dtoa_r+0xe8>
 80078b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ba:	2301      	movs	r3, #1
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8551 	beq.w	8008368 <_dtoa_r+0xb80>
 80078c6:	488b      	ldr	r0, [pc, #556]	; (8007af4 <_dtoa_r+0x30c>)
 80078c8:	6018      	str	r0, [r3, #0]
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	e7dd      	b.n	800788c <_dtoa_r+0xa4>
 80078d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80078d4:	aa12      	add	r2, sp, #72	; 0x48
 80078d6:	a913      	add	r1, sp, #76	; 0x4c
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 f8ad 	bl	8008a38 <__d2b>
 80078de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078e2:	4683      	mov	fp, r0
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	d07c      	beq.n	80079e2 <_dtoa_r+0x1fa>
 80078e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80078ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80078f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80078fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80078fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007902:	4b7d      	ldr	r3, [pc, #500]	; (8007af8 <_dtoa_r+0x310>)
 8007904:	2200      	movs	r2, #0
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7f8 fcc5 	bl	8000298 <__aeabi_dsub>
 800790e:	a36e      	add	r3, pc, #440	; (adr r3, 8007ac8 <_dtoa_r+0x2e0>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fe78 	bl	8000608 <__aeabi_dmul>
 8007918:	a36d      	add	r3, pc, #436	; (adr r3, 8007ad0 <_dtoa_r+0x2e8>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fcbd 	bl	800029c <__adddf3>
 8007922:	4606      	mov	r6, r0
 8007924:	4628      	mov	r0, r5
 8007926:	460f      	mov	r7, r1
 8007928:	f7f8 fe04 	bl	8000534 <__aeabi_i2d>
 800792c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ad8 <_dtoa_r+0x2f0>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f8 fcad 	bl	800029c <__adddf3>
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	f7f9 f90f 	bl	8000b68 <__aeabi_d2iz>
 800794a:	2200      	movs	r2, #0
 800794c:	4682      	mov	sl, r0
 800794e:	2300      	movs	r3, #0
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f9 f8ca 	bl	8000aec <__aeabi_dcmplt>
 8007958:	b148      	cbz	r0, 800796e <_dtoa_r+0x186>
 800795a:	4650      	mov	r0, sl
 800795c:	f7f8 fdea 	bl	8000534 <__aeabi_i2d>
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	f7f9 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007968:	b908      	cbnz	r0, 800796e <_dtoa_r+0x186>
 800796a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800796e:	f1ba 0f16 	cmp.w	sl, #22
 8007972:	d854      	bhi.n	8007a1e <_dtoa_r+0x236>
 8007974:	4b61      	ldr	r3, [pc, #388]	; (8007afc <_dtoa_r+0x314>)
 8007976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007982:	f7f9 f8b3 	bl	8000aec <__aeabi_dcmplt>
 8007986:	2800      	cmp	r0, #0
 8007988:	d04b      	beq.n	8007a22 <_dtoa_r+0x23a>
 800798a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800798e:	2300      	movs	r3, #0
 8007990:	930e      	str	r3, [sp, #56]	; 0x38
 8007992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007994:	1b5d      	subs	r5, r3, r5
 8007996:	1e6b      	subs	r3, r5, #1
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	bf43      	ittte	mi
 800799c:	2300      	movmi	r3, #0
 800799e:	f1c5 0801 	rsbmi	r8, r5, #1
 80079a2:	9304      	strmi	r3, [sp, #16]
 80079a4:	f04f 0800 	movpl.w	r8, #0
 80079a8:	f1ba 0f00 	cmp.w	sl, #0
 80079ac:	db3b      	blt.n	8007a26 <_dtoa_r+0x23e>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80079b4:	4453      	add	r3, sl
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	2300      	movs	r3, #0
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d869      	bhi.n	8007a96 <_dtoa_r+0x2ae>
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	bfc4      	itt	gt
 80079c6:	3b04      	subgt	r3, #4
 80079c8:	9305      	strgt	r3, [sp, #20]
 80079ca:	9b05      	ldr	r3, [sp, #20]
 80079cc:	f1a3 0302 	sub.w	r3, r3, #2
 80079d0:	bfcc      	ite	gt
 80079d2:	2500      	movgt	r5, #0
 80079d4:	2501      	movle	r5, #1
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d869      	bhi.n	8007aae <_dtoa_r+0x2c6>
 80079da:	e8df f003 	tbb	[pc, r3]
 80079de:	4e2c      	.short	0x4e2c
 80079e0:	5a4c      	.short	0x5a4c
 80079e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80079e6:	441d      	add	r5, r3
 80079e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	bfc1      	itttt	gt
 80079f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80079f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80079fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a00:	bfda      	itte	le
 8007a02:	f1c3 0320 	rsble	r3, r3, #32
 8007a06:	fa06 f003 	lslle.w	r0, r6, r3
 8007a0a:	4318      	orrgt	r0, r3
 8007a0c:	f7f8 fd82 	bl	8000514 <__aeabi_ui2d>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4606      	mov	r6, r0
 8007a14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a18:	3d01      	subs	r5, #1
 8007a1a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a1c:	e771      	b.n	8007902 <_dtoa_r+0x11a>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e7b6      	b.n	8007990 <_dtoa_r+0x1a8>
 8007a22:	900e      	str	r0, [sp, #56]	; 0x38
 8007a24:	e7b5      	b.n	8007992 <_dtoa_r+0x1aa>
 8007a26:	f1ca 0300 	rsb	r3, sl, #0
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	eba8 080a 	sub.w	r8, r8, sl
 8007a32:	930d      	str	r3, [sp, #52]	; 0x34
 8007a34:	e7c2      	b.n	80079bc <_dtoa_r+0x1d4>
 8007a36:	2300      	movs	r3, #0
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc39      	bgt.n	8007ab4 <_dtoa_r+0x2cc>
 8007a40:	f04f 0901 	mov.w	r9, #1
 8007a44:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a48:	464b      	mov	r3, r9
 8007a4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a50:	2200      	movs	r2, #0
 8007a52:	6042      	str	r2, [r0, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	f102 0614 	add.w	r6, r2, #20
 8007a5a:	429e      	cmp	r6, r3
 8007a5c:	6841      	ldr	r1, [r0, #4]
 8007a5e:	d92f      	bls.n	8007ac0 <_dtoa_r+0x2d8>
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fcc7 	bl	80083f4 <_Balloc>
 8007a66:	9000      	str	r0, [sp, #0]
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d14b      	bne.n	8007b04 <_dtoa_r+0x31c>
 8007a6c:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <_dtoa_r+0x318>)
 8007a6e:	4602      	mov	r2, r0
 8007a70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a74:	e6d1      	b.n	800781a <_dtoa_r+0x32>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e7de      	b.n	8007a38 <_dtoa_r+0x250>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a80:	eb0a 0903 	add.w	r9, sl, r3
 8007a84:	f109 0301 	add.w	r3, r9, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	bfb8      	it	lt
 8007a8e:	2301      	movlt	r3, #1
 8007a90:	e7dd      	b.n	8007a4e <_dtoa_r+0x266>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7f2      	b.n	8007a7c <_dtoa_r+0x294>
 8007a96:	2501      	movs	r5, #1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9305      	str	r3, [sp, #20]
 8007a9c:	9508      	str	r5, [sp, #32]
 8007a9e:	f04f 39ff 	mov.w	r9, #4294967295
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa8:	2312      	movs	r3, #18
 8007aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007aac:	e7cf      	b.n	8007a4e <_dtoa_r+0x266>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	9308      	str	r3, [sp, #32]
 8007ab2:	e7f4      	b.n	8007a9e <_dtoa_r+0x2b6>
 8007ab4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007ab8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007abc:	464b      	mov	r3, r9
 8007abe:	e7c6      	b.n	8007a4e <_dtoa_r+0x266>
 8007ac0:	3101      	adds	r1, #1
 8007ac2:	6041      	str	r1, [r0, #4]
 8007ac4:	0052      	lsls	r2, r2, #1
 8007ac6:	e7c6      	b.n	8007a56 <_dtoa_r+0x26e>
 8007ac8:	636f4361 	.word	0x636f4361
 8007acc:	3fd287a7 	.word	0x3fd287a7
 8007ad0:	8b60c8b3 	.word	0x8b60c8b3
 8007ad4:	3fc68a28 	.word	0x3fc68a28
 8007ad8:	509f79fb 	.word	0x509f79fb
 8007adc:	3fd34413 	.word	0x3fd34413
 8007ae0:	08009c31 	.word	0x08009c31
 8007ae4:	08009c48 	.word	0x08009c48
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	08009c2d 	.word	0x08009c2d
 8007af0:	08009c24 	.word	0x08009c24
 8007af4:	08009c01 	.word	0x08009c01
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	08009d40 	.word	0x08009d40
 8007b00:	08009ca7 	.word	0x08009ca7
 8007b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b06:	9a00      	ldr	r2, [sp, #0]
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	2b0e      	cmp	r3, #14
 8007b0e:	f200 80ad 	bhi.w	8007c6c <_dtoa_r+0x484>
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	f000 80aa 	beq.w	8007c6c <_dtoa_r+0x484>
 8007b18:	f1ba 0f00 	cmp.w	sl, #0
 8007b1c:	dd36      	ble.n	8007b8c <_dtoa_r+0x3a4>
 8007b1e:	4ac3      	ldr	r2, [pc, #780]	; (8007e2c <_dtoa_r+0x644>)
 8007b20:	f00a 030f 	and.w	r3, sl, #15
 8007b24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b28:	ed93 7b00 	vldr	d7, [r3]
 8007b2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b34:	eeb0 8a47 	vmov.f32	s16, s14
 8007b38:	eef0 8a67 	vmov.f32	s17, s15
 8007b3c:	d016      	beq.n	8007b6c <_dtoa_r+0x384>
 8007b3e:	4bbc      	ldr	r3, [pc, #752]	; (8007e30 <_dtoa_r+0x648>)
 8007b40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b48:	f7f8 fe88 	bl	800085c <__aeabi_ddiv>
 8007b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b50:	f007 070f 	and.w	r7, r7, #15
 8007b54:	2503      	movs	r5, #3
 8007b56:	4eb6      	ldr	r6, [pc, #728]	; (8007e30 <_dtoa_r+0x648>)
 8007b58:	b957      	cbnz	r7, 8007b70 <_dtoa_r+0x388>
 8007b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5e:	ec53 2b18 	vmov	r2, r3, d8
 8007b62:	f7f8 fe7b 	bl	800085c <__aeabi_ddiv>
 8007b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6a:	e029      	b.n	8007bc0 <_dtoa_r+0x3d8>
 8007b6c:	2502      	movs	r5, #2
 8007b6e:	e7f2      	b.n	8007b56 <_dtoa_r+0x36e>
 8007b70:	07f9      	lsls	r1, r7, #31
 8007b72:	d508      	bpl.n	8007b86 <_dtoa_r+0x39e>
 8007b74:	ec51 0b18 	vmov	r0, r1, d8
 8007b78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b7c:	f7f8 fd44 	bl	8000608 <__aeabi_dmul>
 8007b80:	ec41 0b18 	vmov	d8, r0, r1
 8007b84:	3501      	adds	r5, #1
 8007b86:	107f      	asrs	r7, r7, #1
 8007b88:	3608      	adds	r6, #8
 8007b8a:	e7e5      	b.n	8007b58 <_dtoa_r+0x370>
 8007b8c:	f000 80a6 	beq.w	8007cdc <_dtoa_r+0x4f4>
 8007b90:	f1ca 0600 	rsb	r6, sl, #0
 8007b94:	4ba5      	ldr	r3, [pc, #660]	; (8007e2c <_dtoa_r+0x644>)
 8007b96:	4fa6      	ldr	r7, [pc, #664]	; (8007e30 <_dtoa_r+0x648>)
 8007b98:	f006 020f 	and.w	r2, r6, #15
 8007b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ba8:	f7f8 fd2e 	bl	8000608 <__aeabi_dmul>
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	1136      	asrs	r6, r6, #4
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2502      	movs	r5, #2
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	f040 8085 	bne.w	8007cc6 <_dtoa_r+0x4de>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1d2      	bne.n	8007b66 <_dtoa_r+0x37e>
 8007bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 808c 	beq.w	8007ce0 <_dtoa_r+0x4f8>
 8007bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bcc:	4b99      	ldr	r3, [pc, #612]	; (8007e34 <_dtoa_r+0x64c>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 ff8a 	bl	8000aec <__aeabi_dcmplt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f000 8081 	beq.w	8007ce0 <_dtoa_r+0x4f8>
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d07d      	beq.n	8007ce0 <_dtoa_r+0x4f8>
 8007be4:	f1b9 0f00 	cmp.w	r9, #0
 8007be8:	dd3c      	ble.n	8007c64 <_dtoa_r+0x47c>
 8007bea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007bee:	9307      	str	r3, [sp, #28]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4b91      	ldr	r3, [pc, #580]	; (8007e38 <_dtoa_r+0x650>)
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c00:	3501      	adds	r5, #1
 8007c02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7f8 fc92 	bl	8000534 <__aeabi_i2d>
 8007c10:	4632      	mov	r2, r6
 8007c12:	463b      	mov	r3, r7
 8007c14:	f7f8 fcf8 	bl	8000608 <__aeabi_dmul>
 8007c18:	4b88      	ldr	r3, [pc, #544]	; (8007e3c <_dtoa_r+0x654>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f7f8 fb3e 	bl	800029c <__adddf3>
 8007c20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d15c      	bne.n	8007cea <_dtoa_r+0x502>
 8007c30:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <_dtoa_r+0x658>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 fb2e 	bl	8000298 <__aeabi_dsub>
 8007c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c40:	4606      	mov	r6, r0
 8007c42:	460f      	mov	r7, r1
 8007c44:	f7f8 ff70 	bl	8000b28 <__aeabi_dcmpgt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 8296 	bne.w	800817a <_dtoa_r+0x992>
 8007c4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c52:	4630      	mov	r0, r6
 8007c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 ff47 	bl	8000aec <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f040 8288 	bne.w	8008174 <_dtoa_r+0x98c>
 8007c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f2c0 8158 	blt.w	8007f24 <_dtoa_r+0x73c>
 8007c74:	f1ba 0f0e 	cmp.w	sl, #14
 8007c78:	f300 8154 	bgt.w	8007f24 <_dtoa_r+0x73c>
 8007c7c:	4b6b      	ldr	r3, [pc, #428]	; (8007e2c <_dtoa_r+0x644>)
 8007c7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f280 80e3 	bge.w	8007e54 <_dtoa_r+0x66c>
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f300 80df 	bgt.w	8007e54 <_dtoa_r+0x66c>
 8007c96:	f040 826d 	bne.w	8008174 <_dtoa_r+0x98c>
 8007c9a:	4b69      	ldr	r3, [pc, #420]	; (8007e40 <_dtoa_r+0x658>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fcb1 	bl	8000608 <__aeabi_dmul>
 8007ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007caa:	f7f8 ff33 	bl	8000b14 <__aeabi_dcmpge>
 8007cae:	9e01      	ldr	r6, [sp, #4]
 8007cb0:	4637      	mov	r7, r6
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f040 8243 	bne.w	800813e <_dtoa_r+0x956>
 8007cb8:	9d00      	ldr	r5, [sp, #0]
 8007cba:	2331      	movs	r3, #49	; 0x31
 8007cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8007cc0:	f10a 0a01 	add.w	sl, sl, #1
 8007cc4:	e23f      	b.n	8008146 <_dtoa_r+0x95e>
 8007cc6:	07f2      	lsls	r2, r6, #31
 8007cc8:	d505      	bpl.n	8007cd6 <_dtoa_r+0x4ee>
 8007cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cce:	f7f8 fc9b 	bl	8000608 <__aeabi_dmul>
 8007cd2:	3501      	adds	r5, #1
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	1076      	asrs	r6, r6, #1
 8007cd8:	3708      	adds	r7, #8
 8007cda:	e76c      	b.n	8007bb6 <_dtoa_r+0x3ce>
 8007cdc:	2502      	movs	r5, #2
 8007cde:	e76f      	b.n	8007bc0 <_dtoa_r+0x3d8>
 8007ce0:	9b01      	ldr	r3, [sp, #4]
 8007ce2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce8:	e78d      	b.n	8007c06 <_dtoa_r+0x41e>
 8007cea:	9900      	ldr	r1, [sp, #0]
 8007cec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf0:	4b4e      	ldr	r3, [pc, #312]	; (8007e2c <_dtoa_r+0x644>)
 8007cf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cf6:	4401      	add	r1, r0
 8007cf8:	9102      	str	r1, [sp, #8]
 8007cfa:	9908      	ldr	r1, [sp, #32]
 8007cfc:	eeb0 8a47 	vmov.f32	s16, s14
 8007d00:	eef0 8a67 	vmov.f32	s17, s15
 8007d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d045      	beq.n	8007d9c <_dtoa_r+0x5b4>
 8007d10:	494c      	ldr	r1, [pc, #304]	; (8007e44 <_dtoa_r+0x65c>)
 8007d12:	2000      	movs	r0, #0
 8007d14:	f7f8 fda2 	bl	800085c <__aeabi_ddiv>
 8007d18:	ec53 2b18 	vmov	r2, r3, d8
 8007d1c:	f7f8 fabc 	bl	8000298 <__aeabi_dsub>
 8007d20:	9d00      	ldr	r5, [sp, #0]
 8007d22:	ec41 0b18 	vmov	d8, r0, r1
 8007d26:	4639      	mov	r1, r7
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7f8 ff1d 	bl	8000b68 <__aeabi_d2iz>
 8007d2e:	900c      	str	r0, [sp, #48]	; 0x30
 8007d30:	f7f8 fc00 	bl	8000534 <__aeabi_i2d>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 faac 	bl	8000298 <__aeabi_dsub>
 8007d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d42:	3330      	adds	r3, #48	; 0x30
 8007d44:	f805 3b01 	strb.w	r3, [r5], #1
 8007d48:	ec53 2b18 	vmov	r2, r3, d8
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	f7f8 fecc 	bl	8000aec <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d165      	bne.n	8007e24 <_dtoa_r+0x63c>
 8007d58:	4632      	mov	r2, r6
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	4935      	ldr	r1, [pc, #212]	; (8007e34 <_dtoa_r+0x64c>)
 8007d5e:	2000      	movs	r0, #0
 8007d60:	f7f8 fa9a 	bl	8000298 <__aeabi_dsub>
 8007d64:	ec53 2b18 	vmov	r2, r3, d8
 8007d68:	f7f8 fec0 	bl	8000aec <__aeabi_dcmplt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f040 80b9 	bne.w	8007ee4 <_dtoa_r+0x6fc>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	429d      	cmp	r5, r3
 8007d76:	f43f af75 	beq.w	8007c64 <_dtoa_r+0x47c>
 8007d7a:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <_dtoa_r+0x650>)
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7f8 fc41 	bl	8000608 <__aeabi_dmul>
 8007d86:	4b2c      	ldr	r3, [pc, #176]	; (8007e38 <_dtoa_r+0x650>)
 8007d88:	ec41 0b18 	vmov	d8, r0, r1
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4630      	mov	r0, r6
 8007d90:	4639      	mov	r1, r7
 8007d92:	f7f8 fc39 	bl	8000608 <__aeabi_dmul>
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	e7c4      	b.n	8007d26 <_dtoa_r+0x53e>
 8007d9c:	ec51 0b17 	vmov	r0, r1, d7
 8007da0:	f7f8 fc32 	bl	8000608 <__aeabi_dmul>
 8007da4:	9b02      	ldr	r3, [sp, #8]
 8007da6:	9d00      	ldr	r5, [sp, #0]
 8007da8:	930c      	str	r3, [sp, #48]	; 0x30
 8007daa:	ec41 0b18 	vmov	d8, r0, r1
 8007dae:	4639      	mov	r1, r7
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7f8 fed9 	bl	8000b68 <__aeabi_d2iz>
 8007db6:	9011      	str	r0, [sp, #68]	; 0x44
 8007db8:	f7f8 fbbc 	bl	8000534 <__aeabi_i2d>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f7f8 fa68 	bl	8000298 <__aeabi_dsub>
 8007dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dca:	3330      	adds	r3, #48	; 0x30
 8007dcc:	f805 3b01 	strb.w	r3, [r5], #1
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	429d      	cmp	r5, r3
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	d134      	bne.n	8007e48 <_dtoa_r+0x660>
 8007dde:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <_dtoa_r+0x65c>)
 8007de0:	ec51 0b18 	vmov	r0, r1, d8
 8007de4:	f7f8 fa5a 	bl	800029c <__adddf3>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fe9a 	bl	8000b28 <__aeabi_dcmpgt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d175      	bne.n	8007ee4 <_dtoa_r+0x6fc>
 8007df8:	ec53 2b18 	vmov	r2, r3, d8
 8007dfc:	4911      	ldr	r1, [pc, #68]	; (8007e44 <_dtoa_r+0x65c>)
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f7f8 fa4a 	bl	8000298 <__aeabi_dsub>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fe6e 	bl	8000aec <__aeabi_dcmplt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f43f af27 	beq.w	8007c64 <_dtoa_r+0x47c>
 8007e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e18:	1e6b      	subs	r3, r5, #1
 8007e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e20:	2b30      	cmp	r3, #48	; 0x30
 8007e22:	d0f8      	beq.n	8007e16 <_dtoa_r+0x62e>
 8007e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e28:	e04a      	b.n	8007ec0 <_dtoa_r+0x6d8>
 8007e2a:	bf00      	nop
 8007e2c:	08009d40 	.word	0x08009d40
 8007e30:	08009d18 	.word	0x08009d18
 8007e34:	3ff00000 	.word	0x3ff00000
 8007e38:	40240000 	.word	0x40240000
 8007e3c:	401c0000 	.word	0x401c0000
 8007e40:	40140000 	.word	0x40140000
 8007e44:	3fe00000 	.word	0x3fe00000
 8007e48:	4baf      	ldr	r3, [pc, #700]	; (8008108 <_dtoa_r+0x920>)
 8007e4a:	f7f8 fbdd 	bl	8000608 <__aeabi_dmul>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	e7ac      	b.n	8007dae <_dtoa_r+0x5c6>
 8007e54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e58:	9d00      	ldr	r5, [sp, #0]
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	4630      	mov	r0, r6
 8007e60:	4639      	mov	r1, r7
 8007e62:	f7f8 fcfb 	bl	800085c <__aeabi_ddiv>
 8007e66:	f7f8 fe7f 	bl	8000b68 <__aeabi_d2iz>
 8007e6a:	9002      	str	r0, [sp, #8]
 8007e6c:	f7f8 fb62 	bl	8000534 <__aeabi_i2d>
 8007e70:	4642      	mov	r2, r8
 8007e72:	464b      	mov	r3, r9
 8007e74:	f7f8 fbc8 	bl	8000608 <__aeabi_dmul>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fa0a 	bl	8000298 <__aeabi_dsub>
 8007e84:	9e02      	ldr	r6, [sp, #8]
 8007e86:	9f01      	ldr	r7, [sp, #4]
 8007e88:	3630      	adds	r6, #48	; 0x30
 8007e8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e8e:	9e00      	ldr	r6, [sp, #0]
 8007e90:	1bae      	subs	r6, r5, r6
 8007e92:	42b7      	cmp	r7, r6
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	d137      	bne.n	8007f0a <_dtoa_r+0x722>
 8007e9a:	f7f8 f9ff 	bl	800029c <__adddf3>
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	f7f8 fe3f 	bl	8000b28 <__aeabi_dcmpgt>
 8007eaa:	b9c8      	cbnz	r0, 8007ee0 <_dtoa_r+0x6f8>
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	f7f8 fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eb8:	b110      	cbz	r0, 8007ec0 <_dtoa_r+0x6d8>
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	07d9      	lsls	r1, r3, #31
 8007ebe:	d40f      	bmi.n	8007ee0 <_dtoa_r+0x6f8>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f000 fad6 	bl	8008474 <_Bfree>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	702b      	strb	r3, [r5, #0]
 8007ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ece:	f10a 0001 	add.w	r0, sl, #1
 8007ed2:	6018      	str	r0, [r3, #0]
 8007ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f43f acd8 	beq.w	800788c <_dtoa_r+0xa4>
 8007edc:	601d      	str	r5, [r3, #0]
 8007ede:	e4d5      	b.n	800788c <_dtoa_r+0xa4>
 8007ee0:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eec:	2a39      	cmp	r2, #57	; 0x39
 8007eee:	d108      	bne.n	8007f02 <_dtoa_r+0x71a>
 8007ef0:	9a00      	ldr	r2, [sp, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d1f7      	bne.n	8007ee6 <_dtoa_r+0x6fe>
 8007ef6:	9a07      	ldr	r2, [sp, #28]
 8007ef8:	9900      	ldr	r1, [sp, #0]
 8007efa:	3201      	adds	r2, #1
 8007efc:	9207      	str	r2, [sp, #28]
 8007efe:	2230      	movs	r2, #48	; 0x30
 8007f00:	700a      	strb	r2, [r1, #0]
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	3201      	adds	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e78c      	b.n	8007e24 <_dtoa_r+0x63c>
 8007f0a:	4b7f      	ldr	r3, [pc, #508]	; (8008108 <_dtoa_r+0x920>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f7f8 fb7b 	bl	8000608 <__aeabi_dmul>
 8007f12:	2200      	movs	r2, #0
 8007f14:	2300      	movs	r3, #0
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	f7f8 fddd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d09b      	beq.n	8007e5a <_dtoa_r+0x672>
 8007f22:	e7cd      	b.n	8007ec0 <_dtoa_r+0x6d8>
 8007f24:	9a08      	ldr	r2, [sp, #32]
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	f000 80c4 	beq.w	80080b4 <_dtoa_r+0x8cc>
 8007f2c:	9a05      	ldr	r2, [sp, #20]
 8007f2e:	2a01      	cmp	r2, #1
 8007f30:	f300 80a8 	bgt.w	8008084 <_dtoa_r+0x89c>
 8007f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	f000 80a0 	beq.w	800807c <_dtoa_r+0x894>
 8007f3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f40:	9e06      	ldr	r6, [sp, #24]
 8007f42:	4645      	mov	r5, r8
 8007f44:	9a04      	ldr	r2, [sp, #16]
 8007f46:	2101      	movs	r1, #1
 8007f48:	441a      	add	r2, r3
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4498      	add	r8, r3
 8007f4e:	9204      	str	r2, [sp, #16]
 8007f50:	f000 fb4c 	bl	80085ec <__i2b>
 8007f54:	4607      	mov	r7, r0
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	dd0b      	ble.n	8007f72 <_dtoa_r+0x78a>
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd08      	ble.n	8007f72 <_dtoa_r+0x78a>
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	bfa8      	it	ge
 8007f66:	462b      	movge	r3, r5
 8007f68:	eba8 0803 	sub.w	r8, r8, r3
 8007f6c:	1aed      	subs	r5, r5, r3
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	b1fb      	cbz	r3, 8007fb6 <_dtoa_r+0x7ce>
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 809f 	beq.w	80080bc <_dtoa_r+0x8d4>
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	dd11      	ble.n	8007fa6 <_dtoa_r+0x7be>
 8007f82:	4639      	mov	r1, r7
 8007f84:	4632      	mov	r2, r6
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fbec 	bl	8008764 <__pow5mult>
 8007f8c:	465a      	mov	r2, fp
 8007f8e:	4601      	mov	r1, r0
 8007f90:	4607      	mov	r7, r0
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fb40 	bl	8008618 <__multiply>
 8007f98:	4659      	mov	r1, fp
 8007f9a:	9007      	str	r0, [sp, #28]
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fa69 	bl	8008474 <_Bfree>
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	469b      	mov	fp, r3
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	1b9a      	subs	r2, r3, r6
 8007faa:	d004      	beq.n	8007fb6 <_dtoa_r+0x7ce>
 8007fac:	4659      	mov	r1, fp
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 fbd8 	bl	8008764 <__pow5mult>
 8007fb4:	4683      	mov	fp, r0
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 fb17 	bl	80085ec <__i2b>
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	dd7c      	ble.n	80080c0 <_dtoa_r+0x8d8>
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4601      	mov	r1, r0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fbca 	bl	8008764 <__pow5mult>
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	dd76      	ble.n	80080c6 <_dtoa_r+0x8de>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9306      	str	r3, [sp, #24]
 8007fdc:	6933      	ldr	r3, [r6, #16]
 8007fde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fe2:	6918      	ldr	r0, [r3, #16]
 8007fe4:	f000 fab2 	bl	800854c <__hi0bits>
 8007fe8:	f1c0 0020 	rsb	r0, r0, #32
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	4418      	add	r0, r3
 8007ff0:	f010 001f 	ands.w	r0, r0, #31
 8007ff4:	f000 8086 	beq.w	8008104 <_dtoa_r+0x91c>
 8007ff8:	f1c0 0320 	rsb	r3, r0, #32
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	dd7f      	ble.n	8008100 <_dtoa_r+0x918>
 8008000:	f1c0 001c 	rsb	r0, r0, #28
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	4403      	add	r3, r0
 8008008:	4480      	add	r8, r0
 800800a:	4405      	add	r5, r0
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	dd05      	ble.n	8008020 <_dtoa_r+0x838>
 8008014:	4659      	mov	r1, fp
 8008016:	4642      	mov	r2, r8
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fbfd 	bl	8008818 <__lshift>
 800801e:	4683      	mov	fp, r0
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd05      	ble.n	8008032 <_dtoa_r+0x84a>
 8008026:	4631      	mov	r1, r6
 8008028:	461a      	mov	r2, r3
 800802a:	4620      	mov	r0, r4
 800802c:	f000 fbf4 	bl	8008818 <__lshift>
 8008030:	4606      	mov	r6, r0
 8008032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008034:	2b00      	cmp	r3, #0
 8008036:	d069      	beq.n	800810c <_dtoa_r+0x924>
 8008038:	4631      	mov	r1, r6
 800803a:	4658      	mov	r0, fp
 800803c:	f000 fc58 	bl	80088f0 <__mcmp>
 8008040:	2800      	cmp	r0, #0
 8008042:	da63      	bge.n	800810c <_dtoa_r+0x924>
 8008044:	2300      	movs	r3, #0
 8008046:	4659      	mov	r1, fp
 8008048:	220a      	movs	r2, #10
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fa34 	bl	80084b8 <__multadd>
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008056:	4683      	mov	fp, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 818f 	beq.w	800837c <_dtoa_r+0xb94>
 800805e:	4639      	mov	r1, r7
 8008060:	2300      	movs	r3, #0
 8008062:	220a      	movs	r2, #10
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fa27 	bl	80084b8 <__multadd>
 800806a:	f1b9 0f00 	cmp.w	r9, #0
 800806e:	4607      	mov	r7, r0
 8008070:	f300 808e 	bgt.w	8008190 <_dtoa_r+0x9a8>
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	2b02      	cmp	r3, #2
 8008078:	dc50      	bgt.n	800811c <_dtoa_r+0x934>
 800807a:	e089      	b.n	8008190 <_dtoa_r+0x9a8>
 800807c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800807e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008082:	e75d      	b.n	8007f40 <_dtoa_r+0x758>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	1e5e      	subs	r6, r3, #1
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	42b3      	cmp	r3, r6
 800808c:	bfbf      	itttt	lt
 800808e:	9b06      	ldrlt	r3, [sp, #24]
 8008090:	9606      	strlt	r6, [sp, #24]
 8008092:	1af2      	sublt	r2, r6, r3
 8008094:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008096:	bfb6      	itet	lt
 8008098:	189b      	addlt	r3, r3, r2
 800809a:	1b9e      	subge	r6, r3, r6
 800809c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	bfb8      	it	lt
 80080a2:	2600      	movlt	r6, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfb5      	itete	lt
 80080a8:	eba8 0503 	sublt.w	r5, r8, r3
 80080ac:	9b01      	ldrge	r3, [sp, #4]
 80080ae:	2300      	movlt	r3, #0
 80080b0:	4645      	movge	r5, r8
 80080b2:	e747      	b.n	8007f44 <_dtoa_r+0x75c>
 80080b4:	9e06      	ldr	r6, [sp, #24]
 80080b6:	9f08      	ldr	r7, [sp, #32]
 80080b8:	4645      	mov	r5, r8
 80080ba:	e74c      	b.n	8007f56 <_dtoa_r+0x76e>
 80080bc:	9a06      	ldr	r2, [sp, #24]
 80080be:	e775      	b.n	8007fac <_dtoa_r+0x7c4>
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	dc18      	bgt.n	80080f8 <_dtoa_r+0x910>
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	b9b3      	cbnz	r3, 80080f8 <_dtoa_r+0x910>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d0:	b9a3      	cbnz	r3, 80080fc <_dtoa_r+0x914>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	0d1b      	lsrs	r3, r3, #20
 80080da:	051b      	lsls	r3, r3, #20
 80080dc:	b12b      	cbz	r3, 80080ea <_dtoa_r+0x902>
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	3301      	adds	r3, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	f108 0801 	add.w	r8, r8, #1
 80080e8:	2301      	movs	r3, #1
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f47f af74 	bne.w	8007fdc <_dtoa_r+0x7f4>
 80080f4:	2001      	movs	r0, #1
 80080f6:	e779      	b.n	8007fec <_dtoa_r+0x804>
 80080f8:	2300      	movs	r3, #0
 80080fa:	e7f6      	b.n	80080ea <_dtoa_r+0x902>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	e7f4      	b.n	80080ea <_dtoa_r+0x902>
 8008100:	d085      	beq.n	800800e <_dtoa_r+0x826>
 8008102:	4618      	mov	r0, r3
 8008104:	301c      	adds	r0, #28
 8008106:	e77d      	b.n	8008004 <_dtoa_r+0x81c>
 8008108:	40240000 	.word	0x40240000
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc38      	bgt.n	8008184 <_dtoa_r+0x99c>
 8008112:	9b05      	ldr	r3, [sp, #20]
 8008114:	2b02      	cmp	r3, #2
 8008116:	dd35      	ble.n	8008184 <_dtoa_r+0x99c>
 8008118:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	d10d      	bne.n	800813e <_dtoa_r+0x956>
 8008122:	4631      	mov	r1, r6
 8008124:	464b      	mov	r3, r9
 8008126:	2205      	movs	r2, #5
 8008128:	4620      	mov	r0, r4
 800812a:	f000 f9c5 	bl	80084b8 <__multadd>
 800812e:	4601      	mov	r1, r0
 8008130:	4606      	mov	r6, r0
 8008132:	4658      	mov	r0, fp
 8008134:	f000 fbdc 	bl	80088f0 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	f73f adbd 	bgt.w	8007cb8 <_dtoa_r+0x4d0>
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	9d00      	ldr	r5, [sp, #0]
 8008142:	ea6f 0a03 	mvn.w	sl, r3
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	4631      	mov	r1, r6
 800814c:	4620      	mov	r0, r4
 800814e:	f000 f991 	bl	8008474 <_Bfree>
 8008152:	2f00      	cmp	r7, #0
 8008154:	f43f aeb4 	beq.w	8007ec0 <_dtoa_r+0x6d8>
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	d005      	beq.n	800816a <_dtoa_r+0x982>
 800815e:	45b8      	cmp	r8, r7
 8008160:	d003      	beq.n	800816a <_dtoa_r+0x982>
 8008162:	4641      	mov	r1, r8
 8008164:	4620      	mov	r0, r4
 8008166:	f000 f985 	bl	8008474 <_Bfree>
 800816a:	4639      	mov	r1, r7
 800816c:	4620      	mov	r0, r4
 800816e:	f000 f981 	bl	8008474 <_Bfree>
 8008172:	e6a5      	b.n	8007ec0 <_dtoa_r+0x6d8>
 8008174:	2600      	movs	r6, #0
 8008176:	4637      	mov	r7, r6
 8008178:	e7e1      	b.n	800813e <_dtoa_r+0x956>
 800817a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800817c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008180:	4637      	mov	r7, r6
 8008182:	e599      	b.n	8007cb8 <_dtoa_r+0x4d0>
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80fd 	beq.w	800838a <_dtoa_r+0xba2>
 8008190:	2d00      	cmp	r5, #0
 8008192:	dd05      	ble.n	80081a0 <_dtoa_r+0x9b8>
 8008194:	4639      	mov	r1, r7
 8008196:	462a      	mov	r2, r5
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fb3d 	bl	8008818 <__lshift>
 800819e:	4607      	mov	r7, r0
 80081a0:	9b06      	ldr	r3, [sp, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d05c      	beq.n	8008260 <_dtoa_r+0xa78>
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 f923 	bl	80083f4 <_Balloc>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b928      	cbnz	r0, 80081be <_dtoa_r+0x9d6>
 80081b2:	4b80      	ldr	r3, [pc, #512]	; (80083b4 <_dtoa_r+0xbcc>)
 80081b4:	4602      	mov	r2, r0
 80081b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081ba:	f7ff bb2e 	b.w	800781a <_dtoa_r+0x32>
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	3202      	adds	r2, #2
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	f107 010c 	add.w	r1, r7, #12
 80081c8:	300c      	adds	r0, #12
 80081ca:	f000 f905 	bl	80083d8 <memcpy>
 80081ce:	2201      	movs	r2, #1
 80081d0:	4629      	mov	r1, r5
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fb20 	bl	8008818 <__lshift>
 80081d8:	9b00      	ldr	r3, [sp, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	444b      	add	r3, r9
 80081e2:	9307      	str	r3, [sp, #28]
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	46b8      	mov	r8, r7
 80081ec:	9306      	str	r3, [sp, #24]
 80081ee:	4607      	mov	r7, r0
 80081f0:	9b01      	ldr	r3, [sp, #4]
 80081f2:	4631      	mov	r1, r6
 80081f4:	3b01      	subs	r3, #1
 80081f6:	4658      	mov	r0, fp
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	f7ff fa69 	bl	80076d0 <quorem>
 80081fe:	4603      	mov	r3, r0
 8008200:	3330      	adds	r3, #48	; 0x30
 8008202:	9004      	str	r0, [sp, #16]
 8008204:	4641      	mov	r1, r8
 8008206:	4658      	mov	r0, fp
 8008208:	9308      	str	r3, [sp, #32]
 800820a:	f000 fb71 	bl	80088f0 <__mcmp>
 800820e:	463a      	mov	r2, r7
 8008210:	4681      	mov	r9, r0
 8008212:	4631      	mov	r1, r6
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fb87 	bl	8008928 <__mdiff>
 800821a:	68c2      	ldr	r2, [r0, #12]
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	4605      	mov	r5, r0
 8008220:	bb02      	cbnz	r2, 8008264 <_dtoa_r+0xa7c>
 8008222:	4601      	mov	r1, r0
 8008224:	4658      	mov	r0, fp
 8008226:	f000 fb63 	bl	80088f0 <__mcmp>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	4602      	mov	r2, r0
 800822e:	4629      	mov	r1, r5
 8008230:	4620      	mov	r0, r4
 8008232:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008236:	f000 f91d 	bl	8008474 <_Bfree>
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823e:	9d01      	ldr	r5, [sp, #4]
 8008240:	ea43 0102 	orr.w	r1, r3, r2
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	430b      	orrs	r3, r1
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	d10d      	bne.n	8008268 <_dtoa_r+0xa80>
 800824c:	2b39      	cmp	r3, #57	; 0x39
 800824e:	d029      	beq.n	80082a4 <_dtoa_r+0xabc>
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	dd01      	ble.n	800825a <_dtoa_r+0xa72>
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3331      	adds	r3, #49	; 0x31
 800825a:	9a02      	ldr	r2, [sp, #8]
 800825c:	7013      	strb	r3, [r2, #0]
 800825e:	e774      	b.n	800814a <_dtoa_r+0x962>
 8008260:	4638      	mov	r0, r7
 8008262:	e7b9      	b.n	80081d8 <_dtoa_r+0x9f0>
 8008264:	2201      	movs	r2, #1
 8008266:	e7e2      	b.n	800822e <_dtoa_r+0xa46>
 8008268:	f1b9 0f00 	cmp.w	r9, #0
 800826c:	db06      	blt.n	800827c <_dtoa_r+0xa94>
 800826e:	9905      	ldr	r1, [sp, #20]
 8008270:	ea41 0909 	orr.w	r9, r1, r9
 8008274:	9906      	ldr	r1, [sp, #24]
 8008276:	ea59 0101 	orrs.w	r1, r9, r1
 800827a:	d120      	bne.n	80082be <_dtoa_r+0xad6>
 800827c:	2a00      	cmp	r2, #0
 800827e:	ddec      	ble.n	800825a <_dtoa_r+0xa72>
 8008280:	4659      	mov	r1, fp
 8008282:	2201      	movs	r2, #1
 8008284:	4620      	mov	r0, r4
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f000 fac6 	bl	8008818 <__lshift>
 800828c:	4631      	mov	r1, r6
 800828e:	4683      	mov	fp, r0
 8008290:	f000 fb2e 	bl	80088f0 <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	dc02      	bgt.n	80082a0 <_dtoa_r+0xab8>
 800829a:	d1de      	bne.n	800825a <_dtoa_r+0xa72>
 800829c:	07da      	lsls	r2, r3, #31
 800829e:	d5dc      	bpl.n	800825a <_dtoa_r+0xa72>
 80082a0:	2b39      	cmp	r3, #57	; 0x39
 80082a2:	d1d8      	bne.n	8008256 <_dtoa_r+0xa6e>
 80082a4:	9a02      	ldr	r2, [sp, #8]
 80082a6:	2339      	movs	r3, #57	; 0x39
 80082a8:	7013      	strb	r3, [r2, #0]
 80082aa:	462b      	mov	r3, r5
 80082ac:	461d      	mov	r5, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082b4:	2a39      	cmp	r2, #57	; 0x39
 80082b6:	d050      	beq.n	800835a <_dtoa_r+0xb72>
 80082b8:	3201      	adds	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e745      	b.n	800814a <_dtoa_r+0x962>
 80082be:	2a00      	cmp	r2, #0
 80082c0:	dd03      	ble.n	80082ca <_dtoa_r+0xae2>
 80082c2:	2b39      	cmp	r3, #57	; 0x39
 80082c4:	d0ee      	beq.n	80082a4 <_dtoa_r+0xabc>
 80082c6:	3301      	adds	r3, #1
 80082c8:	e7c7      	b.n	800825a <_dtoa_r+0xa72>
 80082ca:	9a01      	ldr	r2, [sp, #4]
 80082cc:	9907      	ldr	r1, [sp, #28]
 80082ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082d2:	428a      	cmp	r2, r1
 80082d4:	d02a      	beq.n	800832c <_dtoa_r+0xb44>
 80082d6:	4659      	mov	r1, fp
 80082d8:	2300      	movs	r3, #0
 80082da:	220a      	movs	r2, #10
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 f8eb 	bl	80084b8 <__multadd>
 80082e2:	45b8      	cmp	r8, r7
 80082e4:	4683      	mov	fp, r0
 80082e6:	f04f 0300 	mov.w	r3, #0
 80082ea:	f04f 020a 	mov.w	r2, #10
 80082ee:	4641      	mov	r1, r8
 80082f0:	4620      	mov	r0, r4
 80082f2:	d107      	bne.n	8008304 <_dtoa_r+0xb1c>
 80082f4:	f000 f8e0 	bl	80084b8 <__multadd>
 80082f8:	4680      	mov	r8, r0
 80082fa:	4607      	mov	r7, r0
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	3301      	adds	r3, #1
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	e775      	b.n	80081f0 <_dtoa_r+0xa08>
 8008304:	f000 f8d8 	bl	80084b8 <__multadd>
 8008308:	4639      	mov	r1, r7
 800830a:	4680      	mov	r8, r0
 800830c:	2300      	movs	r3, #0
 800830e:	220a      	movs	r2, #10
 8008310:	4620      	mov	r0, r4
 8008312:	f000 f8d1 	bl	80084b8 <__multadd>
 8008316:	4607      	mov	r7, r0
 8008318:	e7f0      	b.n	80082fc <_dtoa_r+0xb14>
 800831a:	f1b9 0f00 	cmp.w	r9, #0
 800831e:	9a00      	ldr	r2, [sp, #0]
 8008320:	bfcc      	ite	gt
 8008322:	464d      	movgt	r5, r9
 8008324:	2501      	movle	r5, #1
 8008326:	4415      	add	r5, r2
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	4659      	mov	r1, fp
 800832e:	2201      	movs	r2, #1
 8008330:	4620      	mov	r0, r4
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	f000 fa70 	bl	8008818 <__lshift>
 8008338:	4631      	mov	r1, r6
 800833a:	4683      	mov	fp, r0
 800833c:	f000 fad8 	bl	80088f0 <__mcmp>
 8008340:	2800      	cmp	r0, #0
 8008342:	dcb2      	bgt.n	80082aa <_dtoa_r+0xac2>
 8008344:	d102      	bne.n	800834c <_dtoa_r+0xb64>
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	07db      	lsls	r3, r3, #31
 800834a:	d4ae      	bmi.n	80082aa <_dtoa_r+0xac2>
 800834c:	462b      	mov	r3, r5
 800834e:	461d      	mov	r5, r3
 8008350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008354:	2a30      	cmp	r2, #48	; 0x30
 8008356:	d0fa      	beq.n	800834e <_dtoa_r+0xb66>
 8008358:	e6f7      	b.n	800814a <_dtoa_r+0x962>
 800835a:	9a00      	ldr	r2, [sp, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d1a5      	bne.n	80082ac <_dtoa_r+0xac4>
 8008360:	f10a 0a01 	add.w	sl, sl, #1
 8008364:	2331      	movs	r3, #49	; 0x31
 8008366:	e779      	b.n	800825c <_dtoa_r+0xa74>
 8008368:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <_dtoa_r+0xbd0>)
 800836a:	f7ff baaf 	b.w	80078cc <_dtoa_r+0xe4>
 800836e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f aa86 	bne.w	8007882 <_dtoa_r+0x9a>
 8008376:	4b11      	ldr	r3, [pc, #68]	; (80083bc <_dtoa_r+0xbd4>)
 8008378:	f7ff baa8 	b.w	80078cc <_dtoa_r+0xe4>
 800837c:	f1b9 0f00 	cmp.w	r9, #0
 8008380:	dc03      	bgt.n	800838a <_dtoa_r+0xba2>
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	2b02      	cmp	r3, #2
 8008386:	f73f aec9 	bgt.w	800811c <_dtoa_r+0x934>
 800838a:	9d00      	ldr	r5, [sp, #0]
 800838c:	4631      	mov	r1, r6
 800838e:	4658      	mov	r0, fp
 8008390:	f7ff f99e 	bl	80076d0 <quorem>
 8008394:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008398:	f805 3b01 	strb.w	r3, [r5], #1
 800839c:	9a00      	ldr	r2, [sp, #0]
 800839e:	1aaa      	subs	r2, r5, r2
 80083a0:	4591      	cmp	r9, r2
 80083a2:	ddba      	ble.n	800831a <_dtoa_r+0xb32>
 80083a4:	4659      	mov	r1, fp
 80083a6:	2300      	movs	r3, #0
 80083a8:	220a      	movs	r2, #10
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 f884 	bl	80084b8 <__multadd>
 80083b0:	4683      	mov	fp, r0
 80083b2:	e7eb      	b.n	800838c <_dtoa_r+0xba4>
 80083b4:	08009ca7 	.word	0x08009ca7
 80083b8:	08009c00 	.word	0x08009c00
 80083bc:	08009c24 	.word	0x08009c24

080083c0 <_localeconv_r>:
 80083c0:	4800      	ldr	r0, [pc, #0]	; (80083c4 <_localeconv_r+0x4>)
 80083c2:	4770      	bx	lr
 80083c4:	200003cc 	.word	0x200003cc

080083c8 <malloc>:
 80083c8:	4b02      	ldr	r3, [pc, #8]	; (80083d4 <malloc+0xc>)
 80083ca:	4601      	mov	r1, r0
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	f000 bbef 	b.w	8008bb0 <_malloc_r>
 80083d2:	bf00      	nop
 80083d4:	20000278 	.word	0x20000278

080083d8 <memcpy>:
 80083d8:	440a      	add	r2, r1
 80083da:	4291      	cmp	r1, r2
 80083dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e0:	d100      	bne.n	80083e4 <memcpy+0xc>
 80083e2:	4770      	bx	lr
 80083e4:	b510      	push	{r4, lr}
 80083e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ee:	4291      	cmp	r1, r2
 80083f0:	d1f9      	bne.n	80083e6 <memcpy+0xe>
 80083f2:	bd10      	pop	{r4, pc}

080083f4 <_Balloc>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083f8:	4604      	mov	r4, r0
 80083fa:	460d      	mov	r5, r1
 80083fc:	b976      	cbnz	r6, 800841c <_Balloc+0x28>
 80083fe:	2010      	movs	r0, #16
 8008400:	f7ff ffe2 	bl	80083c8 <malloc>
 8008404:	4602      	mov	r2, r0
 8008406:	6260      	str	r0, [r4, #36]	; 0x24
 8008408:	b920      	cbnz	r0, 8008414 <_Balloc+0x20>
 800840a:	4b18      	ldr	r3, [pc, #96]	; (800846c <_Balloc+0x78>)
 800840c:	4818      	ldr	r0, [pc, #96]	; (8008470 <_Balloc+0x7c>)
 800840e:	2166      	movs	r1, #102	; 0x66
 8008410:	f000 fd94 	bl	8008f3c <__assert_func>
 8008414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008418:	6006      	str	r6, [r0, #0]
 800841a:	60c6      	str	r6, [r0, #12]
 800841c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800841e:	68f3      	ldr	r3, [r6, #12]
 8008420:	b183      	cbz	r3, 8008444 <_Balloc+0x50>
 8008422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800842a:	b9b8      	cbnz	r0, 800845c <_Balloc+0x68>
 800842c:	2101      	movs	r1, #1
 800842e:	fa01 f605 	lsl.w	r6, r1, r5
 8008432:	1d72      	adds	r2, r6, #5
 8008434:	0092      	lsls	r2, r2, #2
 8008436:	4620      	mov	r0, r4
 8008438:	f000 fb5a 	bl	8008af0 <_calloc_r>
 800843c:	b160      	cbz	r0, 8008458 <_Balloc+0x64>
 800843e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008442:	e00e      	b.n	8008462 <_Balloc+0x6e>
 8008444:	2221      	movs	r2, #33	; 0x21
 8008446:	2104      	movs	r1, #4
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fb51 	bl	8008af0 <_calloc_r>
 800844e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008450:	60f0      	str	r0, [r6, #12]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e4      	bne.n	8008422 <_Balloc+0x2e>
 8008458:	2000      	movs	r0, #0
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	6802      	ldr	r2, [r0, #0]
 800845e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008462:	2300      	movs	r3, #0
 8008464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008468:	e7f7      	b.n	800845a <_Balloc+0x66>
 800846a:	bf00      	nop
 800846c:	08009c31 	.word	0x08009c31
 8008470:	08009cb8 	.word	0x08009cb8

08008474 <_Bfree>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008478:	4605      	mov	r5, r0
 800847a:	460c      	mov	r4, r1
 800847c:	b976      	cbnz	r6, 800849c <_Bfree+0x28>
 800847e:	2010      	movs	r0, #16
 8008480:	f7ff ffa2 	bl	80083c8 <malloc>
 8008484:	4602      	mov	r2, r0
 8008486:	6268      	str	r0, [r5, #36]	; 0x24
 8008488:	b920      	cbnz	r0, 8008494 <_Bfree+0x20>
 800848a:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <_Bfree+0x3c>)
 800848c:	4809      	ldr	r0, [pc, #36]	; (80084b4 <_Bfree+0x40>)
 800848e:	218a      	movs	r1, #138	; 0x8a
 8008490:	f000 fd54 	bl	8008f3c <__assert_func>
 8008494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008498:	6006      	str	r6, [r0, #0]
 800849a:	60c6      	str	r6, [r0, #12]
 800849c:	b13c      	cbz	r4, 80084ae <_Bfree+0x3a>
 800849e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084a0:	6862      	ldr	r2, [r4, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084a8:	6021      	str	r1, [r4, #0]
 80084aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	08009c31 	.word	0x08009c31
 80084b4:	08009cb8 	.word	0x08009cb8

080084b8 <__multadd>:
 80084b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084bc:	690e      	ldr	r6, [r1, #16]
 80084be:	4607      	mov	r7, r0
 80084c0:	4698      	mov	r8, r3
 80084c2:	460c      	mov	r4, r1
 80084c4:	f101 0014 	add.w	r0, r1, #20
 80084c8:	2300      	movs	r3, #0
 80084ca:	6805      	ldr	r5, [r0, #0]
 80084cc:	b2a9      	uxth	r1, r5
 80084ce:	fb02 8101 	mla	r1, r2, r1, r8
 80084d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80084d6:	0c2d      	lsrs	r5, r5, #16
 80084d8:	fb02 c505 	mla	r5, r2, r5, ip
 80084dc:	b289      	uxth	r1, r1
 80084de:	3301      	adds	r3, #1
 80084e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80084e4:	429e      	cmp	r6, r3
 80084e6:	f840 1b04 	str.w	r1, [r0], #4
 80084ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80084ee:	dcec      	bgt.n	80084ca <__multadd+0x12>
 80084f0:	f1b8 0f00 	cmp.w	r8, #0
 80084f4:	d022      	beq.n	800853c <__multadd+0x84>
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	42b3      	cmp	r3, r6
 80084fa:	dc19      	bgt.n	8008530 <__multadd+0x78>
 80084fc:	6861      	ldr	r1, [r4, #4]
 80084fe:	4638      	mov	r0, r7
 8008500:	3101      	adds	r1, #1
 8008502:	f7ff ff77 	bl	80083f4 <_Balloc>
 8008506:	4605      	mov	r5, r0
 8008508:	b928      	cbnz	r0, 8008516 <__multadd+0x5e>
 800850a:	4602      	mov	r2, r0
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <__multadd+0x8c>)
 800850e:	480e      	ldr	r0, [pc, #56]	; (8008548 <__multadd+0x90>)
 8008510:	21b5      	movs	r1, #181	; 0xb5
 8008512:	f000 fd13 	bl	8008f3c <__assert_func>
 8008516:	6922      	ldr	r2, [r4, #16]
 8008518:	3202      	adds	r2, #2
 800851a:	f104 010c 	add.w	r1, r4, #12
 800851e:	0092      	lsls	r2, r2, #2
 8008520:	300c      	adds	r0, #12
 8008522:	f7ff ff59 	bl	80083d8 <memcpy>
 8008526:	4621      	mov	r1, r4
 8008528:	4638      	mov	r0, r7
 800852a:	f7ff ffa3 	bl	8008474 <_Bfree>
 800852e:	462c      	mov	r4, r5
 8008530:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008534:	3601      	adds	r6, #1
 8008536:	f8c3 8014 	str.w	r8, [r3, #20]
 800853a:	6126      	str	r6, [r4, #16]
 800853c:	4620      	mov	r0, r4
 800853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008542:	bf00      	nop
 8008544:	08009ca7 	.word	0x08009ca7
 8008548:	08009cb8 	.word	0x08009cb8

0800854c <__hi0bits>:
 800854c:	0c03      	lsrs	r3, r0, #16
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	b9d3      	cbnz	r3, 8008588 <__hi0bits+0x3c>
 8008552:	0400      	lsls	r0, r0, #16
 8008554:	2310      	movs	r3, #16
 8008556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800855a:	bf04      	itt	eq
 800855c:	0200      	lsleq	r0, r0, #8
 800855e:	3308      	addeq	r3, #8
 8008560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008564:	bf04      	itt	eq
 8008566:	0100      	lsleq	r0, r0, #4
 8008568:	3304      	addeq	r3, #4
 800856a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800856e:	bf04      	itt	eq
 8008570:	0080      	lsleq	r0, r0, #2
 8008572:	3302      	addeq	r3, #2
 8008574:	2800      	cmp	r0, #0
 8008576:	db05      	blt.n	8008584 <__hi0bits+0x38>
 8008578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800857c:	f103 0301 	add.w	r3, r3, #1
 8008580:	bf08      	it	eq
 8008582:	2320      	moveq	r3, #32
 8008584:	4618      	mov	r0, r3
 8008586:	4770      	bx	lr
 8008588:	2300      	movs	r3, #0
 800858a:	e7e4      	b.n	8008556 <__hi0bits+0xa>

0800858c <__lo0bits>:
 800858c:	6803      	ldr	r3, [r0, #0]
 800858e:	f013 0207 	ands.w	r2, r3, #7
 8008592:	4601      	mov	r1, r0
 8008594:	d00b      	beq.n	80085ae <__lo0bits+0x22>
 8008596:	07da      	lsls	r2, r3, #31
 8008598:	d424      	bmi.n	80085e4 <__lo0bits+0x58>
 800859a:	0798      	lsls	r0, r3, #30
 800859c:	bf49      	itett	mi
 800859e:	085b      	lsrmi	r3, r3, #1
 80085a0:	089b      	lsrpl	r3, r3, #2
 80085a2:	2001      	movmi	r0, #1
 80085a4:	600b      	strmi	r3, [r1, #0]
 80085a6:	bf5c      	itt	pl
 80085a8:	600b      	strpl	r3, [r1, #0]
 80085aa:	2002      	movpl	r0, #2
 80085ac:	4770      	bx	lr
 80085ae:	b298      	uxth	r0, r3
 80085b0:	b9b0      	cbnz	r0, 80085e0 <__lo0bits+0x54>
 80085b2:	0c1b      	lsrs	r3, r3, #16
 80085b4:	2010      	movs	r0, #16
 80085b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085ba:	bf04      	itt	eq
 80085bc:	0a1b      	lsreq	r3, r3, #8
 80085be:	3008      	addeq	r0, #8
 80085c0:	071a      	lsls	r2, r3, #28
 80085c2:	bf04      	itt	eq
 80085c4:	091b      	lsreq	r3, r3, #4
 80085c6:	3004      	addeq	r0, #4
 80085c8:	079a      	lsls	r2, r3, #30
 80085ca:	bf04      	itt	eq
 80085cc:	089b      	lsreq	r3, r3, #2
 80085ce:	3002      	addeq	r0, #2
 80085d0:	07da      	lsls	r2, r3, #31
 80085d2:	d403      	bmi.n	80085dc <__lo0bits+0x50>
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	f100 0001 	add.w	r0, r0, #1
 80085da:	d005      	beq.n	80085e8 <__lo0bits+0x5c>
 80085dc:	600b      	str	r3, [r1, #0]
 80085de:	4770      	bx	lr
 80085e0:	4610      	mov	r0, r2
 80085e2:	e7e8      	b.n	80085b6 <__lo0bits+0x2a>
 80085e4:	2000      	movs	r0, #0
 80085e6:	4770      	bx	lr
 80085e8:	2020      	movs	r0, #32
 80085ea:	4770      	bx	lr

080085ec <__i2b>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	460c      	mov	r4, r1
 80085f0:	2101      	movs	r1, #1
 80085f2:	f7ff feff 	bl	80083f4 <_Balloc>
 80085f6:	4602      	mov	r2, r0
 80085f8:	b928      	cbnz	r0, 8008606 <__i2b+0x1a>
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <__i2b+0x24>)
 80085fc:	4805      	ldr	r0, [pc, #20]	; (8008614 <__i2b+0x28>)
 80085fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008602:	f000 fc9b 	bl	8008f3c <__assert_func>
 8008606:	2301      	movs	r3, #1
 8008608:	6144      	str	r4, [r0, #20]
 800860a:	6103      	str	r3, [r0, #16]
 800860c:	bd10      	pop	{r4, pc}
 800860e:	bf00      	nop
 8008610:	08009ca7 	.word	0x08009ca7
 8008614:	08009cb8 	.word	0x08009cb8

08008618 <__multiply>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4614      	mov	r4, r2
 800861e:	690a      	ldr	r2, [r1, #16]
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	bfb8      	it	lt
 8008626:	460b      	movlt	r3, r1
 8008628:	460d      	mov	r5, r1
 800862a:	bfbc      	itt	lt
 800862c:	4625      	movlt	r5, r4
 800862e:	461c      	movlt	r4, r3
 8008630:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008638:	68ab      	ldr	r3, [r5, #8]
 800863a:	6869      	ldr	r1, [r5, #4]
 800863c:	eb0a 0709 	add.w	r7, sl, r9
 8008640:	42bb      	cmp	r3, r7
 8008642:	b085      	sub	sp, #20
 8008644:	bfb8      	it	lt
 8008646:	3101      	addlt	r1, #1
 8008648:	f7ff fed4 	bl	80083f4 <_Balloc>
 800864c:	b930      	cbnz	r0, 800865c <__multiply+0x44>
 800864e:	4602      	mov	r2, r0
 8008650:	4b42      	ldr	r3, [pc, #264]	; (800875c <__multiply+0x144>)
 8008652:	4843      	ldr	r0, [pc, #268]	; (8008760 <__multiply+0x148>)
 8008654:	f240 115d 	movw	r1, #349	; 0x15d
 8008658:	f000 fc70 	bl	8008f3c <__assert_func>
 800865c:	f100 0614 	add.w	r6, r0, #20
 8008660:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008664:	4633      	mov	r3, r6
 8008666:	2200      	movs	r2, #0
 8008668:	4543      	cmp	r3, r8
 800866a:	d31e      	bcc.n	80086aa <__multiply+0x92>
 800866c:	f105 0c14 	add.w	ip, r5, #20
 8008670:	f104 0314 	add.w	r3, r4, #20
 8008674:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008678:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800867c:	9202      	str	r2, [sp, #8]
 800867e:	ebac 0205 	sub.w	r2, ip, r5
 8008682:	3a15      	subs	r2, #21
 8008684:	f022 0203 	bic.w	r2, r2, #3
 8008688:	3204      	adds	r2, #4
 800868a:	f105 0115 	add.w	r1, r5, #21
 800868e:	458c      	cmp	ip, r1
 8008690:	bf38      	it	cc
 8008692:	2204      	movcc	r2, #4
 8008694:	9201      	str	r2, [sp, #4]
 8008696:	9a02      	ldr	r2, [sp, #8]
 8008698:	9303      	str	r3, [sp, #12]
 800869a:	429a      	cmp	r2, r3
 800869c:	d808      	bhi.n	80086b0 <__multiply+0x98>
 800869e:	2f00      	cmp	r7, #0
 80086a0:	dc55      	bgt.n	800874e <__multiply+0x136>
 80086a2:	6107      	str	r7, [r0, #16]
 80086a4:	b005      	add	sp, #20
 80086a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086aa:	f843 2b04 	str.w	r2, [r3], #4
 80086ae:	e7db      	b.n	8008668 <__multiply+0x50>
 80086b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	d020      	beq.n	80086fc <__multiply+0xe4>
 80086ba:	f105 0e14 	add.w	lr, r5, #20
 80086be:	46b1      	mov	r9, r6
 80086c0:	2200      	movs	r2, #0
 80086c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80086c6:	f8d9 b000 	ldr.w	fp, [r9]
 80086ca:	b2a1      	uxth	r1, r4
 80086cc:	fa1f fb8b 	uxth.w	fp, fp
 80086d0:	fb0a b101 	mla	r1, sl, r1, fp
 80086d4:	4411      	add	r1, r2
 80086d6:	f8d9 2000 	ldr.w	r2, [r9]
 80086da:	0c24      	lsrs	r4, r4, #16
 80086dc:	0c12      	lsrs	r2, r2, #16
 80086de:	fb0a 2404 	mla	r4, sl, r4, r2
 80086e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80086e6:	b289      	uxth	r1, r1
 80086e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80086ec:	45f4      	cmp	ip, lr
 80086ee:	f849 1b04 	str.w	r1, [r9], #4
 80086f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80086f6:	d8e4      	bhi.n	80086c2 <__multiply+0xaa>
 80086f8:	9901      	ldr	r1, [sp, #4]
 80086fa:	5072      	str	r2, [r6, r1]
 80086fc:	9a03      	ldr	r2, [sp, #12]
 80086fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008702:	3304      	adds	r3, #4
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	d01f      	beq.n	800874a <__multiply+0x132>
 800870a:	6834      	ldr	r4, [r6, #0]
 800870c:	f105 0114 	add.w	r1, r5, #20
 8008710:	46b6      	mov	lr, r6
 8008712:	f04f 0a00 	mov.w	sl, #0
 8008716:	880a      	ldrh	r2, [r1, #0]
 8008718:	f8be b002 	ldrh.w	fp, [lr, #2]
 800871c:	fb09 b202 	mla	r2, r9, r2, fp
 8008720:	4492      	add	sl, r2
 8008722:	b2a4      	uxth	r4, r4
 8008724:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008728:	f84e 4b04 	str.w	r4, [lr], #4
 800872c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008730:	f8be 2000 	ldrh.w	r2, [lr]
 8008734:	0c24      	lsrs	r4, r4, #16
 8008736:	fb09 2404 	mla	r4, r9, r4, r2
 800873a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800873e:	458c      	cmp	ip, r1
 8008740:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008744:	d8e7      	bhi.n	8008716 <__multiply+0xfe>
 8008746:	9a01      	ldr	r2, [sp, #4]
 8008748:	50b4      	str	r4, [r6, r2]
 800874a:	3604      	adds	r6, #4
 800874c:	e7a3      	b.n	8008696 <__multiply+0x7e>
 800874e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1a5      	bne.n	80086a2 <__multiply+0x8a>
 8008756:	3f01      	subs	r7, #1
 8008758:	e7a1      	b.n	800869e <__multiply+0x86>
 800875a:	bf00      	nop
 800875c:	08009ca7 	.word	0x08009ca7
 8008760:	08009cb8 	.word	0x08009cb8

08008764 <__pow5mult>:
 8008764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008768:	4615      	mov	r5, r2
 800876a:	f012 0203 	ands.w	r2, r2, #3
 800876e:	4606      	mov	r6, r0
 8008770:	460f      	mov	r7, r1
 8008772:	d007      	beq.n	8008784 <__pow5mult+0x20>
 8008774:	4c25      	ldr	r4, [pc, #148]	; (800880c <__pow5mult+0xa8>)
 8008776:	3a01      	subs	r2, #1
 8008778:	2300      	movs	r3, #0
 800877a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800877e:	f7ff fe9b 	bl	80084b8 <__multadd>
 8008782:	4607      	mov	r7, r0
 8008784:	10ad      	asrs	r5, r5, #2
 8008786:	d03d      	beq.n	8008804 <__pow5mult+0xa0>
 8008788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800878a:	b97c      	cbnz	r4, 80087ac <__pow5mult+0x48>
 800878c:	2010      	movs	r0, #16
 800878e:	f7ff fe1b 	bl	80083c8 <malloc>
 8008792:	4602      	mov	r2, r0
 8008794:	6270      	str	r0, [r6, #36]	; 0x24
 8008796:	b928      	cbnz	r0, 80087a4 <__pow5mult+0x40>
 8008798:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <__pow5mult+0xac>)
 800879a:	481e      	ldr	r0, [pc, #120]	; (8008814 <__pow5mult+0xb0>)
 800879c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087a0:	f000 fbcc 	bl	8008f3c <__assert_func>
 80087a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087a8:	6004      	str	r4, [r0, #0]
 80087aa:	60c4      	str	r4, [r0, #12]
 80087ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087b4:	b94c      	cbnz	r4, 80087ca <__pow5mult+0x66>
 80087b6:	f240 2171 	movw	r1, #625	; 0x271
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ff16 	bl	80085ec <__i2b>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80087c6:	4604      	mov	r4, r0
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	f04f 0900 	mov.w	r9, #0
 80087ce:	07eb      	lsls	r3, r5, #31
 80087d0:	d50a      	bpl.n	80087e8 <__pow5mult+0x84>
 80087d2:	4639      	mov	r1, r7
 80087d4:	4622      	mov	r2, r4
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ff1e 	bl	8008618 <__multiply>
 80087dc:	4639      	mov	r1, r7
 80087de:	4680      	mov	r8, r0
 80087e0:	4630      	mov	r0, r6
 80087e2:	f7ff fe47 	bl	8008474 <_Bfree>
 80087e6:	4647      	mov	r7, r8
 80087e8:	106d      	asrs	r5, r5, #1
 80087ea:	d00b      	beq.n	8008804 <__pow5mult+0xa0>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	b938      	cbnz	r0, 8008800 <__pow5mult+0x9c>
 80087f0:	4622      	mov	r2, r4
 80087f2:	4621      	mov	r1, r4
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7ff ff0f 	bl	8008618 <__multiply>
 80087fa:	6020      	str	r0, [r4, #0]
 80087fc:	f8c0 9000 	str.w	r9, [r0]
 8008800:	4604      	mov	r4, r0
 8008802:	e7e4      	b.n	80087ce <__pow5mult+0x6a>
 8008804:	4638      	mov	r0, r7
 8008806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880a:	bf00      	nop
 800880c:	08009e08 	.word	0x08009e08
 8008810:	08009c31 	.word	0x08009c31
 8008814:	08009cb8 	.word	0x08009cb8

08008818 <__lshift>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	460c      	mov	r4, r1
 800881e:	6849      	ldr	r1, [r1, #4]
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	4607      	mov	r7, r0
 800882a:	4691      	mov	r9, r2
 800882c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008830:	f108 0601 	add.w	r6, r8, #1
 8008834:	42b3      	cmp	r3, r6
 8008836:	db0b      	blt.n	8008850 <__lshift+0x38>
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff fddb 	bl	80083f4 <_Balloc>
 800883e:	4605      	mov	r5, r0
 8008840:	b948      	cbnz	r0, 8008856 <__lshift+0x3e>
 8008842:	4602      	mov	r2, r0
 8008844:	4b28      	ldr	r3, [pc, #160]	; (80088e8 <__lshift+0xd0>)
 8008846:	4829      	ldr	r0, [pc, #164]	; (80088ec <__lshift+0xd4>)
 8008848:	f240 11d9 	movw	r1, #473	; 0x1d9
 800884c:	f000 fb76 	bl	8008f3c <__assert_func>
 8008850:	3101      	adds	r1, #1
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	e7ee      	b.n	8008834 <__lshift+0x1c>
 8008856:	2300      	movs	r3, #0
 8008858:	f100 0114 	add.w	r1, r0, #20
 800885c:	f100 0210 	add.w	r2, r0, #16
 8008860:	4618      	mov	r0, r3
 8008862:	4553      	cmp	r3, sl
 8008864:	db33      	blt.n	80088ce <__lshift+0xb6>
 8008866:	6920      	ldr	r0, [r4, #16]
 8008868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800886c:	f104 0314 	add.w	r3, r4, #20
 8008870:	f019 091f 	ands.w	r9, r9, #31
 8008874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800887c:	d02b      	beq.n	80088d6 <__lshift+0xbe>
 800887e:	f1c9 0e20 	rsb	lr, r9, #32
 8008882:	468a      	mov	sl, r1
 8008884:	2200      	movs	r2, #0
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	fa00 f009 	lsl.w	r0, r0, r9
 800888c:	4302      	orrs	r2, r0
 800888e:	f84a 2b04 	str.w	r2, [sl], #4
 8008892:	f853 2b04 	ldr.w	r2, [r3], #4
 8008896:	459c      	cmp	ip, r3
 8008898:	fa22 f20e 	lsr.w	r2, r2, lr
 800889c:	d8f3      	bhi.n	8008886 <__lshift+0x6e>
 800889e:	ebac 0304 	sub.w	r3, ip, r4
 80088a2:	3b15      	subs	r3, #21
 80088a4:	f023 0303 	bic.w	r3, r3, #3
 80088a8:	3304      	adds	r3, #4
 80088aa:	f104 0015 	add.w	r0, r4, #21
 80088ae:	4584      	cmp	ip, r0
 80088b0:	bf38      	it	cc
 80088b2:	2304      	movcc	r3, #4
 80088b4:	50ca      	str	r2, [r1, r3]
 80088b6:	b10a      	cbz	r2, 80088bc <__lshift+0xa4>
 80088b8:	f108 0602 	add.w	r6, r8, #2
 80088bc:	3e01      	subs	r6, #1
 80088be:	4638      	mov	r0, r7
 80088c0:	612e      	str	r6, [r5, #16]
 80088c2:	4621      	mov	r1, r4
 80088c4:	f7ff fdd6 	bl	8008474 <_Bfree>
 80088c8:	4628      	mov	r0, r5
 80088ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80088d2:	3301      	adds	r3, #1
 80088d4:	e7c5      	b.n	8008862 <__lshift+0x4a>
 80088d6:	3904      	subs	r1, #4
 80088d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80088e0:	459c      	cmp	ip, r3
 80088e2:	d8f9      	bhi.n	80088d8 <__lshift+0xc0>
 80088e4:	e7ea      	b.n	80088bc <__lshift+0xa4>
 80088e6:	bf00      	nop
 80088e8:	08009ca7 	.word	0x08009ca7
 80088ec:	08009cb8 	.word	0x08009cb8

080088f0 <__mcmp>:
 80088f0:	b530      	push	{r4, r5, lr}
 80088f2:	6902      	ldr	r2, [r0, #16]
 80088f4:	690c      	ldr	r4, [r1, #16]
 80088f6:	1b12      	subs	r2, r2, r4
 80088f8:	d10e      	bne.n	8008918 <__mcmp+0x28>
 80088fa:	f100 0314 	add.w	r3, r0, #20
 80088fe:	3114      	adds	r1, #20
 8008900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800890c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008910:	42a5      	cmp	r5, r4
 8008912:	d003      	beq.n	800891c <__mcmp+0x2c>
 8008914:	d305      	bcc.n	8008922 <__mcmp+0x32>
 8008916:	2201      	movs	r2, #1
 8008918:	4610      	mov	r0, r2
 800891a:	bd30      	pop	{r4, r5, pc}
 800891c:	4283      	cmp	r3, r0
 800891e:	d3f3      	bcc.n	8008908 <__mcmp+0x18>
 8008920:	e7fa      	b.n	8008918 <__mcmp+0x28>
 8008922:	f04f 32ff 	mov.w	r2, #4294967295
 8008926:	e7f7      	b.n	8008918 <__mcmp+0x28>

08008928 <__mdiff>:
 8008928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	460c      	mov	r4, r1
 800892e:	4606      	mov	r6, r0
 8008930:	4611      	mov	r1, r2
 8008932:	4620      	mov	r0, r4
 8008934:	4617      	mov	r7, r2
 8008936:	f7ff ffdb 	bl	80088f0 <__mcmp>
 800893a:	1e05      	subs	r5, r0, #0
 800893c:	d110      	bne.n	8008960 <__mdiff+0x38>
 800893e:	4629      	mov	r1, r5
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff fd57 	bl	80083f4 <_Balloc>
 8008946:	b930      	cbnz	r0, 8008956 <__mdiff+0x2e>
 8008948:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <__mdiff+0x108>)
 800894a:	4602      	mov	r2, r0
 800894c:	f240 2132 	movw	r1, #562	; 0x232
 8008950:	4838      	ldr	r0, [pc, #224]	; (8008a34 <__mdiff+0x10c>)
 8008952:	f000 faf3 	bl	8008f3c <__assert_func>
 8008956:	2301      	movs	r3, #1
 8008958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800895c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008960:	bfa4      	itt	ge
 8008962:	463b      	movge	r3, r7
 8008964:	4627      	movge	r7, r4
 8008966:	4630      	mov	r0, r6
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	bfa6      	itte	ge
 800896c:	461c      	movge	r4, r3
 800896e:	2500      	movge	r5, #0
 8008970:	2501      	movlt	r5, #1
 8008972:	f7ff fd3f 	bl	80083f4 <_Balloc>
 8008976:	b920      	cbnz	r0, 8008982 <__mdiff+0x5a>
 8008978:	4b2d      	ldr	r3, [pc, #180]	; (8008a30 <__mdiff+0x108>)
 800897a:	4602      	mov	r2, r0
 800897c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008980:	e7e6      	b.n	8008950 <__mdiff+0x28>
 8008982:	693e      	ldr	r6, [r7, #16]
 8008984:	60c5      	str	r5, [r0, #12]
 8008986:	6925      	ldr	r5, [r4, #16]
 8008988:	f107 0114 	add.w	r1, r7, #20
 800898c:	f104 0914 	add.w	r9, r4, #20
 8008990:	f100 0e14 	add.w	lr, r0, #20
 8008994:	f107 0210 	add.w	r2, r7, #16
 8008998:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800899c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80089a0:	46f2      	mov	sl, lr
 80089a2:	2700      	movs	r7, #0
 80089a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80089a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80089ac:	fa1f f883 	uxth.w	r8, r3
 80089b0:	fa17 f78b 	uxtah	r7, r7, fp
 80089b4:	0c1b      	lsrs	r3, r3, #16
 80089b6:	eba7 0808 	sub.w	r8, r7, r8
 80089ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089c2:	fa1f f888 	uxth.w	r8, r8
 80089c6:	141f      	asrs	r7, r3, #16
 80089c8:	454d      	cmp	r5, r9
 80089ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089ce:	f84a 3b04 	str.w	r3, [sl], #4
 80089d2:	d8e7      	bhi.n	80089a4 <__mdiff+0x7c>
 80089d4:	1b2b      	subs	r3, r5, r4
 80089d6:	3b15      	subs	r3, #21
 80089d8:	f023 0303 	bic.w	r3, r3, #3
 80089dc:	3304      	adds	r3, #4
 80089de:	3415      	adds	r4, #21
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	bf38      	it	cc
 80089e4:	2304      	movcc	r3, #4
 80089e6:	4419      	add	r1, r3
 80089e8:	4473      	add	r3, lr
 80089ea:	469e      	mov	lr, r3
 80089ec:	460d      	mov	r5, r1
 80089ee:	4565      	cmp	r5, ip
 80089f0:	d30e      	bcc.n	8008a10 <__mdiff+0xe8>
 80089f2:	f10c 0203 	add.w	r2, ip, #3
 80089f6:	1a52      	subs	r2, r2, r1
 80089f8:	f022 0203 	bic.w	r2, r2, #3
 80089fc:	3903      	subs	r1, #3
 80089fe:	458c      	cmp	ip, r1
 8008a00:	bf38      	it	cc
 8008a02:	2200      	movcc	r2, #0
 8008a04:	441a      	add	r2, r3
 8008a06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a0a:	b17b      	cbz	r3, 8008a2c <__mdiff+0x104>
 8008a0c:	6106      	str	r6, [r0, #16]
 8008a0e:	e7a5      	b.n	800895c <__mdiff+0x34>
 8008a10:	f855 8b04 	ldr.w	r8, [r5], #4
 8008a14:	fa17 f488 	uxtah	r4, r7, r8
 8008a18:	1422      	asrs	r2, r4, #16
 8008a1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008a1e:	b2a4      	uxth	r4, r4
 8008a20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008a24:	f84e 4b04 	str.w	r4, [lr], #4
 8008a28:	1417      	asrs	r7, r2, #16
 8008a2a:	e7e0      	b.n	80089ee <__mdiff+0xc6>
 8008a2c:	3e01      	subs	r6, #1
 8008a2e:	e7ea      	b.n	8008a06 <__mdiff+0xde>
 8008a30:	08009ca7 	.word	0x08009ca7
 8008a34:	08009cb8 	.word	0x08009cb8

08008a38 <__d2b>:
 8008a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4689      	mov	r9, r1
 8008a3e:	2101      	movs	r1, #1
 8008a40:	ec57 6b10 	vmov	r6, r7, d0
 8008a44:	4690      	mov	r8, r2
 8008a46:	f7ff fcd5 	bl	80083f4 <_Balloc>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	b930      	cbnz	r0, 8008a5c <__d2b+0x24>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	4b25      	ldr	r3, [pc, #148]	; (8008ae8 <__d2b+0xb0>)
 8008a52:	4826      	ldr	r0, [pc, #152]	; (8008aec <__d2b+0xb4>)
 8008a54:	f240 310a 	movw	r1, #778	; 0x30a
 8008a58:	f000 fa70 	bl	8008f3c <__assert_func>
 8008a5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a64:	bb35      	cbnz	r5, 8008ab4 <__d2b+0x7c>
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	d028      	beq.n	8008abe <__d2b+0x86>
 8008a6c:	4668      	mov	r0, sp
 8008a6e:	9600      	str	r6, [sp, #0]
 8008a70:	f7ff fd8c 	bl	800858c <__lo0bits>
 8008a74:	9900      	ldr	r1, [sp, #0]
 8008a76:	b300      	cbz	r0, 8008aba <__d2b+0x82>
 8008a78:	9a01      	ldr	r2, [sp, #4]
 8008a7a:	f1c0 0320 	rsb	r3, r0, #32
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	430b      	orrs	r3, r1
 8008a84:	40c2      	lsrs	r2, r0
 8008a86:	6163      	str	r3, [r4, #20]
 8008a88:	9201      	str	r2, [sp, #4]
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	61a3      	str	r3, [r4, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bf14      	ite	ne
 8008a92:	2202      	movne	r2, #2
 8008a94:	2201      	moveq	r2, #1
 8008a96:	6122      	str	r2, [r4, #16]
 8008a98:	b1d5      	cbz	r5, 8008ad0 <__d2b+0x98>
 8008a9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a9e:	4405      	add	r5, r0
 8008aa0:	f8c9 5000 	str.w	r5, [r9]
 8008aa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008aa8:	f8c8 0000 	str.w	r0, [r8]
 8008aac:	4620      	mov	r0, r4
 8008aae:	b003      	add	sp, #12
 8008ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ab8:	e7d5      	b.n	8008a66 <__d2b+0x2e>
 8008aba:	6161      	str	r1, [r4, #20]
 8008abc:	e7e5      	b.n	8008a8a <__d2b+0x52>
 8008abe:	a801      	add	r0, sp, #4
 8008ac0:	f7ff fd64 	bl	800858c <__lo0bits>
 8008ac4:	9b01      	ldr	r3, [sp, #4]
 8008ac6:	6163      	str	r3, [r4, #20]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	6122      	str	r2, [r4, #16]
 8008acc:	3020      	adds	r0, #32
 8008ace:	e7e3      	b.n	8008a98 <__d2b+0x60>
 8008ad0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ad4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ad8:	f8c9 0000 	str.w	r0, [r9]
 8008adc:	6918      	ldr	r0, [r3, #16]
 8008ade:	f7ff fd35 	bl	800854c <__hi0bits>
 8008ae2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ae6:	e7df      	b.n	8008aa8 <__d2b+0x70>
 8008ae8:	08009ca7 	.word	0x08009ca7
 8008aec:	08009cb8 	.word	0x08009cb8

08008af0 <_calloc_r>:
 8008af0:	b513      	push	{r0, r1, r4, lr}
 8008af2:	434a      	muls	r2, r1
 8008af4:	4611      	mov	r1, r2
 8008af6:	9201      	str	r2, [sp, #4]
 8008af8:	f000 f85a 	bl	8008bb0 <_malloc_r>
 8008afc:	4604      	mov	r4, r0
 8008afe:	b118      	cbz	r0, 8008b08 <_calloc_r+0x18>
 8008b00:	9a01      	ldr	r2, [sp, #4]
 8008b02:	2100      	movs	r1, #0
 8008b04:	f7fe f93e 	bl	8006d84 <memset>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	b002      	add	sp, #8
 8008b0c:	bd10      	pop	{r4, pc}
	...

08008b10 <_free_r>:
 8008b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d048      	beq.n	8008ba8 <_free_r+0x98>
 8008b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1a:	9001      	str	r0, [sp, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b22:	bfb8      	it	lt
 8008b24:	18e4      	addlt	r4, r4, r3
 8008b26:	f000 fa65 	bl	8008ff4 <__malloc_lock>
 8008b2a:	4a20      	ldr	r2, [pc, #128]	; (8008bac <_free_r+0x9c>)
 8008b2c:	9801      	ldr	r0, [sp, #4]
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	4615      	mov	r5, r2
 8008b32:	b933      	cbnz	r3, 8008b42 <_free_r+0x32>
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	6014      	str	r4, [r2, #0]
 8008b38:	b003      	add	sp, #12
 8008b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b3e:	f000 ba5f 	b.w	8009000 <__malloc_unlock>
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	d90b      	bls.n	8008b5e <_free_r+0x4e>
 8008b46:	6821      	ldr	r1, [r4, #0]
 8008b48:	1862      	adds	r2, r4, r1
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	bf04      	itt	eq
 8008b4e:	681a      	ldreq	r2, [r3, #0]
 8008b50:	685b      	ldreq	r3, [r3, #4]
 8008b52:	6063      	str	r3, [r4, #4]
 8008b54:	bf04      	itt	eq
 8008b56:	1852      	addeq	r2, r2, r1
 8008b58:	6022      	streq	r2, [r4, #0]
 8008b5a:	602c      	str	r4, [r5, #0]
 8008b5c:	e7ec      	b.n	8008b38 <_free_r+0x28>
 8008b5e:	461a      	mov	r2, r3
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	b10b      	cbz	r3, 8008b68 <_free_r+0x58>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d9fa      	bls.n	8008b5e <_free_r+0x4e>
 8008b68:	6811      	ldr	r1, [r2, #0]
 8008b6a:	1855      	adds	r5, r2, r1
 8008b6c:	42a5      	cmp	r5, r4
 8008b6e:	d10b      	bne.n	8008b88 <_free_r+0x78>
 8008b70:	6824      	ldr	r4, [r4, #0]
 8008b72:	4421      	add	r1, r4
 8008b74:	1854      	adds	r4, r2, r1
 8008b76:	42a3      	cmp	r3, r4
 8008b78:	6011      	str	r1, [r2, #0]
 8008b7a:	d1dd      	bne.n	8008b38 <_free_r+0x28>
 8008b7c:	681c      	ldr	r4, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	6053      	str	r3, [r2, #4]
 8008b82:	4421      	add	r1, r4
 8008b84:	6011      	str	r1, [r2, #0]
 8008b86:	e7d7      	b.n	8008b38 <_free_r+0x28>
 8008b88:	d902      	bls.n	8008b90 <_free_r+0x80>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	e7d3      	b.n	8008b38 <_free_r+0x28>
 8008b90:	6825      	ldr	r5, [r4, #0]
 8008b92:	1961      	adds	r1, r4, r5
 8008b94:	428b      	cmp	r3, r1
 8008b96:	bf04      	itt	eq
 8008b98:	6819      	ldreq	r1, [r3, #0]
 8008b9a:	685b      	ldreq	r3, [r3, #4]
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	bf04      	itt	eq
 8008ba0:	1949      	addeq	r1, r1, r5
 8008ba2:	6021      	streq	r1, [r4, #0]
 8008ba4:	6054      	str	r4, [r2, #4]
 8008ba6:	e7c7      	b.n	8008b38 <_free_r+0x28>
 8008ba8:	b003      	add	sp, #12
 8008baa:	bd30      	pop	{r4, r5, pc}
 8008bac:	200005c0 	.word	0x200005c0

08008bb0 <_malloc_r>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	1ccd      	adds	r5, r1, #3
 8008bb4:	f025 0503 	bic.w	r5, r5, #3
 8008bb8:	3508      	adds	r5, #8
 8008bba:	2d0c      	cmp	r5, #12
 8008bbc:	bf38      	it	cc
 8008bbe:	250c      	movcc	r5, #12
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	db01      	blt.n	8008bca <_malloc_r+0x1a>
 8008bc6:	42a9      	cmp	r1, r5
 8008bc8:	d903      	bls.n	8008bd2 <_malloc_r+0x22>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	2000      	movs	r0, #0
 8008bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd2:	f000 fa0f 	bl	8008ff4 <__malloc_lock>
 8008bd6:	4921      	ldr	r1, [pc, #132]	; (8008c5c <_malloc_r+0xac>)
 8008bd8:	680a      	ldr	r2, [r1, #0]
 8008bda:	4614      	mov	r4, r2
 8008bdc:	b99c      	cbnz	r4, 8008c06 <_malloc_r+0x56>
 8008bde:	4f20      	ldr	r7, [pc, #128]	; (8008c60 <_malloc_r+0xb0>)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	b923      	cbnz	r3, 8008bee <_malloc_r+0x3e>
 8008be4:	4621      	mov	r1, r4
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f998 	bl	8008f1c <_sbrk_r>
 8008bec:	6038      	str	r0, [r7, #0]
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f000 f993 	bl	8008f1c <_sbrk_r>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	d123      	bne.n	8008c42 <_malloc_r+0x92>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	6033      	str	r3, [r6, #0]
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 f9fe 	bl	8009000 <__malloc_unlock>
 8008c04:	e7e3      	b.n	8008bce <_malloc_r+0x1e>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	1b5b      	subs	r3, r3, r5
 8008c0a:	d417      	bmi.n	8008c3c <_malloc_r+0x8c>
 8008c0c:	2b0b      	cmp	r3, #11
 8008c0e:	d903      	bls.n	8008c18 <_malloc_r+0x68>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	441c      	add	r4, r3
 8008c14:	6025      	str	r5, [r4, #0]
 8008c16:	e004      	b.n	8008c22 <_malloc_r+0x72>
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	42a2      	cmp	r2, r4
 8008c1c:	bf0c      	ite	eq
 8008c1e:	600b      	streq	r3, [r1, #0]
 8008c20:	6053      	strne	r3, [r2, #4]
 8008c22:	4630      	mov	r0, r6
 8008c24:	f000 f9ec 	bl	8009000 <__malloc_unlock>
 8008c28:	f104 000b 	add.w	r0, r4, #11
 8008c2c:	1d23      	adds	r3, r4, #4
 8008c2e:	f020 0007 	bic.w	r0, r0, #7
 8008c32:	1ac2      	subs	r2, r0, r3
 8008c34:	d0cc      	beq.n	8008bd0 <_malloc_r+0x20>
 8008c36:	1a1b      	subs	r3, r3, r0
 8008c38:	50a3      	str	r3, [r4, r2]
 8008c3a:	e7c9      	b.n	8008bd0 <_malloc_r+0x20>
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	6864      	ldr	r4, [r4, #4]
 8008c40:	e7cc      	b.n	8008bdc <_malloc_r+0x2c>
 8008c42:	1cc4      	adds	r4, r0, #3
 8008c44:	f024 0403 	bic.w	r4, r4, #3
 8008c48:	42a0      	cmp	r0, r4
 8008c4a:	d0e3      	beq.n	8008c14 <_malloc_r+0x64>
 8008c4c:	1a21      	subs	r1, r4, r0
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 f964 	bl	8008f1c <_sbrk_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d1dd      	bne.n	8008c14 <_malloc_r+0x64>
 8008c58:	e7cf      	b.n	8008bfa <_malloc_r+0x4a>
 8008c5a:	bf00      	nop
 8008c5c:	200005c0 	.word	0x200005c0
 8008c60:	200005c4 	.word	0x200005c4

08008c64 <__ssputs_r>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	688e      	ldr	r6, [r1, #8]
 8008c6a:	429e      	cmp	r6, r3
 8008c6c:	4682      	mov	sl, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	4690      	mov	r8, r2
 8008c72:	461f      	mov	r7, r3
 8008c74:	d838      	bhi.n	8008ce8 <__ssputs_r+0x84>
 8008c76:	898a      	ldrh	r2, [r1, #12]
 8008c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c7c:	d032      	beq.n	8008ce4 <__ssputs_r+0x80>
 8008c7e:	6825      	ldr	r5, [r4, #0]
 8008c80:	6909      	ldr	r1, [r1, #16]
 8008c82:	eba5 0901 	sub.w	r9, r5, r1
 8008c86:	6965      	ldr	r5, [r4, #20]
 8008c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c90:	3301      	adds	r3, #1
 8008c92:	444b      	add	r3, r9
 8008c94:	106d      	asrs	r5, r5, #1
 8008c96:	429d      	cmp	r5, r3
 8008c98:	bf38      	it	cc
 8008c9a:	461d      	movcc	r5, r3
 8008c9c:	0553      	lsls	r3, r2, #21
 8008c9e:	d531      	bpl.n	8008d04 <__ssputs_r+0xa0>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7ff ff85 	bl	8008bb0 <_malloc_r>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	b950      	cbnz	r0, 8008cc0 <__ssputs_r+0x5c>
 8008caa:	230c      	movs	r3, #12
 8008cac:	f8ca 3000 	str.w	r3, [sl]
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc0:	6921      	ldr	r1, [r4, #16]
 8008cc2:	464a      	mov	r2, r9
 8008cc4:	f7ff fb88 	bl	80083d8 <memcpy>
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	6126      	str	r6, [r4, #16]
 8008cd6:	6165      	str	r5, [r4, #20]
 8008cd8:	444e      	add	r6, r9
 8008cda:	eba5 0509 	sub.w	r5, r5, r9
 8008cde:	6026      	str	r6, [r4, #0]
 8008ce0:	60a5      	str	r5, [r4, #8]
 8008ce2:	463e      	mov	r6, r7
 8008ce4:	42be      	cmp	r6, r7
 8008ce6:	d900      	bls.n	8008cea <__ssputs_r+0x86>
 8008ce8:	463e      	mov	r6, r7
 8008cea:	4632      	mov	r2, r6
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	4641      	mov	r1, r8
 8008cf0:	f000 f966 	bl	8008fc0 <memmove>
 8008cf4:	68a3      	ldr	r3, [r4, #8]
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	1b9b      	subs	r3, r3, r6
 8008cfa:	4432      	add	r2, r6
 8008cfc:	60a3      	str	r3, [r4, #8]
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	2000      	movs	r0, #0
 8008d02:	e7db      	b.n	8008cbc <__ssputs_r+0x58>
 8008d04:	462a      	mov	r2, r5
 8008d06:	f000 f981 	bl	800900c <_realloc_r>
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d1e1      	bne.n	8008cd4 <__ssputs_r+0x70>
 8008d10:	6921      	ldr	r1, [r4, #16]
 8008d12:	4650      	mov	r0, sl
 8008d14:	f7ff fefc 	bl	8008b10 <_free_r>
 8008d18:	e7c7      	b.n	8008caa <__ssputs_r+0x46>
	...

08008d1c <_svfiprintf_r>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	4698      	mov	r8, r3
 8008d22:	898b      	ldrh	r3, [r1, #12]
 8008d24:	061b      	lsls	r3, r3, #24
 8008d26:	b09d      	sub	sp, #116	; 0x74
 8008d28:	4607      	mov	r7, r0
 8008d2a:	460d      	mov	r5, r1
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	d50e      	bpl.n	8008d4e <_svfiprintf_r+0x32>
 8008d30:	690b      	ldr	r3, [r1, #16]
 8008d32:	b963      	cbnz	r3, 8008d4e <_svfiprintf_r+0x32>
 8008d34:	2140      	movs	r1, #64	; 0x40
 8008d36:	f7ff ff3b 	bl	8008bb0 <_malloc_r>
 8008d3a:	6028      	str	r0, [r5, #0]
 8008d3c:	6128      	str	r0, [r5, #16]
 8008d3e:	b920      	cbnz	r0, 8008d4a <_svfiprintf_r+0x2e>
 8008d40:	230c      	movs	r3, #12
 8008d42:	603b      	str	r3, [r7, #0]
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	e0d1      	b.n	8008eee <_svfiprintf_r+0x1d2>
 8008d4a:	2340      	movs	r3, #64	; 0x40
 8008d4c:	616b      	str	r3, [r5, #20]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	9309      	str	r3, [sp, #36]	; 0x24
 8008d52:	2320      	movs	r3, #32
 8008d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d5c:	2330      	movs	r3, #48	; 0x30
 8008d5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f08 <_svfiprintf_r+0x1ec>
 8008d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d66:	f04f 0901 	mov.w	r9, #1
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	469a      	mov	sl, r3
 8008d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d72:	b10a      	cbz	r2, 8008d78 <_svfiprintf_r+0x5c>
 8008d74:	2a25      	cmp	r2, #37	; 0x25
 8008d76:	d1f9      	bne.n	8008d6c <_svfiprintf_r+0x50>
 8008d78:	ebba 0b04 	subs.w	fp, sl, r4
 8008d7c:	d00b      	beq.n	8008d96 <_svfiprintf_r+0x7a>
 8008d7e:	465b      	mov	r3, fp
 8008d80:	4622      	mov	r2, r4
 8008d82:	4629      	mov	r1, r5
 8008d84:	4638      	mov	r0, r7
 8008d86:	f7ff ff6d 	bl	8008c64 <__ssputs_r>
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f000 80aa 	beq.w	8008ee4 <_svfiprintf_r+0x1c8>
 8008d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d92:	445a      	add	r2, fp
 8008d94:	9209      	str	r2, [sp, #36]	; 0x24
 8008d96:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80a2 	beq.w	8008ee4 <_svfiprintf_r+0x1c8>
 8008da0:	2300      	movs	r3, #0
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008daa:	f10a 0a01 	add.w	sl, sl, #1
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	9307      	str	r3, [sp, #28]
 8008db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008db6:	931a      	str	r3, [sp, #104]	; 0x68
 8008db8:	4654      	mov	r4, sl
 8008dba:	2205      	movs	r2, #5
 8008dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc0:	4851      	ldr	r0, [pc, #324]	; (8008f08 <_svfiprintf_r+0x1ec>)
 8008dc2:	f7f7 fa15 	bl	80001f0 <memchr>
 8008dc6:	9a04      	ldr	r2, [sp, #16]
 8008dc8:	b9d8      	cbnz	r0, 8008e02 <_svfiprintf_r+0xe6>
 8008dca:	06d0      	lsls	r0, r2, #27
 8008dcc:	bf44      	itt	mi
 8008dce:	2320      	movmi	r3, #32
 8008dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd4:	0711      	lsls	r1, r2, #28
 8008dd6:	bf44      	itt	mi
 8008dd8:	232b      	movmi	r3, #43	; 0x2b
 8008dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dde:	f89a 3000 	ldrb.w	r3, [sl]
 8008de2:	2b2a      	cmp	r3, #42	; 0x2a
 8008de4:	d015      	beq.n	8008e12 <_svfiprintf_r+0xf6>
 8008de6:	9a07      	ldr	r2, [sp, #28]
 8008de8:	4654      	mov	r4, sl
 8008dea:	2000      	movs	r0, #0
 8008dec:	f04f 0c0a 	mov.w	ip, #10
 8008df0:	4621      	mov	r1, r4
 8008df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df6:	3b30      	subs	r3, #48	; 0x30
 8008df8:	2b09      	cmp	r3, #9
 8008dfa:	d94e      	bls.n	8008e9a <_svfiprintf_r+0x17e>
 8008dfc:	b1b0      	cbz	r0, 8008e2c <_svfiprintf_r+0x110>
 8008dfe:	9207      	str	r2, [sp, #28]
 8008e00:	e014      	b.n	8008e2c <_svfiprintf_r+0x110>
 8008e02:	eba0 0308 	sub.w	r3, r0, r8
 8008e06:	fa09 f303 	lsl.w	r3, r9, r3
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	46a2      	mov	sl, r4
 8008e10:	e7d2      	b.n	8008db8 <_svfiprintf_r+0x9c>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	1d19      	adds	r1, r3, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	9103      	str	r1, [sp, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfbb      	ittet	lt
 8008e1e:	425b      	neglt	r3, r3
 8008e20:	f042 0202 	orrlt.w	r2, r2, #2
 8008e24:	9307      	strge	r3, [sp, #28]
 8008e26:	9307      	strlt	r3, [sp, #28]
 8008e28:	bfb8      	it	lt
 8008e2a:	9204      	strlt	r2, [sp, #16]
 8008e2c:	7823      	ldrb	r3, [r4, #0]
 8008e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e30:	d10c      	bne.n	8008e4c <_svfiprintf_r+0x130>
 8008e32:	7863      	ldrb	r3, [r4, #1]
 8008e34:	2b2a      	cmp	r3, #42	; 0x2a
 8008e36:	d135      	bne.n	8008ea4 <_svfiprintf_r+0x188>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	9203      	str	r2, [sp, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	bfb8      	it	lt
 8008e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e48:	3402      	adds	r4, #2
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f18 <_svfiprintf_r+0x1fc>
 8008e50:	7821      	ldrb	r1, [r4, #0]
 8008e52:	2203      	movs	r2, #3
 8008e54:	4650      	mov	r0, sl
 8008e56:	f7f7 f9cb 	bl	80001f0 <memchr>
 8008e5a:	b140      	cbz	r0, 8008e6e <_svfiprintf_r+0x152>
 8008e5c:	2340      	movs	r3, #64	; 0x40
 8008e5e:	eba0 000a 	sub.w	r0, r0, sl
 8008e62:	fa03 f000 	lsl.w	r0, r3, r0
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	4303      	orrs	r3, r0
 8008e6a:	3401      	adds	r4, #1
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	4826      	ldr	r0, [pc, #152]	; (8008f0c <_svfiprintf_r+0x1f0>)
 8008e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e78:	2206      	movs	r2, #6
 8008e7a:	f7f7 f9b9 	bl	80001f0 <memchr>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d038      	beq.n	8008ef4 <_svfiprintf_r+0x1d8>
 8008e82:	4b23      	ldr	r3, [pc, #140]	; (8008f10 <_svfiprintf_r+0x1f4>)
 8008e84:	bb1b      	cbnz	r3, 8008ece <_svfiprintf_r+0x1b2>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	3307      	adds	r3, #7
 8008e8a:	f023 0307 	bic.w	r3, r3, #7
 8008e8e:	3308      	adds	r3, #8
 8008e90:	9303      	str	r3, [sp, #12]
 8008e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e94:	4433      	add	r3, r6
 8008e96:	9309      	str	r3, [sp, #36]	; 0x24
 8008e98:	e767      	b.n	8008d6a <_svfiprintf_r+0x4e>
 8008e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	e7a5      	b.n	8008df0 <_svfiprintf_r+0xd4>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	3401      	adds	r4, #1
 8008ea8:	9305      	str	r3, [sp, #20]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	f04f 0c0a 	mov.w	ip, #10
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb6:	3a30      	subs	r2, #48	; 0x30
 8008eb8:	2a09      	cmp	r2, #9
 8008eba:	d903      	bls.n	8008ec4 <_svfiprintf_r+0x1a8>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0c5      	beq.n	8008e4c <_svfiprintf_r+0x130>
 8008ec0:	9105      	str	r1, [sp, #20]
 8008ec2:	e7c3      	b.n	8008e4c <_svfiprintf_r+0x130>
 8008ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec8:	4604      	mov	r4, r0
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e7f0      	b.n	8008eb0 <_svfiprintf_r+0x194>
 8008ece:	ab03      	add	r3, sp, #12
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	462a      	mov	r2, r5
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <_svfiprintf_r+0x1f8>)
 8008ed6:	a904      	add	r1, sp, #16
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7fd fffb 	bl	8006ed4 <_printf_float>
 8008ede:	1c42      	adds	r2, r0, #1
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	d1d6      	bne.n	8008e92 <_svfiprintf_r+0x176>
 8008ee4:	89ab      	ldrh	r3, [r5, #12]
 8008ee6:	065b      	lsls	r3, r3, #25
 8008ee8:	f53f af2c 	bmi.w	8008d44 <_svfiprintf_r+0x28>
 8008eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eee:	b01d      	add	sp, #116	; 0x74
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <_svfiprintf_r+0x1f8>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7fe fa8c 	bl	800741c <_printf_i>
 8008f04:	e7eb      	b.n	8008ede <_svfiprintf_r+0x1c2>
 8008f06:	bf00      	nop
 8008f08:	08009e14 	.word	0x08009e14
 8008f0c:	08009e1e 	.word	0x08009e1e
 8008f10:	08006ed5 	.word	0x08006ed5
 8008f14:	08008c65 	.word	0x08008c65
 8008f18:	08009e1a 	.word	0x08009e1a

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d06      	ldr	r5, [pc, #24]	; (8008f38 <_sbrk_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7fd fea0 	bl	8006c6c <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20000938 	.word	0x20000938

08008f3c <__assert_func>:
 8008f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f3e:	4614      	mov	r4, r2
 8008f40:	461a      	mov	r2, r3
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <__assert_func+0x2c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4605      	mov	r5, r0
 8008f48:	68d8      	ldr	r0, [r3, #12]
 8008f4a:	b14c      	cbz	r4, 8008f60 <__assert_func+0x24>
 8008f4c:	4b07      	ldr	r3, [pc, #28]	; (8008f6c <__assert_func+0x30>)
 8008f4e:	9100      	str	r1, [sp, #0]
 8008f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f54:	4906      	ldr	r1, [pc, #24]	; (8008f70 <__assert_func+0x34>)
 8008f56:	462b      	mov	r3, r5
 8008f58:	f000 f80e 	bl	8008f78 <fiprintf>
 8008f5c:	f000 faa4 	bl	80094a8 <abort>
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <__assert_func+0x38>)
 8008f62:	461c      	mov	r4, r3
 8008f64:	e7f3      	b.n	8008f4e <__assert_func+0x12>
 8008f66:	bf00      	nop
 8008f68:	20000278 	.word	0x20000278
 8008f6c:	08009e25 	.word	0x08009e25
 8008f70:	08009e32 	.word	0x08009e32
 8008f74:	08009e60 	.word	0x08009e60

08008f78 <fiprintf>:
 8008f78:	b40e      	push	{r1, r2, r3}
 8008f7a:	b503      	push	{r0, r1, lr}
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	4805      	ldr	r0, [pc, #20]	; (8008f98 <fiprintf+0x20>)
 8008f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f86:	6800      	ldr	r0, [r0, #0]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	f000 f88f 	bl	80090ac <_vfiprintf_r>
 8008f8e:	b002      	add	sp, #8
 8008f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f94:	b003      	add	sp, #12
 8008f96:	4770      	bx	lr
 8008f98:	20000278 	.word	0x20000278

08008f9c <__ascii_mbtowc>:
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	b901      	cbnz	r1, 8008fa2 <__ascii_mbtowc+0x6>
 8008fa0:	a901      	add	r1, sp, #4
 8008fa2:	b142      	cbz	r2, 8008fb6 <__ascii_mbtowc+0x1a>
 8008fa4:	b14b      	cbz	r3, 8008fba <__ascii_mbtowc+0x1e>
 8008fa6:	7813      	ldrb	r3, [r2, #0]
 8008fa8:	600b      	str	r3, [r1, #0]
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	1e10      	subs	r0, r2, #0
 8008fae:	bf18      	it	ne
 8008fb0:	2001      	movne	r0, #1
 8008fb2:	b002      	add	sp, #8
 8008fb4:	4770      	bx	lr
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	e7fb      	b.n	8008fb2 <__ascii_mbtowc+0x16>
 8008fba:	f06f 0001 	mvn.w	r0, #1
 8008fbe:	e7f8      	b.n	8008fb2 <__ascii_mbtowc+0x16>

08008fc0 <memmove>:
 8008fc0:	4288      	cmp	r0, r1
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	eb01 0402 	add.w	r4, r1, r2
 8008fc8:	d902      	bls.n	8008fd0 <memmove+0x10>
 8008fca:	4284      	cmp	r4, r0
 8008fcc:	4623      	mov	r3, r4
 8008fce:	d807      	bhi.n	8008fe0 <memmove+0x20>
 8008fd0:	1e43      	subs	r3, r0, #1
 8008fd2:	42a1      	cmp	r1, r4
 8008fd4:	d008      	beq.n	8008fe8 <memmove+0x28>
 8008fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fde:	e7f8      	b.n	8008fd2 <memmove+0x12>
 8008fe0:	4402      	add	r2, r0
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	428a      	cmp	r2, r1
 8008fe6:	d100      	bne.n	8008fea <memmove+0x2a>
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ff2:	e7f7      	b.n	8008fe4 <memmove+0x24>

08008ff4 <__malloc_lock>:
 8008ff4:	4801      	ldr	r0, [pc, #4]	; (8008ffc <__malloc_lock+0x8>)
 8008ff6:	f000 bc17 	b.w	8009828 <__retarget_lock_acquire_recursive>
 8008ffa:	bf00      	nop
 8008ffc:	20000940 	.word	0x20000940

08009000 <__malloc_unlock>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__malloc_unlock+0x8>)
 8009002:	f000 bc12 	b.w	800982a <__retarget_lock_release_recursive>
 8009006:	bf00      	nop
 8009008:	20000940 	.word	0x20000940

0800900c <_realloc_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	4607      	mov	r7, r0
 8009010:	4614      	mov	r4, r2
 8009012:	460e      	mov	r6, r1
 8009014:	b921      	cbnz	r1, 8009020 <_realloc_r+0x14>
 8009016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800901a:	4611      	mov	r1, r2
 800901c:	f7ff bdc8 	b.w	8008bb0 <_malloc_r>
 8009020:	b922      	cbnz	r2, 800902c <_realloc_r+0x20>
 8009022:	f7ff fd75 	bl	8008b10 <_free_r>
 8009026:	4625      	mov	r5, r4
 8009028:	4628      	mov	r0, r5
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	f000 fc62 	bl	80098f4 <_malloc_usable_size_r>
 8009030:	42a0      	cmp	r0, r4
 8009032:	d20f      	bcs.n	8009054 <_realloc_r+0x48>
 8009034:	4621      	mov	r1, r4
 8009036:	4638      	mov	r0, r7
 8009038:	f7ff fdba 	bl	8008bb0 <_malloc_r>
 800903c:	4605      	mov	r5, r0
 800903e:	2800      	cmp	r0, #0
 8009040:	d0f2      	beq.n	8009028 <_realloc_r+0x1c>
 8009042:	4631      	mov	r1, r6
 8009044:	4622      	mov	r2, r4
 8009046:	f7ff f9c7 	bl	80083d8 <memcpy>
 800904a:	4631      	mov	r1, r6
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fd5f 	bl	8008b10 <_free_r>
 8009052:	e7e9      	b.n	8009028 <_realloc_r+0x1c>
 8009054:	4635      	mov	r5, r6
 8009056:	e7e7      	b.n	8009028 <_realloc_r+0x1c>

08009058 <__sfputc_r>:
 8009058:	6893      	ldr	r3, [r2, #8]
 800905a:	3b01      	subs	r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	b410      	push	{r4}
 8009060:	6093      	str	r3, [r2, #8]
 8009062:	da08      	bge.n	8009076 <__sfputc_r+0x1e>
 8009064:	6994      	ldr	r4, [r2, #24]
 8009066:	42a3      	cmp	r3, r4
 8009068:	db01      	blt.n	800906e <__sfputc_r+0x16>
 800906a:	290a      	cmp	r1, #10
 800906c:	d103      	bne.n	8009076 <__sfputc_r+0x1e>
 800906e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009072:	f000 b94b 	b.w	800930c <__swbuf_r>
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	1c58      	adds	r0, r3, #1
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	7019      	strb	r1, [r3, #0]
 800907e:	4608      	mov	r0, r1
 8009080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009084:	4770      	bx	lr

08009086 <__sfputs_r>:
 8009086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009088:	4606      	mov	r6, r0
 800908a:	460f      	mov	r7, r1
 800908c:	4614      	mov	r4, r2
 800908e:	18d5      	adds	r5, r2, r3
 8009090:	42ac      	cmp	r4, r5
 8009092:	d101      	bne.n	8009098 <__sfputs_r+0x12>
 8009094:	2000      	movs	r0, #0
 8009096:	e007      	b.n	80090a8 <__sfputs_r+0x22>
 8009098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909c:	463a      	mov	r2, r7
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ffda 	bl	8009058 <__sfputc_r>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d1f3      	bne.n	8009090 <__sfputs_r+0xa>
 80090a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090ac <_vfiprintf_r>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	460d      	mov	r5, r1
 80090b2:	b09d      	sub	sp, #116	; 0x74
 80090b4:	4614      	mov	r4, r2
 80090b6:	4698      	mov	r8, r3
 80090b8:	4606      	mov	r6, r0
 80090ba:	b118      	cbz	r0, 80090c4 <_vfiprintf_r+0x18>
 80090bc:	6983      	ldr	r3, [r0, #24]
 80090be:	b90b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x18>
 80090c0:	f000 fb14 	bl	80096ec <__sinit>
 80090c4:	4b89      	ldr	r3, [pc, #548]	; (80092ec <_vfiprintf_r+0x240>)
 80090c6:	429d      	cmp	r5, r3
 80090c8:	d11b      	bne.n	8009102 <_vfiprintf_r+0x56>
 80090ca:	6875      	ldr	r5, [r6, #4]
 80090cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ce:	07d9      	lsls	r1, r3, #31
 80090d0:	d405      	bmi.n	80090de <_vfiprintf_r+0x32>
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	059a      	lsls	r2, r3, #22
 80090d6:	d402      	bmi.n	80090de <_vfiprintf_r+0x32>
 80090d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090da:	f000 fba5 	bl	8009828 <__retarget_lock_acquire_recursive>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	071b      	lsls	r3, r3, #28
 80090e2:	d501      	bpl.n	80090e8 <_vfiprintf_r+0x3c>
 80090e4:	692b      	ldr	r3, [r5, #16]
 80090e6:	b9eb      	cbnz	r3, 8009124 <_vfiprintf_r+0x78>
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f96e 	bl	80093cc <__swsetup_r>
 80090f0:	b1c0      	cbz	r0, 8009124 <_vfiprintf_r+0x78>
 80090f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f4:	07dc      	lsls	r4, r3, #31
 80090f6:	d50e      	bpl.n	8009116 <_vfiprintf_r+0x6a>
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	b01d      	add	sp, #116	; 0x74
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009102:	4b7b      	ldr	r3, [pc, #492]	; (80092f0 <_vfiprintf_r+0x244>)
 8009104:	429d      	cmp	r5, r3
 8009106:	d101      	bne.n	800910c <_vfiprintf_r+0x60>
 8009108:	68b5      	ldr	r5, [r6, #8]
 800910a:	e7df      	b.n	80090cc <_vfiprintf_r+0x20>
 800910c:	4b79      	ldr	r3, [pc, #484]	; (80092f4 <_vfiprintf_r+0x248>)
 800910e:	429d      	cmp	r5, r3
 8009110:	bf08      	it	eq
 8009112:	68f5      	ldreq	r5, [r6, #12]
 8009114:	e7da      	b.n	80090cc <_vfiprintf_r+0x20>
 8009116:	89ab      	ldrh	r3, [r5, #12]
 8009118:	0598      	lsls	r0, r3, #22
 800911a:	d4ed      	bmi.n	80090f8 <_vfiprintf_r+0x4c>
 800911c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800911e:	f000 fb84 	bl	800982a <__retarget_lock_release_recursive>
 8009122:	e7e9      	b.n	80090f8 <_vfiprintf_r+0x4c>
 8009124:	2300      	movs	r3, #0
 8009126:	9309      	str	r3, [sp, #36]	; 0x24
 8009128:	2320      	movs	r3, #32
 800912a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800912e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009132:	2330      	movs	r3, #48	; 0x30
 8009134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092f8 <_vfiprintf_r+0x24c>
 8009138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800913c:	f04f 0901 	mov.w	r9, #1
 8009140:	4623      	mov	r3, r4
 8009142:	469a      	mov	sl, r3
 8009144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009148:	b10a      	cbz	r2, 800914e <_vfiprintf_r+0xa2>
 800914a:	2a25      	cmp	r2, #37	; 0x25
 800914c:	d1f9      	bne.n	8009142 <_vfiprintf_r+0x96>
 800914e:	ebba 0b04 	subs.w	fp, sl, r4
 8009152:	d00b      	beq.n	800916c <_vfiprintf_r+0xc0>
 8009154:	465b      	mov	r3, fp
 8009156:	4622      	mov	r2, r4
 8009158:	4629      	mov	r1, r5
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff93 	bl	8009086 <__sfputs_r>
 8009160:	3001      	adds	r0, #1
 8009162:	f000 80aa 	beq.w	80092ba <_vfiprintf_r+0x20e>
 8009166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009168:	445a      	add	r2, fp
 800916a:	9209      	str	r2, [sp, #36]	; 0x24
 800916c:	f89a 3000 	ldrb.w	r3, [sl]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 80a2 	beq.w	80092ba <_vfiprintf_r+0x20e>
 8009176:	2300      	movs	r3, #0
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009180:	f10a 0a01 	add.w	sl, sl, #1
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	9307      	str	r3, [sp, #28]
 8009188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800918c:	931a      	str	r3, [sp, #104]	; 0x68
 800918e:	4654      	mov	r4, sl
 8009190:	2205      	movs	r2, #5
 8009192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009196:	4858      	ldr	r0, [pc, #352]	; (80092f8 <_vfiprintf_r+0x24c>)
 8009198:	f7f7 f82a 	bl	80001f0 <memchr>
 800919c:	9a04      	ldr	r2, [sp, #16]
 800919e:	b9d8      	cbnz	r0, 80091d8 <_vfiprintf_r+0x12c>
 80091a0:	06d1      	lsls	r1, r2, #27
 80091a2:	bf44      	itt	mi
 80091a4:	2320      	movmi	r3, #32
 80091a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091aa:	0713      	lsls	r3, r2, #28
 80091ac:	bf44      	itt	mi
 80091ae:	232b      	movmi	r3, #43	; 0x2b
 80091b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b4:	f89a 3000 	ldrb.w	r3, [sl]
 80091b8:	2b2a      	cmp	r3, #42	; 0x2a
 80091ba:	d015      	beq.n	80091e8 <_vfiprintf_r+0x13c>
 80091bc:	9a07      	ldr	r2, [sp, #28]
 80091be:	4654      	mov	r4, sl
 80091c0:	2000      	movs	r0, #0
 80091c2:	f04f 0c0a 	mov.w	ip, #10
 80091c6:	4621      	mov	r1, r4
 80091c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091cc:	3b30      	subs	r3, #48	; 0x30
 80091ce:	2b09      	cmp	r3, #9
 80091d0:	d94e      	bls.n	8009270 <_vfiprintf_r+0x1c4>
 80091d2:	b1b0      	cbz	r0, 8009202 <_vfiprintf_r+0x156>
 80091d4:	9207      	str	r2, [sp, #28]
 80091d6:	e014      	b.n	8009202 <_vfiprintf_r+0x156>
 80091d8:	eba0 0308 	sub.w	r3, r0, r8
 80091dc:	fa09 f303 	lsl.w	r3, r9, r3
 80091e0:	4313      	orrs	r3, r2
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	46a2      	mov	sl, r4
 80091e6:	e7d2      	b.n	800918e <_vfiprintf_r+0xe2>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	1d19      	adds	r1, r3, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	9103      	str	r1, [sp, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfbb      	ittet	lt
 80091f4:	425b      	neglt	r3, r3
 80091f6:	f042 0202 	orrlt.w	r2, r2, #2
 80091fa:	9307      	strge	r3, [sp, #28]
 80091fc:	9307      	strlt	r3, [sp, #28]
 80091fe:	bfb8      	it	lt
 8009200:	9204      	strlt	r2, [sp, #16]
 8009202:	7823      	ldrb	r3, [r4, #0]
 8009204:	2b2e      	cmp	r3, #46	; 0x2e
 8009206:	d10c      	bne.n	8009222 <_vfiprintf_r+0x176>
 8009208:	7863      	ldrb	r3, [r4, #1]
 800920a:	2b2a      	cmp	r3, #42	; 0x2a
 800920c:	d135      	bne.n	800927a <_vfiprintf_r+0x1ce>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9203      	str	r2, [sp, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfb8      	it	lt
 800921a:	f04f 33ff 	movlt.w	r3, #4294967295
 800921e:	3402      	adds	r4, #2
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009308 <_vfiprintf_r+0x25c>
 8009226:	7821      	ldrb	r1, [r4, #0]
 8009228:	2203      	movs	r2, #3
 800922a:	4650      	mov	r0, sl
 800922c:	f7f6 ffe0 	bl	80001f0 <memchr>
 8009230:	b140      	cbz	r0, 8009244 <_vfiprintf_r+0x198>
 8009232:	2340      	movs	r3, #64	; 0x40
 8009234:	eba0 000a 	sub.w	r0, r0, sl
 8009238:	fa03 f000 	lsl.w	r0, r3, r0
 800923c:	9b04      	ldr	r3, [sp, #16]
 800923e:	4303      	orrs	r3, r0
 8009240:	3401      	adds	r4, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009248:	482c      	ldr	r0, [pc, #176]	; (80092fc <_vfiprintf_r+0x250>)
 800924a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800924e:	2206      	movs	r2, #6
 8009250:	f7f6 ffce 	bl	80001f0 <memchr>
 8009254:	2800      	cmp	r0, #0
 8009256:	d03f      	beq.n	80092d8 <_vfiprintf_r+0x22c>
 8009258:	4b29      	ldr	r3, [pc, #164]	; (8009300 <_vfiprintf_r+0x254>)
 800925a:	bb1b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x1f8>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	3307      	adds	r3, #7
 8009260:	f023 0307 	bic.w	r3, r3, #7
 8009264:	3308      	adds	r3, #8
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	443b      	add	r3, r7
 800926c:	9309      	str	r3, [sp, #36]	; 0x24
 800926e:	e767      	b.n	8009140 <_vfiprintf_r+0x94>
 8009270:	fb0c 3202 	mla	r2, ip, r2, r3
 8009274:	460c      	mov	r4, r1
 8009276:	2001      	movs	r0, #1
 8009278:	e7a5      	b.n	80091c6 <_vfiprintf_r+0x11a>
 800927a:	2300      	movs	r3, #0
 800927c:	3401      	adds	r4, #1
 800927e:	9305      	str	r3, [sp, #20]
 8009280:	4619      	mov	r1, r3
 8009282:	f04f 0c0a 	mov.w	ip, #10
 8009286:	4620      	mov	r0, r4
 8009288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800928c:	3a30      	subs	r2, #48	; 0x30
 800928e:	2a09      	cmp	r2, #9
 8009290:	d903      	bls.n	800929a <_vfiprintf_r+0x1ee>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0c5      	beq.n	8009222 <_vfiprintf_r+0x176>
 8009296:	9105      	str	r1, [sp, #20]
 8009298:	e7c3      	b.n	8009222 <_vfiprintf_r+0x176>
 800929a:	fb0c 2101 	mla	r1, ip, r1, r2
 800929e:	4604      	mov	r4, r0
 80092a0:	2301      	movs	r3, #1
 80092a2:	e7f0      	b.n	8009286 <_vfiprintf_r+0x1da>
 80092a4:	ab03      	add	r3, sp, #12
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	462a      	mov	r2, r5
 80092aa:	4b16      	ldr	r3, [pc, #88]	; (8009304 <_vfiprintf_r+0x258>)
 80092ac:	a904      	add	r1, sp, #16
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7fd fe10 	bl	8006ed4 <_printf_float>
 80092b4:	4607      	mov	r7, r0
 80092b6:	1c78      	adds	r0, r7, #1
 80092b8:	d1d6      	bne.n	8009268 <_vfiprintf_r+0x1bc>
 80092ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	d405      	bmi.n	80092cc <_vfiprintf_r+0x220>
 80092c0:	89ab      	ldrh	r3, [r5, #12]
 80092c2:	059a      	lsls	r2, r3, #22
 80092c4:	d402      	bmi.n	80092cc <_vfiprintf_r+0x220>
 80092c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c8:	f000 faaf 	bl	800982a <__retarget_lock_release_recursive>
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	065b      	lsls	r3, r3, #25
 80092d0:	f53f af12 	bmi.w	80090f8 <_vfiprintf_r+0x4c>
 80092d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d6:	e711      	b.n	80090fc <_vfiprintf_r+0x50>
 80092d8:	ab03      	add	r3, sp, #12
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	462a      	mov	r2, r5
 80092de:	4b09      	ldr	r3, [pc, #36]	; (8009304 <_vfiprintf_r+0x258>)
 80092e0:	a904      	add	r1, sp, #16
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7fe f89a 	bl	800741c <_printf_i>
 80092e8:	e7e4      	b.n	80092b4 <_vfiprintf_r+0x208>
 80092ea:	bf00      	nop
 80092ec:	08009f8c 	.word	0x08009f8c
 80092f0:	08009fac 	.word	0x08009fac
 80092f4:	08009f6c 	.word	0x08009f6c
 80092f8:	08009e14 	.word	0x08009e14
 80092fc:	08009e1e 	.word	0x08009e1e
 8009300:	08006ed5 	.word	0x08006ed5
 8009304:	08009087 	.word	0x08009087
 8009308:	08009e1a 	.word	0x08009e1a

0800930c <__swbuf_r>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	460e      	mov	r6, r1
 8009310:	4614      	mov	r4, r2
 8009312:	4605      	mov	r5, r0
 8009314:	b118      	cbz	r0, 800931e <__swbuf_r+0x12>
 8009316:	6983      	ldr	r3, [r0, #24]
 8009318:	b90b      	cbnz	r3, 800931e <__swbuf_r+0x12>
 800931a:	f000 f9e7 	bl	80096ec <__sinit>
 800931e:	4b21      	ldr	r3, [pc, #132]	; (80093a4 <__swbuf_r+0x98>)
 8009320:	429c      	cmp	r4, r3
 8009322:	d12b      	bne.n	800937c <__swbuf_r+0x70>
 8009324:	686c      	ldr	r4, [r5, #4]
 8009326:	69a3      	ldr	r3, [r4, #24]
 8009328:	60a3      	str	r3, [r4, #8]
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	071a      	lsls	r2, r3, #28
 800932e:	d52f      	bpl.n	8009390 <__swbuf_r+0x84>
 8009330:	6923      	ldr	r3, [r4, #16]
 8009332:	b36b      	cbz	r3, 8009390 <__swbuf_r+0x84>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	6820      	ldr	r0, [r4, #0]
 8009338:	1ac0      	subs	r0, r0, r3
 800933a:	6963      	ldr	r3, [r4, #20]
 800933c:	b2f6      	uxtb	r6, r6
 800933e:	4283      	cmp	r3, r0
 8009340:	4637      	mov	r7, r6
 8009342:	dc04      	bgt.n	800934e <__swbuf_r+0x42>
 8009344:	4621      	mov	r1, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f93c 	bl	80095c4 <_fflush_r>
 800934c:	bb30      	cbnz	r0, 800939c <__swbuf_r+0x90>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	3b01      	subs	r3, #1
 8009352:	60a3      	str	r3, [r4, #8]
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	6022      	str	r2, [r4, #0]
 800935a:	701e      	strb	r6, [r3, #0]
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	3001      	adds	r0, #1
 8009360:	4283      	cmp	r3, r0
 8009362:	d004      	beq.n	800936e <__swbuf_r+0x62>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	07db      	lsls	r3, r3, #31
 8009368:	d506      	bpl.n	8009378 <__swbuf_r+0x6c>
 800936a:	2e0a      	cmp	r6, #10
 800936c:	d104      	bne.n	8009378 <__swbuf_r+0x6c>
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	f000 f927 	bl	80095c4 <_fflush_r>
 8009376:	b988      	cbnz	r0, 800939c <__swbuf_r+0x90>
 8009378:	4638      	mov	r0, r7
 800937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937c:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <__swbuf_r+0x9c>)
 800937e:	429c      	cmp	r4, r3
 8009380:	d101      	bne.n	8009386 <__swbuf_r+0x7a>
 8009382:	68ac      	ldr	r4, [r5, #8]
 8009384:	e7cf      	b.n	8009326 <__swbuf_r+0x1a>
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <__swbuf_r+0xa0>)
 8009388:	429c      	cmp	r4, r3
 800938a:	bf08      	it	eq
 800938c:	68ec      	ldreq	r4, [r5, #12]
 800938e:	e7ca      	b.n	8009326 <__swbuf_r+0x1a>
 8009390:	4621      	mov	r1, r4
 8009392:	4628      	mov	r0, r5
 8009394:	f000 f81a 	bl	80093cc <__swsetup_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	d0cb      	beq.n	8009334 <__swbuf_r+0x28>
 800939c:	f04f 37ff 	mov.w	r7, #4294967295
 80093a0:	e7ea      	b.n	8009378 <__swbuf_r+0x6c>
 80093a2:	bf00      	nop
 80093a4:	08009f8c 	.word	0x08009f8c
 80093a8:	08009fac 	.word	0x08009fac
 80093ac:	08009f6c 	.word	0x08009f6c

080093b0 <__ascii_wctomb>:
 80093b0:	b149      	cbz	r1, 80093c6 <__ascii_wctomb+0x16>
 80093b2:	2aff      	cmp	r2, #255	; 0xff
 80093b4:	bf85      	ittet	hi
 80093b6:	238a      	movhi	r3, #138	; 0x8a
 80093b8:	6003      	strhi	r3, [r0, #0]
 80093ba:	700a      	strbls	r2, [r1, #0]
 80093bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80093c0:	bf98      	it	ls
 80093c2:	2001      	movls	r0, #1
 80093c4:	4770      	bx	lr
 80093c6:	4608      	mov	r0, r1
 80093c8:	4770      	bx	lr
	...

080093cc <__swsetup_r>:
 80093cc:	4b32      	ldr	r3, [pc, #200]	; (8009498 <__swsetup_r+0xcc>)
 80093ce:	b570      	push	{r4, r5, r6, lr}
 80093d0:	681d      	ldr	r5, [r3, #0]
 80093d2:	4606      	mov	r6, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	b125      	cbz	r5, 80093e2 <__swsetup_r+0x16>
 80093d8:	69ab      	ldr	r3, [r5, #24]
 80093da:	b913      	cbnz	r3, 80093e2 <__swsetup_r+0x16>
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 f985 	bl	80096ec <__sinit>
 80093e2:	4b2e      	ldr	r3, [pc, #184]	; (800949c <__swsetup_r+0xd0>)
 80093e4:	429c      	cmp	r4, r3
 80093e6:	d10f      	bne.n	8009408 <__swsetup_r+0x3c>
 80093e8:	686c      	ldr	r4, [r5, #4]
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f0:	0719      	lsls	r1, r3, #28
 80093f2:	d42c      	bmi.n	800944e <__swsetup_r+0x82>
 80093f4:	06dd      	lsls	r5, r3, #27
 80093f6:	d411      	bmi.n	800941c <__swsetup_r+0x50>
 80093f8:	2309      	movs	r3, #9
 80093fa:	6033      	str	r3, [r6, #0]
 80093fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	f04f 30ff 	mov.w	r0, #4294967295
 8009406:	e03e      	b.n	8009486 <__swsetup_r+0xba>
 8009408:	4b25      	ldr	r3, [pc, #148]	; (80094a0 <__swsetup_r+0xd4>)
 800940a:	429c      	cmp	r4, r3
 800940c:	d101      	bne.n	8009412 <__swsetup_r+0x46>
 800940e:	68ac      	ldr	r4, [r5, #8]
 8009410:	e7eb      	b.n	80093ea <__swsetup_r+0x1e>
 8009412:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <__swsetup_r+0xd8>)
 8009414:	429c      	cmp	r4, r3
 8009416:	bf08      	it	eq
 8009418:	68ec      	ldreq	r4, [r5, #12]
 800941a:	e7e6      	b.n	80093ea <__swsetup_r+0x1e>
 800941c:	0758      	lsls	r0, r3, #29
 800941e:	d512      	bpl.n	8009446 <__swsetup_r+0x7a>
 8009420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009422:	b141      	cbz	r1, 8009436 <__swsetup_r+0x6a>
 8009424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009428:	4299      	cmp	r1, r3
 800942a:	d002      	beq.n	8009432 <__swsetup_r+0x66>
 800942c:	4630      	mov	r0, r6
 800942e:	f7ff fb6f 	bl	8008b10 <_free_r>
 8009432:	2300      	movs	r3, #0
 8009434:	6363      	str	r3, [r4, #52]	; 0x34
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	2300      	movs	r3, #0
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f043 0308 	orr.w	r3, r3, #8
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	b94b      	cbnz	r3, 8009466 <__swsetup_r+0x9a>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800945c:	d003      	beq.n	8009466 <__swsetup_r+0x9a>
 800945e:	4621      	mov	r1, r4
 8009460:	4630      	mov	r0, r6
 8009462:	f000 fa07 	bl	8009874 <__smakebuf_r>
 8009466:	89a0      	ldrh	r0, [r4, #12]
 8009468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800946c:	f010 0301 	ands.w	r3, r0, #1
 8009470:	d00a      	beq.n	8009488 <__swsetup_r+0xbc>
 8009472:	2300      	movs	r3, #0
 8009474:	60a3      	str	r3, [r4, #8]
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	425b      	negs	r3, r3
 800947a:	61a3      	str	r3, [r4, #24]
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	b943      	cbnz	r3, 8009492 <__swsetup_r+0xc6>
 8009480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009484:	d1ba      	bne.n	80093fc <__swsetup_r+0x30>
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	0781      	lsls	r1, r0, #30
 800948a:	bf58      	it	pl
 800948c:	6963      	ldrpl	r3, [r4, #20]
 800948e:	60a3      	str	r3, [r4, #8]
 8009490:	e7f4      	b.n	800947c <__swsetup_r+0xb0>
 8009492:	2000      	movs	r0, #0
 8009494:	e7f7      	b.n	8009486 <__swsetup_r+0xba>
 8009496:	bf00      	nop
 8009498:	20000278 	.word	0x20000278
 800949c:	08009f8c 	.word	0x08009f8c
 80094a0:	08009fac 	.word	0x08009fac
 80094a4:	08009f6c 	.word	0x08009f6c

080094a8 <abort>:
 80094a8:	b508      	push	{r3, lr}
 80094aa:	2006      	movs	r0, #6
 80094ac:	f000 fa52 	bl	8009954 <raise>
 80094b0:	2001      	movs	r0, #1
 80094b2:	f7fd fbb7 	bl	8006c24 <_exit>
	...

080094b8 <__sflush_r>:
 80094b8:	898a      	ldrh	r2, [r1, #12]
 80094ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094be:	4605      	mov	r5, r0
 80094c0:	0710      	lsls	r0, r2, #28
 80094c2:	460c      	mov	r4, r1
 80094c4:	d458      	bmi.n	8009578 <__sflush_r+0xc0>
 80094c6:	684b      	ldr	r3, [r1, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dc05      	bgt.n	80094d8 <__sflush_r+0x20>
 80094cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	dc02      	bgt.n	80094d8 <__sflush_r+0x20>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d0f9      	beq.n	80094d2 <__sflush_r+0x1a>
 80094de:	2300      	movs	r3, #0
 80094e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094e4:	682f      	ldr	r7, [r5, #0]
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	d032      	beq.n	8009550 <__sflush_r+0x98>
 80094ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	075a      	lsls	r2, r3, #29
 80094f0:	d505      	bpl.n	80094fe <__sflush_r+0x46>
 80094f2:	6863      	ldr	r3, [r4, #4]
 80094f4:	1ac0      	subs	r0, r0, r3
 80094f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094f8:	b10b      	cbz	r3, 80094fe <__sflush_r+0x46>
 80094fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094fc:	1ac0      	subs	r0, r0, r3
 80094fe:	2300      	movs	r3, #0
 8009500:	4602      	mov	r2, r0
 8009502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009504:	6a21      	ldr	r1, [r4, #32]
 8009506:	4628      	mov	r0, r5
 8009508:	47b0      	blx	r6
 800950a:	1c43      	adds	r3, r0, #1
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	d106      	bne.n	800951e <__sflush_r+0x66>
 8009510:	6829      	ldr	r1, [r5, #0]
 8009512:	291d      	cmp	r1, #29
 8009514:	d82c      	bhi.n	8009570 <__sflush_r+0xb8>
 8009516:	4a2a      	ldr	r2, [pc, #168]	; (80095c0 <__sflush_r+0x108>)
 8009518:	40ca      	lsrs	r2, r1
 800951a:	07d6      	lsls	r6, r2, #31
 800951c:	d528      	bpl.n	8009570 <__sflush_r+0xb8>
 800951e:	2200      	movs	r2, #0
 8009520:	6062      	str	r2, [r4, #4]
 8009522:	04d9      	lsls	r1, r3, #19
 8009524:	6922      	ldr	r2, [r4, #16]
 8009526:	6022      	str	r2, [r4, #0]
 8009528:	d504      	bpl.n	8009534 <__sflush_r+0x7c>
 800952a:	1c42      	adds	r2, r0, #1
 800952c:	d101      	bne.n	8009532 <__sflush_r+0x7a>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	b903      	cbnz	r3, 8009534 <__sflush_r+0x7c>
 8009532:	6560      	str	r0, [r4, #84]	; 0x54
 8009534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009536:	602f      	str	r7, [r5, #0]
 8009538:	2900      	cmp	r1, #0
 800953a:	d0ca      	beq.n	80094d2 <__sflush_r+0x1a>
 800953c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009540:	4299      	cmp	r1, r3
 8009542:	d002      	beq.n	800954a <__sflush_r+0x92>
 8009544:	4628      	mov	r0, r5
 8009546:	f7ff fae3 	bl	8008b10 <_free_r>
 800954a:	2000      	movs	r0, #0
 800954c:	6360      	str	r0, [r4, #52]	; 0x34
 800954e:	e7c1      	b.n	80094d4 <__sflush_r+0x1c>
 8009550:	6a21      	ldr	r1, [r4, #32]
 8009552:	2301      	movs	r3, #1
 8009554:	4628      	mov	r0, r5
 8009556:	47b0      	blx	r6
 8009558:	1c41      	adds	r1, r0, #1
 800955a:	d1c7      	bne.n	80094ec <__sflush_r+0x34>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0c4      	beq.n	80094ec <__sflush_r+0x34>
 8009562:	2b1d      	cmp	r3, #29
 8009564:	d001      	beq.n	800956a <__sflush_r+0xb2>
 8009566:	2b16      	cmp	r3, #22
 8009568:	d101      	bne.n	800956e <__sflush_r+0xb6>
 800956a:	602f      	str	r7, [r5, #0]
 800956c:	e7b1      	b.n	80094d2 <__sflush_r+0x1a>
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	e7ad      	b.n	80094d4 <__sflush_r+0x1c>
 8009578:	690f      	ldr	r7, [r1, #16]
 800957a:	2f00      	cmp	r7, #0
 800957c:	d0a9      	beq.n	80094d2 <__sflush_r+0x1a>
 800957e:	0793      	lsls	r3, r2, #30
 8009580:	680e      	ldr	r6, [r1, #0]
 8009582:	bf08      	it	eq
 8009584:	694b      	ldreq	r3, [r1, #20]
 8009586:	600f      	str	r7, [r1, #0]
 8009588:	bf18      	it	ne
 800958a:	2300      	movne	r3, #0
 800958c:	eba6 0807 	sub.w	r8, r6, r7
 8009590:	608b      	str	r3, [r1, #8]
 8009592:	f1b8 0f00 	cmp.w	r8, #0
 8009596:	dd9c      	ble.n	80094d2 <__sflush_r+0x1a>
 8009598:	6a21      	ldr	r1, [r4, #32]
 800959a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800959c:	4643      	mov	r3, r8
 800959e:	463a      	mov	r2, r7
 80095a0:	4628      	mov	r0, r5
 80095a2:	47b0      	blx	r6
 80095a4:	2800      	cmp	r0, #0
 80095a6:	dc06      	bgt.n	80095b6 <__sflush_r+0xfe>
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e78e      	b.n	80094d4 <__sflush_r+0x1c>
 80095b6:	4407      	add	r7, r0
 80095b8:	eba8 0800 	sub.w	r8, r8, r0
 80095bc:	e7e9      	b.n	8009592 <__sflush_r+0xda>
 80095be:	bf00      	nop
 80095c0:	20400001 	.word	0x20400001

080095c4 <_fflush_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	4605      	mov	r5, r0
 80095ca:	460c      	mov	r4, r1
 80095cc:	b913      	cbnz	r3, 80095d4 <_fflush_r+0x10>
 80095ce:	2500      	movs	r5, #0
 80095d0:	4628      	mov	r0, r5
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	b118      	cbz	r0, 80095de <_fflush_r+0x1a>
 80095d6:	6983      	ldr	r3, [r0, #24]
 80095d8:	b90b      	cbnz	r3, 80095de <_fflush_r+0x1a>
 80095da:	f000 f887 	bl	80096ec <__sinit>
 80095de:	4b14      	ldr	r3, [pc, #80]	; (8009630 <_fflush_r+0x6c>)
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d11b      	bne.n	800961c <_fflush_r+0x58>
 80095e4:	686c      	ldr	r4, [r5, #4]
 80095e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0ef      	beq.n	80095ce <_fflush_r+0xa>
 80095ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095f0:	07d0      	lsls	r0, r2, #31
 80095f2:	d404      	bmi.n	80095fe <_fflush_r+0x3a>
 80095f4:	0599      	lsls	r1, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_fflush_r+0x3a>
 80095f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fa:	f000 f915 	bl	8009828 <__retarget_lock_acquire_recursive>
 80095fe:	4628      	mov	r0, r5
 8009600:	4621      	mov	r1, r4
 8009602:	f7ff ff59 	bl	80094b8 <__sflush_r>
 8009606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009608:	07da      	lsls	r2, r3, #31
 800960a:	4605      	mov	r5, r0
 800960c:	d4e0      	bmi.n	80095d0 <_fflush_r+0xc>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	059b      	lsls	r3, r3, #22
 8009612:	d4dd      	bmi.n	80095d0 <_fflush_r+0xc>
 8009614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009616:	f000 f908 	bl	800982a <__retarget_lock_release_recursive>
 800961a:	e7d9      	b.n	80095d0 <_fflush_r+0xc>
 800961c:	4b05      	ldr	r3, [pc, #20]	; (8009634 <_fflush_r+0x70>)
 800961e:	429c      	cmp	r4, r3
 8009620:	d101      	bne.n	8009626 <_fflush_r+0x62>
 8009622:	68ac      	ldr	r4, [r5, #8]
 8009624:	e7df      	b.n	80095e6 <_fflush_r+0x22>
 8009626:	4b04      	ldr	r3, [pc, #16]	; (8009638 <_fflush_r+0x74>)
 8009628:	429c      	cmp	r4, r3
 800962a:	bf08      	it	eq
 800962c:	68ec      	ldreq	r4, [r5, #12]
 800962e:	e7da      	b.n	80095e6 <_fflush_r+0x22>
 8009630:	08009f8c 	.word	0x08009f8c
 8009634:	08009fac 	.word	0x08009fac
 8009638:	08009f6c 	.word	0x08009f6c

0800963c <std>:
 800963c:	2300      	movs	r3, #0
 800963e:	b510      	push	{r4, lr}
 8009640:	4604      	mov	r4, r0
 8009642:	e9c0 3300 	strd	r3, r3, [r0]
 8009646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800964a:	6083      	str	r3, [r0, #8]
 800964c:	8181      	strh	r1, [r0, #12]
 800964e:	6643      	str	r3, [r0, #100]	; 0x64
 8009650:	81c2      	strh	r2, [r0, #14]
 8009652:	6183      	str	r3, [r0, #24]
 8009654:	4619      	mov	r1, r3
 8009656:	2208      	movs	r2, #8
 8009658:	305c      	adds	r0, #92	; 0x5c
 800965a:	f7fd fb93 	bl	8006d84 <memset>
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <std+0x38>)
 8009660:	6263      	str	r3, [r4, #36]	; 0x24
 8009662:	4b05      	ldr	r3, [pc, #20]	; (8009678 <std+0x3c>)
 8009664:	62a3      	str	r3, [r4, #40]	; 0x28
 8009666:	4b05      	ldr	r3, [pc, #20]	; (800967c <std+0x40>)
 8009668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800966a:	4b05      	ldr	r3, [pc, #20]	; (8009680 <std+0x44>)
 800966c:	6224      	str	r4, [r4, #32]
 800966e:	6323      	str	r3, [r4, #48]	; 0x30
 8009670:	bd10      	pop	{r4, pc}
 8009672:	bf00      	nop
 8009674:	0800998d 	.word	0x0800998d
 8009678:	080099af 	.word	0x080099af
 800967c:	080099e7 	.word	0x080099e7
 8009680:	08009a0b 	.word	0x08009a0b

08009684 <_cleanup_r>:
 8009684:	4901      	ldr	r1, [pc, #4]	; (800968c <_cleanup_r+0x8>)
 8009686:	f000 b8af 	b.w	80097e8 <_fwalk_reent>
 800968a:	bf00      	nop
 800968c:	080095c5 	.word	0x080095c5

08009690 <__sfmoreglue>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	1e4a      	subs	r2, r1, #1
 8009694:	2568      	movs	r5, #104	; 0x68
 8009696:	4355      	muls	r5, r2
 8009698:	460e      	mov	r6, r1
 800969a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800969e:	f7ff fa87 	bl	8008bb0 <_malloc_r>
 80096a2:	4604      	mov	r4, r0
 80096a4:	b140      	cbz	r0, 80096b8 <__sfmoreglue+0x28>
 80096a6:	2100      	movs	r1, #0
 80096a8:	e9c0 1600 	strd	r1, r6, [r0]
 80096ac:	300c      	adds	r0, #12
 80096ae:	60a0      	str	r0, [r4, #8]
 80096b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096b4:	f7fd fb66 	bl	8006d84 <memset>
 80096b8:	4620      	mov	r0, r4
 80096ba:	bd70      	pop	{r4, r5, r6, pc}

080096bc <__sfp_lock_acquire>:
 80096bc:	4801      	ldr	r0, [pc, #4]	; (80096c4 <__sfp_lock_acquire+0x8>)
 80096be:	f000 b8b3 	b.w	8009828 <__retarget_lock_acquire_recursive>
 80096c2:	bf00      	nop
 80096c4:	20000944 	.word	0x20000944

080096c8 <__sfp_lock_release>:
 80096c8:	4801      	ldr	r0, [pc, #4]	; (80096d0 <__sfp_lock_release+0x8>)
 80096ca:	f000 b8ae 	b.w	800982a <__retarget_lock_release_recursive>
 80096ce:	bf00      	nop
 80096d0:	20000944 	.word	0x20000944

080096d4 <__sinit_lock_acquire>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__sinit_lock_acquire+0x8>)
 80096d6:	f000 b8a7 	b.w	8009828 <__retarget_lock_acquire_recursive>
 80096da:	bf00      	nop
 80096dc:	2000093f 	.word	0x2000093f

080096e0 <__sinit_lock_release>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__sinit_lock_release+0x8>)
 80096e2:	f000 b8a2 	b.w	800982a <__retarget_lock_release_recursive>
 80096e6:	bf00      	nop
 80096e8:	2000093f 	.word	0x2000093f

080096ec <__sinit>:
 80096ec:	b510      	push	{r4, lr}
 80096ee:	4604      	mov	r4, r0
 80096f0:	f7ff fff0 	bl	80096d4 <__sinit_lock_acquire>
 80096f4:	69a3      	ldr	r3, [r4, #24]
 80096f6:	b11b      	cbz	r3, 8009700 <__sinit+0x14>
 80096f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096fc:	f7ff bff0 	b.w	80096e0 <__sinit_lock_release>
 8009700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009704:	6523      	str	r3, [r4, #80]	; 0x50
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <__sinit+0x68>)
 8009708:	4a13      	ldr	r2, [pc, #76]	; (8009758 <__sinit+0x6c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	62a2      	str	r2, [r4, #40]	; 0x28
 800970e:	42a3      	cmp	r3, r4
 8009710:	bf04      	itt	eq
 8009712:	2301      	moveq	r3, #1
 8009714:	61a3      	streq	r3, [r4, #24]
 8009716:	4620      	mov	r0, r4
 8009718:	f000 f820 	bl	800975c <__sfp>
 800971c:	6060      	str	r0, [r4, #4]
 800971e:	4620      	mov	r0, r4
 8009720:	f000 f81c 	bl	800975c <__sfp>
 8009724:	60a0      	str	r0, [r4, #8]
 8009726:	4620      	mov	r0, r4
 8009728:	f000 f818 	bl	800975c <__sfp>
 800972c:	2200      	movs	r2, #0
 800972e:	60e0      	str	r0, [r4, #12]
 8009730:	2104      	movs	r1, #4
 8009732:	6860      	ldr	r0, [r4, #4]
 8009734:	f7ff ff82 	bl	800963c <std>
 8009738:	68a0      	ldr	r0, [r4, #8]
 800973a:	2201      	movs	r2, #1
 800973c:	2109      	movs	r1, #9
 800973e:	f7ff ff7d 	bl	800963c <std>
 8009742:	68e0      	ldr	r0, [r4, #12]
 8009744:	2202      	movs	r2, #2
 8009746:	2112      	movs	r1, #18
 8009748:	f7ff ff78 	bl	800963c <std>
 800974c:	2301      	movs	r3, #1
 800974e:	61a3      	str	r3, [r4, #24]
 8009750:	e7d2      	b.n	80096f8 <__sinit+0xc>
 8009752:	bf00      	nop
 8009754:	08009bec 	.word	0x08009bec
 8009758:	08009685 	.word	0x08009685

0800975c <__sfp>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	4607      	mov	r7, r0
 8009760:	f7ff ffac 	bl	80096bc <__sfp_lock_acquire>
 8009764:	4b1e      	ldr	r3, [pc, #120]	; (80097e0 <__sfp+0x84>)
 8009766:	681e      	ldr	r6, [r3, #0]
 8009768:	69b3      	ldr	r3, [r6, #24]
 800976a:	b913      	cbnz	r3, 8009772 <__sfp+0x16>
 800976c:	4630      	mov	r0, r6
 800976e:	f7ff ffbd 	bl	80096ec <__sinit>
 8009772:	3648      	adds	r6, #72	; 0x48
 8009774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009778:	3b01      	subs	r3, #1
 800977a:	d503      	bpl.n	8009784 <__sfp+0x28>
 800977c:	6833      	ldr	r3, [r6, #0]
 800977e:	b30b      	cbz	r3, 80097c4 <__sfp+0x68>
 8009780:	6836      	ldr	r6, [r6, #0]
 8009782:	e7f7      	b.n	8009774 <__sfp+0x18>
 8009784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009788:	b9d5      	cbnz	r5, 80097c0 <__sfp+0x64>
 800978a:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <__sfp+0x88>)
 800978c:	60e3      	str	r3, [r4, #12]
 800978e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009792:	6665      	str	r5, [r4, #100]	; 0x64
 8009794:	f000 f847 	bl	8009826 <__retarget_lock_init_recursive>
 8009798:	f7ff ff96 	bl	80096c8 <__sfp_lock_release>
 800979c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097a4:	6025      	str	r5, [r4, #0]
 80097a6:	61a5      	str	r5, [r4, #24]
 80097a8:	2208      	movs	r2, #8
 80097aa:	4629      	mov	r1, r5
 80097ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097b0:	f7fd fae8 	bl	8006d84 <memset>
 80097b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097bc:	4620      	mov	r0, r4
 80097be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c0:	3468      	adds	r4, #104	; 0x68
 80097c2:	e7d9      	b.n	8009778 <__sfp+0x1c>
 80097c4:	2104      	movs	r1, #4
 80097c6:	4638      	mov	r0, r7
 80097c8:	f7ff ff62 	bl	8009690 <__sfmoreglue>
 80097cc:	4604      	mov	r4, r0
 80097ce:	6030      	str	r0, [r6, #0]
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d1d5      	bne.n	8009780 <__sfp+0x24>
 80097d4:	f7ff ff78 	bl	80096c8 <__sfp_lock_release>
 80097d8:	230c      	movs	r3, #12
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	e7ee      	b.n	80097bc <__sfp+0x60>
 80097de:	bf00      	nop
 80097e0:	08009bec 	.word	0x08009bec
 80097e4:	ffff0001 	.word	0xffff0001

080097e8 <_fwalk_reent>:
 80097e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ec:	4606      	mov	r6, r0
 80097ee:	4688      	mov	r8, r1
 80097f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097f4:	2700      	movs	r7, #0
 80097f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097fa:	f1b9 0901 	subs.w	r9, r9, #1
 80097fe:	d505      	bpl.n	800980c <_fwalk_reent+0x24>
 8009800:	6824      	ldr	r4, [r4, #0]
 8009802:	2c00      	cmp	r4, #0
 8009804:	d1f7      	bne.n	80097f6 <_fwalk_reent+0xe>
 8009806:	4638      	mov	r0, r7
 8009808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980c:	89ab      	ldrh	r3, [r5, #12]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d907      	bls.n	8009822 <_fwalk_reent+0x3a>
 8009812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009816:	3301      	adds	r3, #1
 8009818:	d003      	beq.n	8009822 <_fwalk_reent+0x3a>
 800981a:	4629      	mov	r1, r5
 800981c:	4630      	mov	r0, r6
 800981e:	47c0      	blx	r8
 8009820:	4307      	orrs	r7, r0
 8009822:	3568      	adds	r5, #104	; 0x68
 8009824:	e7e9      	b.n	80097fa <_fwalk_reent+0x12>

08009826 <__retarget_lock_init_recursive>:
 8009826:	4770      	bx	lr

08009828 <__retarget_lock_acquire_recursive>:
 8009828:	4770      	bx	lr

0800982a <__retarget_lock_release_recursive>:
 800982a:	4770      	bx	lr

0800982c <__swhatbuf_r>:
 800982c:	b570      	push	{r4, r5, r6, lr}
 800982e:	460e      	mov	r6, r1
 8009830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009834:	2900      	cmp	r1, #0
 8009836:	b096      	sub	sp, #88	; 0x58
 8009838:	4614      	mov	r4, r2
 800983a:	461d      	mov	r5, r3
 800983c:	da07      	bge.n	800984e <__swhatbuf_r+0x22>
 800983e:	2300      	movs	r3, #0
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	89b3      	ldrh	r3, [r6, #12]
 8009844:	061a      	lsls	r2, r3, #24
 8009846:	d410      	bmi.n	800986a <__swhatbuf_r+0x3e>
 8009848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800984c:	e00e      	b.n	800986c <__swhatbuf_r+0x40>
 800984e:	466a      	mov	r2, sp
 8009850:	f000 f902 	bl	8009a58 <_fstat_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	dbf2      	blt.n	800983e <__swhatbuf_r+0x12>
 8009858:	9a01      	ldr	r2, [sp, #4]
 800985a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800985e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009862:	425a      	negs	r2, r3
 8009864:	415a      	adcs	r2, r3
 8009866:	602a      	str	r2, [r5, #0]
 8009868:	e7ee      	b.n	8009848 <__swhatbuf_r+0x1c>
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	2000      	movs	r0, #0
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	b016      	add	sp, #88	; 0x58
 8009872:	bd70      	pop	{r4, r5, r6, pc}

08009874 <__smakebuf_r>:
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009878:	079d      	lsls	r5, r3, #30
 800987a:	4606      	mov	r6, r0
 800987c:	460c      	mov	r4, r1
 800987e:	d507      	bpl.n	8009890 <__smakebuf_r+0x1c>
 8009880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	6123      	str	r3, [r4, #16]
 8009888:	2301      	movs	r3, #1
 800988a:	6163      	str	r3, [r4, #20]
 800988c:	b002      	add	sp, #8
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	ab01      	add	r3, sp, #4
 8009892:	466a      	mov	r2, sp
 8009894:	f7ff ffca 	bl	800982c <__swhatbuf_r>
 8009898:	9900      	ldr	r1, [sp, #0]
 800989a:	4605      	mov	r5, r0
 800989c:	4630      	mov	r0, r6
 800989e:	f7ff f987 	bl	8008bb0 <_malloc_r>
 80098a2:	b948      	cbnz	r0, 80098b8 <__smakebuf_r+0x44>
 80098a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a8:	059a      	lsls	r2, r3, #22
 80098aa:	d4ef      	bmi.n	800988c <__smakebuf_r+0x18>
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	f043 0302 	orr.w	r3, r3, #2
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	e7e3      	b.n	8009880 <__smakebuf_r+0xc>
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <__smakebuf_r+0x7c>)
 80098ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	6020      	str	r0, [r4, #0]
 80098c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	9b00      	ldr	r3, [sp, #0]
 80098c8:	6163      	str	r3, [r4, #20]
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	6120      	str	r0, [r4, #16]
 80098ce:	b15b      	cbz	r3, 80098e8 <__smakebuf_r+0x74>
 80098d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098d4:	4630      	mov	r0, r6
 80098d6:	f000 f8d1 	bl	8009a7c <_isatty_r>
 80098da:	b128      	cbz	r0, 80098e8 <__smakebuf_r+0x74>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	81a3      	strh	r3, [r4, #12]
 80098e8:	89a0      	ldrh	r0, [r4, #12]
 80098ea:	4305      	orrs	r5, r0
 80098ec:	81a5      	strh	r5, [r4, #12]
 80098ee:	e7cd      	b.n	800988c <__smakebuf_r+0x18>
 80098f0:	08009685 	.word	0x08009685

080098f4 <_malloc_usable_size_r>:
 80098f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f8:	1f18      	subs	r0, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfbc      	itt	lt
 80098fe:	580b      	ldrlt	r3, [r1, r0]
 8009900:	18c0      	addlt	r0, r0, r3
 8009902:	4770      	bx	lr

08009904 <_raise_r>:
 8009904:	291f      	cmp	r1, #31
 8009906:	b538      	push	{r3, r4, r5, lr}
 8009908:	4604      	mov	r4, r0
 800990a:	460d      	mov	r5, r1
 800990c:	d904      	bls.n	8009918 <_raise_r+0x14>
 800990e:	2316      	movs	r3, #22
 8009910:	6003      	str	r3, [r0, #0]
 8009912:	f04f 30ff 	mov.w	r0, #4294967295
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800991a:	b112      	cbz	r2, 8009922 <_raise_r+0x1e>
 800991c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009920:	b94b      	cbnz	r3, 8009936 <_raise_r+0x32>
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f830 	bl	8009988 <_getpid_r>
 8009928:	462a      	mov	r2, r5
 800992a:	4601      	mov	r1, r0
 800992c:	4620      	mov	r0, r4
 800992e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009932:	f000 b817 	b.w	8009964 <_kill_r>
 8009936:	2b01      	cmp	r3, #1
 8009938:	d00a      	beq.n	8009950 <_raise_r+0x4c>
 800993a:	1c59      	adds	r1, r3, #1
 800993c:	d103      	bne.n	8009946 <_raise_r+0x42>
 800993e:	2316      	movs	r3, #22
 8009940:	6003      	str	r3, [r0, #0]
 8009942:	2001      	movs	r0, #1
 8009944:	e7e7      	b.n	8009916 <_raise_r+0x12>
 8009946:	2400      	movs	r4, #0
 8009948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800994c:	4628      	mov	r0, r5
 800994e:	4798      	blx	r3
 8009950:	2000      	movs	r0, #0
 8009952:	e7e0      	b.n	8009916 <_raise_r+0x12>

08009954 <raise>:
 8009954:	4b02      	ldr	r3, [pc, #8]	; (8009960 <raise+0xc>)
 8009956:	4601      	mov	r1, r0
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f7ff bfd3 	b.w	8009904 <_raise_r>
 800995e:	bf00      	nop
 8009960:	20000278 	.word	0x20000278

08009964 <_kill_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_kill_r+0x20>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	4611      	mov	r1, r2
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	f7fd f94f 	bl	8006c14 <_kill>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d102      	bne.n	8009980 <_kill_r+0x1c>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	b103      	cbz	r3, 8009980 <_kill_r+0x1c>
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	20000938 	.word	0x20000938

08009988 <_getpid_r>:
 8009988:	f7fd b942 	b.w	8006c10 <_getpid>

0800998c <__sread>:
 800998c:	b510      	push	{r4, lr}
 800998e:	460c      	mov	r4, r1
 8009990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009994:	f000 f894 	bl	8009ac0 <_read_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	bfab      	itete	ge
 800999c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800999e:	89a3      	ldrhlt	r3, [r4, #12]
 80099a0:	181b      	addge	r3, r3, r0
 80099a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099a6:	bfac      	ite	ge
 80099a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80099aa:	81a3      	strhlt	r3, [r4, #12]
 80099ac:	bd10      	pop	{r4, pc}

080099ae <__swrite>:
 80099ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	461f      	mov	r7, r3
 80099b4:	898b      	ldrh	r3, [r1, #12]
 80099b6:	05db      	lsls	r3, r3, #23
 80099b8:	4605      	mov	r5, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4616      	mov	r6, r2
 80099be:	d505      	bpl.n	80099cc <__swrite+0x1e>
 80099c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c4:	2302      	movs	r3, #2
 80099c6:	2200      	movs	r2, #0
 80099c8:	f000 f868 	bl	8009a9c <_lseek_r>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	4632      	mov	r2, r6
 80099da:	463b      	mov	r3, r7
 80099dc:	4628      	mov	r0, r5
 80099de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	f000 b817 	b.w	8009a14 <_write_r>

080099e6 <__sseek>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ee:	f000 f855 	bl	8009a9c <_lseek_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	bf15      	itete	ne
 80099f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a02:	81a3      	strheq	r3, [r4, #12]
 8009a04:	bf18      	it	ne
 8009a06:	81a3      	strhne	r3, [r4, #12]
 8009a08:	bd10      	pop	{r4, pc}

08009a0a <__sclose>:
 8009a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0e:	f000 b813 	b.w	8009a38 <_close_r>
	...

08009a14 <_write_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	; (8009a34 <_write_r+0x20>)
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f7fd f914 	bl	8006c50 <_write>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_write_r+0x1e>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_write_r+0x1e>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	20000938 	.word	0x20000938

08009a38 <_close_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	; (8009a54 <_close_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7fd f930 	bl	8006ca8 <_close>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_close_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_close_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20000938 	.word	0x20000938

08009a58 <_fstat_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_fstat_r+0x20>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7fd f922 	bl	8006cae <_fstat>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_fstat_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_fstat_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20000938 	.word	0x20000938

08009a7c <_isatty_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d06      	ldr	r5, [pc, #24]	; (8009a98 <_isatty_r+0x1c>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7fd f916 	bl	8006cb8 <_isatty>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_isatty_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_isatty_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20000938 	.word	0x20000938

08009a9c <_lseek_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4d07      	ldr	r5, [pc, #28]	; (8009abc <_lseek_r+0x20>)
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	602a      	str	r2, [r5, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f7fd f906 	bl	8006cbc <_lseek>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_lseek_r+0x1e>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_lseek_r+0x1e>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20000938 	.word	0x20000938

08009ac0 <_read_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	; (8009ae0 <_read_r+0x20>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4611      	mov	r1, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	602a      	str	r2, [r5, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f7fd f8ae 	bl	8006c30 <_read>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_read_r+0x1e>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_read_r+0x1e>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20000938 	.word	0x20000938

08009ae4 <_init>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr

08009af0 <_fini>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	bf00      	nop
 8009af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af6:	bc08      	pop	{r3}
 8009af8:	469e      	mov	lr, r3
 8009afa:	4770      	bx	lr
